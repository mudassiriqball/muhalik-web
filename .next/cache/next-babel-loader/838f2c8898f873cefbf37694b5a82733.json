{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\nimport { Row, Col, Card, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUpload, faDownload } from '@fortawesome/free-solid-svg-icons';\nimport axios, { post } from 'axios';\nimport GlobalStyleSheet from '../../../../../styleSheet';\nimport MuhalikConfig from '../../../../../sdk/muhalik.config';\nimport TitleRow from '../../../title-row';\n\nvar BulkUpload = /*#__PURE__*/function (_React$Component) {\n  _inherits(BulkUpload, _React$Component);\n\n  var _super = _createSuper(BulkUpload);\n\n  function BulkUpload(props) {\n    var _this;\n\n    _classCallCheck(this, BulkUpload);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"downloadBulkUploadTemplete\", function () {\n      fetch('/excel.xlsx').then(function (response) {\n        response.blob().then(function (blob) {\n          var url = window.URL.createObjectURL(blob);\n          var a = document.createElement('a');\n          a.href = url;\n          a.download = 'muhalik bulk-upload templete.xlsx';\n          a.click();\n        });\n      });\n    });\n\n    _this.state = {\n      file: null\n    };\n    _this.onFormSubmit = _this.onFormSubmit.bind(_assertThisInitialized(_this));\n    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));\n    _this.fileUpload = _this.fileUpload.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(BulkUpload, [{\n    key: \"onFormSubmit\",\n    value: function onFormSubmit(e) {\n      e.preventDefault(); // Stop form submit\n\n      this.fileUpload(this.state.file).then(function (response) {\n        console.log(response.data);\n      });\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(e) {\n      this.setState({\n        file: e.target.files[0]\n      });\n    }\n  }, {\n    key: \"fileUpload\",\n    value: function fileUpload(file) {\n      var url, form;\n      return _regeneratorRuntime.async(function fileUpload$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              url = MuhalikConfig.PATH + '/api/products/bulk-upload';\n              form = new FormData();\n              form.append('file', file);\n              axios.post(url, form, {\n                headers: {\n                  'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n                }\n              }).then(function (response) {\n                return response;\n              })[\"catch\"](function (error) {\n                console.log(error);\n              });\n              return _context.abrupt(\"return\", \"fuck\");\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", null, __jsx(TitleRow, {\n        icon: faUpload,\n        title: ' Vendor Dashboard / All Products'\n      }), __jsx(Row, {\n        style: styles.row\n      }, __jsx(Card, {\n        style: styles.card\n      }, __jsx(Card.Header, {\n        style: styles.card_header\n      }, \"Download Templete\"), __jsx(Card.Body, null, __jsx(Button, {\n        variant: \"primary\",\n        size: \"md\",\n        active: true,\n        onClick: this.downloadBulkUploadTemplete\n      }, __jsx(FontAwesomeIcon, {\n        icon: faDownload,\n        style: styles.fontawesome\n      }), \"Download\")))), __jsx(Row, {\n        style: styles.row\n      }, __jsx(Card, {\n        style: styles.card\n      }, __jsx(Card.Header, {\n        style: styles.card_header\n      }, \"Upload File\"), __jsx(Card.Body, null, __jsx(\"form\", {\n        onSubmit: this.onFormSubmit\n      }, __jsx(\"div\", {\n        style: styles.browseBtnDiv\n      }, __jsx(\"input\", {\n        type: \"file\",\n        onChange: this.onChange\n      })), __jsx(\"div\", {\n        style: {\n          width: '100%'\n        }\n      }, __jsx(Button, {\n        variant: \"primary\",\n        size: \"md\",\n        active: true,\n        type: \"submit\"\n      }, __jsx(FontAwesomeIcon, {\n        icon: faUpload,\n        style: styles.fontawesome\n      }), \"Upload\")))))));\n    }\n  }]);\n\n  return BulkUpload;\n}(React.Component);\n\nvar styles = {\n  row: {\n    margin: '2%',\n    padding: '0px'\n  },\n  card: {\n    width: '100%'\n  },\n  card_header: {\n    fontSize: \"\".concat(GlobalStyleSheet.card_header_fontsize),\n    background: \"\".concat(GlobalStyleSheet.card_header_background)\n  },\n  browseBtnDiv: {\n    width: '100%',\n    padding: '0px 0px 10px 0px'\n  },\n  fontawesome: {\n    color: 'white',\n    marginRight: '10px',\n    width: '14px',\n    height: '14px',\n    maxHeight: '14px',\n    maxWidth: '14px'\n  }\n};\nexport default BulkUpload;","map":null,"metadata":{},"sourceType":"module"}