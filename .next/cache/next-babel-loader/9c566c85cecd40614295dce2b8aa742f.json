{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Form, Row, Accordion, Col, Card, InputGroup, Button, Spinner, Dropdown, ButtonGroup } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faListAlt, faSlidersH } from '@fortawesome/free-solid-svg-icons';\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-regular-svg-icons';\nimport React, { Component } from 'react';\nimport MuhalikConfig from '../../../../../../sdk/muhalik.config';\nimport GlobalStyleSheet from '../../../../.././../styleSheet';\nimport axios from 'axios';\nimport AlertModal from '../../../../alert-modal';\nimport ConfirmModal from '../../../../confirm-modal';\nimport TitleRow from '../../../../title-row';\nimport CardAccordion from '../../../../card_accordion';\nimport { getUncodededTokenFromStorage } from '../../../../../../sdk/core/authentication-service';\nvar categoryArray = [];\n\nvar ProducCategories = /*#__PURE__*/function (_Component) {\n  _inherits(ProducCategories, _Component);\n\n  var _super = _createSuper(ProducCategories);\n\n  function ProducCategories(props) {\n    var _this;\n\n    _classCallCheck(this, ProducCategories);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCategoryChange\", function (e, index) {\n      var copyArray = [];\n      copyArray = Object.assign([], _this.state.categoriesList);\n      copyArray[index].value = e.target.value;\n\n      if (e.target.value != '' && e.target.value.length <= 20 && e.target.value.length >= 3) {\n        copyArray[index].error = '';\n      } else {\n        copyArray[index].error = 'Value must be 3-20 characters';\n      }\n\n      _this.setState({\n        categoriesList: copyArray\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubCategoryChange\", function (e, index) {\n      var copyArray = [];\n      copyArray = Object.assign([], _this.state.subCategoriesList);\n      copyArray[index].value = e.target.value;\n\n      if (e.target.value != '' && e.target.value.length <= 20 && e.target.value.length >= 3) {\n        copyArray[index].error = '';\n      } else {\n        copyArray[index].error = 'Value must be 3-20 characters';\n      }\n\n      _this.setState({\n        subCategoriesList: copyArray\n      });\n    });\n\n    _this.state = {\n      isLoading: false,\n      showToast: false,\n      showConfirmDeleteModal: false,\n      delete_category_id: '',\n      delete_category_name: '',\n      index: '',\n      categoryValue: '',\n      subCategoryValue: '',\n      categoryError: '',\n      subCategoryError: '',\n      categoriesList: [],\n      subCategoriesList: [],\n      categoryRequestList: [],\n      editRequestedCategory: '',\n      showModalMessage: '',\n      showModal: false,\n      searchType: 'Category',\n      filterStr: ''\n    };\n    return _this;\n  } // Getting Product Categories from DB\n\n\n  _createClass(ProducCategories, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var url, currentComponent;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              url = MuhalikConfig.PATH + '/api/categories/categories';\n              currentComponent = this;\n              _context.t0 = _regeneratorRuntime;\n              _context.t1 = axios;\n              _context.t2 = url;\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(getUncodededTokenFromStorage());\n\n            case 7:\n              _context.t3 = _context.sent;\n              _context.t4 = {\n                'authorization': _context.t3\n              };\n              _context.t5 = {\n                headers: _context.t4\n              };\n              _context.t6 = _context.t1.get.call(_context.t1, _context.t2, _context.t5).then(function (response) {\n                currentComponent.setState({\n                  categoriesList: response.data.category.docs,\n                  subCategoriesList: response.data.sub_category.docs\n                });\n                categoryArray = response.data.category.docs;\n              })[\"catch\"](function (error) {\n                console.log('Caterories Fetchig Error: ', error);\n              });\n              _context.next = 13;\n              return _context.t0.awrap.call(_context.t0, _context.t6);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"addCategory\",\n    value: function addCategory(currentComponent) {\n      var data, url;\n      return _regeneratorRuntime.async(function addCategory$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              data = [];\n              data = {\n                category: {\n                  value: this.state.categoryValue,\n                  label: this.state.categoryValue\n                },\n                sub_category: {\n                  value: this.state.subCategoryValue,\n                  label: this.state.subCategoryValue\n                }\n              };\n              url = MuhalikConfig.PATH + '/api/categories/category';\n              _context2.t0 = _regeneratorRuntime;\n              _context2.t1 = axios;\n              _context2.t2 = url;\n              _context2.t3 = {\n                data: data\n              };\n              _context2.next = 9;\n              return _regeneratorRuntime.awrap(getUncodededTokenFromStorage());\n\n            case 9:\n              _context2.t4 = _context2.sent;\n              _context2.t5 = {\n                'authorization': _context2.t4\n              };\n              _context2.t6 = {\n                headers: _context2.t5\n              };\n              _context2.t7 = _context2.t1.post.call(_context2.t1, _context2.t2, _context2.t3, _context2.t6).then(function (response) {\n                currentComponent.setState({\n                  isLoading: false\n                });\n                currentComponent.setState({\n                  showModalMessage: 'Product Category Added Successfully'\n                });\n                currentComponent.setState({\n                  showModal: true\n                });\n                return true;\n              })[\"catch\"](function (error) {\n                currentComponent.setState({\n                  isLoading: false\n                });\n\n                try {\n                  alert('Error: ', error.response.data.message);\n                } catch (err) {\n                  console.log('Request Failed:', error);\n                }\n\n                return false;\n              });\n              _context2.next = 15;\n              return _context2.t0.awrap.call(_context2.t0, _context2.t7);\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      return _regeneratorRuntime.async(function handleSubmit$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (this.state.categoryValue == '' || this.state.subCategoryValue == '') {\n                if (this.state.categoryValue == '') {\n                  this.setState({\n                    categoryError: 'Enter Value First'\n                  });\n                }\n\n                if (this.state.subCategoryValue == '') {\n                  this.setState({\n                    subCategoryError: 'Enter Value First'\n                  });\n                }\n              } else {\n                this.setState({\n                  isLoading: true\n                });\n                this.addCategory(this);\n              }\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    } // // Category Request \n    // // => Field Value \n    // handleCategoryRequestChange = (e, index) => {\n    //     let copyArray = [];\n    //     copyArray = Object.assign([], this.state.categoryRequestList);\n    //     copyArray[index].value = e.target.value;\n    //     if (e.target.value != '' && e.target.value.length <= 20 && e.target.value.length >= 3) {\n    //         copyArray[index].error = ''\n    //     } else {\n    //         copyArray[index].error = 'Value must be 3-20 characters'\n    //     }\n    //     this.setState({ categoryRequestList: copyArray })\n    // }\n    // //  => Edit\n    // async handleEditCategoryRequestClick(index) {\n    //     let copyArray = [];\n    //     copyArray = Object.assign([], this.state.categoryRequestList);\n    //     var obj = {};\n    //     obj['value'] = copyArray[index].value;\n    //     obj['label'] = false;\n    //     obj['prevVal'] = copyArray[index].value;\n    //     obj['error'] = '';\n    //     copyArray[index] = obj\n    //     await this.setState({ categoryRequestList: copyArray })\n    // }\n    // //  => Cancle\n    // handleCancelCategoryRequestClick(index) {\n    //     let copyArray = [];\n    //     copyArray = Object.assign([], this.state.categoryRequestList);\n    //     copyArray[index].value = copyArray[index].prevVal;\n    //     copyArray[index].label = true;\n    //     copyArray[index].error = '';\n    //     this.setState({ categoryRequestList: copyArray })\n    // }\n    // // Update\n    // handleUpdateCategoryRequestClick(index) {\n    //     let copyArray = [];\n    //     copyArray = Object.assign([], this.state.categoryRequestList);\n    //     if (copyArray[index].value == copyArray[index].prevVal) {\n    //         copyArray[index].error = 'Enter Different Value';\n    //         this.setState({ categoryRequestList: copyArray });\n    //     } else {\n    //         if (copyArray[index].error == '') {\n    //             copyArray[index].label = true;\n    //             this.setState({ categoryRequestList: copyArray, showModalMessage: 'Product Category Updated Successfully', showModal: true });\n    //         }\n    //     }\n    // }\n    // //  => Add\n    // handleAddCategoryRequestClick(index) {\n    //     let copyArray = [];\n    //     copyArray = Object.assign([], this.state.categoryRequestList);\n    //     copyArray.splice(index, 1);\n    //     this.setState({ categoryRequestList: copyArray, showModalMessage: 'Product Category Added Successfully', showModal: true })\n    //     this.addCategory(this)\n    // }\n    // //  => Delete\n    // handleDeleteCategoryRequestClick(index) {\n    //     let copyArray = [];\n    //     copyArray = Object.assign([], this.state.categoryRequestList);\n    //     copyArray.splice(index, 1);\n    //     this.setState({ categoryRequestList: copyArray, showModalMessage: 'Product Category Deleted', showModal: true })\n    // }\n    // All categories\n\n  }, {\n    key: \"handleFilterStrChange\",\n    value: function handleFilterStrChange(e) {\n      this.setState({\n        filterStr: e.target.value\n      });\n      var array = [];\n\n      if (e.target.value != '') {\n        if (this.state.searchType == 'Category') {\n          this.state.categoriesList.filter(function (data) {\n            var value = data.value.toLowerCase();\n\n            if (value.includes(e.target.value.toLowerCase())) {\n              array.push(data);\n            }\n          });\n        } else {\n          var currentComponent = this;\n          this.state.subCategoriesList.filter(function (element) {\n            var value = element.value.toLowerCase();\n\n            if (value.includes(e.target.value.toLowerCase())) {\n              currentComponent.state.categoriesList.filter(function (e) {\n                if (element.category_id == e._id) {\n                  array.push(e);\n                }\n              });\n            }\n          });\n          var a = [];\n          array.map(function (x) {\n            if (!a.includes(x)) {\n              a.push(x);\n            }\n          });\n          array = a;\n        }\n\n        this.setState({\n          categoriesList: array\n        });\n      } else {\n        this.setState({\n          categoriesList: categoryArray\n        });\n      }\n    } //  => Chane\n\n  }, {\n    key: \"handleEditCategoryClick\",\n    //  => Edit\n    value: function handleEditCategoryClick(index) {\n      var copyArray, obj;\n      return _regeneratorRuntime.async(function handleEditCategoryClick$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              copyArray = [];\n              copyArray = Object.assign([], this.state.categoriesList);\n              obj = {};\n              obj['_id'] = copyArray[index]._id;\n              obj['value'] = copyArray[index].value;\n              obj['label'] = false;\n              obj['prevVal'] = copyArray[index].value;\n              obj['error'] = '';\n              copyArray[index] = obj;\n              _context4.next = 11;\n              return _regeneratorRuntime.awrap(this.setState({\n                categoriesList: copyArray\n              }));\n\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    } //  => Cancle\n\n  }, {\n    key: \"handleCancelCategoryClick\",\n    value: function handleCancelCategoryClick(index) {\n      var copyArray = [];\n      copyArray = Object.assign([], this.state.categoriesList);\n      copyArray[index].value = copyArray[index].prevVal;\n      copyArray[index].error = '';\n      copyArray[index].label = true;\n      this.setState({\n        categoriesList: copyArray\n      });\n    } //  => Update\n\n  }, {\n    key: \"handleUpdateCategoryClick\",\n    value: function handleUpdateCategoryClick() {\n      var copyArray, index, currentComponent, data, url;\n      return _regeneratorRuntime.async(function handleUpdateCategoryClick$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              copyArray = [];\n              index = this.state.index;\n              copyArray = Object.assign([], this.state.categoriesList);\n\n              if (!(copyArray[index].value == copyArray[index].prevVal)) {\n                _context5.next = 8;\n                break;\n              }\n\n              copyArray[index].error = 'Enter Different Value';\n              this.setState({\n                categoryRequestList: copyArray\n              });\n              _context5.next = 24;\n              break;\n\n            case 8:\n              currentComponent = this;\n              data = [];\n              data = {\n                category: {\n                  value: copyArray[index].value,\n                  label: copyArray[index].value\n                }\n              };\n              url = MuhalikConfig.PATH + \"/api/categories/category/\".concat(copyArray[index]._id);\n              _context5.t0 = _regeneratorRuntime;\n              _context5.t1 = axios;\n              _context5.t2 = url;\n              _context5.t3 = {\n                data: data\n              };\n              _context5.next = 18;\n              return _regeneratorRuntime.awrap(getUncodededTokenFromStorage());\n\n            case 18:\n              _context5.t4 = _context5.sent;\n              _context5.t5 = {\n                'authorization': _context5.t4\n              };\n              _context5.t6 = {\n                headers: _context5.t5\n              };\n              _context5.t7 = _context5.t1.put.call(_context5.t1, _context5.t2, _context5.t3, _context5.t6).then(function (response) {\n                copyArray[index].label = copyArray[index].value;\n                copyArray[index].prevVal = copyArray[index].value;\n                currentComponent.setState({\n                  categoriesList: copyArray,\n                  showModalMessage: 'Product Category Updated Successfully',\n                  showModal: true\n                });\n                categoryArray = copyArray;\n              })[\"catch\"](function (error) {\n                try {\n                  alert('Error: ', error.response.data.message);\n                } catch (err) {\n                  alert('Category Update Failed');\n                  console.log('Request Failed:', error);\n                }\n              });\n              _context5.next = 24;\n              return _context5.t0.awrap.call(_context5.t0, _context5.t7);\n\n            case 24:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    } // \n    // Sub Category\n\n  }, {\n    key: \"handleEditSubCategoryClick\",\n    //  => Edit\n    value: function handleEditSubCategoryClick(index) {\n      var copyArray, obj;\n      return _regeneratorRuntime.async(function handleEditSubCategoryClick$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              copyArray = [];\n              copyArray = Object.assign([], this.state.subCategoriesList);\n              obj = {};\n              obj['_id'] = copyArray[index]._id;\n              obj['category_id'] = copyArray[index].category_id;\n              obj['value'] = copyArray[index].value;\n              obj['label'] = false;\n              obj['prevVal'] = copyArray[index].value;\n              obj['error'] = '';\n              copyArray[index] = obj;\n              _context6.next = 12;\n              return _regeneratorRuntime.awrap(this.setState({\n                subCategoriesList: copyArray\n              }));\n\n            case 12:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    } //  => Cancle\n\n  }, {\n    key: \"handleCancelSubCategoryClick\",\n    value: function handleCancelSubCategoryClick(index) {\n      var copyArray = [];\n      copyArray = Object.assign([], this.state.subCategoriesList);\n      copyArray[index].value = copyArray[index].prevVal;\n      copyArray[index].error = '';\n      copyArray[index].label = true;\n      this.setState({\n        subCategoriesList: copyArray\n      });\n    } //  => Update\n\n  }, {\n    key: \"handleUpdateSubCategoryClick\",\n    value: function handleUpdateSubCategoryClick(index) {\n      var copyArray, currentComponent, data, url;\n      return _regeneratorRuntime.async(function handleUpdateSubCategoryClick$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              copyArray = [];\n              copyArray = Object.assign([], this.state.subCategoriesList);\n\n              if (!(copyArray[index].value == copyArray[index].prevVal)) {\n                _context7.next = 7;\n                break;\n              }\n\n              copyArray[index].error = 'Enter Different Value';\n              this.setState({\n                categoryRequestList: copyArray\n              });\n              _context7.next = 23;\n              break;\n\n            case 7:\n              currentComponent = this;\n              data = [];\n              data = {\n                value: copyArray[index].value,\n                label: copyArray[index].value,\n                category_id: copyArray[index].category_id\n              };\n              url = MuhalikConfig.PATH + \"/api/categories/sub-category/\".concat(copyArray[index]._id);\n              _context7.t0 = _regeneratorRuntime;\n              _context7.t1 = axios;\n              _context7.t2 = url;\n              _context7.t3 = {\n                data: data\n              };\n              _context7.next = 17;\n              return _regeneratorRuntime.awrap(getUncodededTokenFromStorage());\n\n            case 17:\n              _context7.t4 = _context7.sent;\n              _context7.t5 = {\n                'authorization': _context7.t4\n              };\n              _context7.t6 = {\n                headers: _context7.t5\n              };\n              _context7.t7 = _context7.t1.put.call(_context7.t1, _context7.t2, _context7.t3, _context7.t6).then(function (response) {\n                copyArray[index].label = copyArray[index].value;\n                copyArray[index].prevVal = copyArray[index].value;\n                currentComponent.setState({\n                  subCategoriesList: copyArray,\n                  showModalMessage: 'Product Sub Category Updated Successfully',\n                  showModal: true\n                });\n                categoryArray = copyArray;\n              })[\"catch\"](function (error) {\n                try {\n                  alert('Error: ', error.response.data.message);\n                } catch (err) {\n                  console.log('Request Failed:', error);\n                }\n              });\n              _context7.next = 23;\n              return _context7.t0.awrap.call(_context7.t0, _context7.t7);\n\n            case 23:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    } //  => Delete\n\n  }, {\n    key: \"handleDeleteSubCategoryClick\",\n    value: function handleDeleteSubCategoryClick() {\n      var copyArray, index, currentComponent, url;\n      return _regeneratorRuntime.async(function handleDeleteSubCategoryClick$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              this.setState({\n                showConfirmDeleteModal: false\n              });\n              copyArray = [];\n              index = this.state.index;\n              currentComponent = this;\n              copyArray = Object.assign([], this.state.subCategoriesList);\n              url = MuhalikConfig.PATH + \"/api/categories/sub-category/\".concat(copyArray[index]._id);\n              _context8.t0 = _regeneratorRuntime;\n              _context8.t1 = axios;\n              _context8.t2 = url;\n              _context8.next = 11;\n              return _regeneratorRuntime.awrap(getUncodededTokenFromStorage());\n\n            case 11:\n              _context8.t3 = _context8.sent;\n              _context8.t4 = {\n                'authorization': _context8.t3\n              };\n              _context8.t5 = {\n                headers: _context8.t4\n              };\n              _context8.t6 = _context8.t1[\"delete\"].call(_context8.t1, _context8.t2, _context8.t5).then(function (response) {\n                copyArray.splice(index, 1);\n                currentComponent.setState({\n                  subCategoriesList: copyArray,\n                  showModalMessage: 'Product Category Deleted',\n                  showModal: true\n                });\n                categoryArray = copyArray;\n              })[\"catch\"](function (error) {\n                try {\n                  alert('Error: ', error.response.data.message);\n                } catch (err) {\n                  console.log('Request Failed:', error);\n                }\n              });\n              _context8.next = 17;\n              return _context8.t0.awrap.call(_context8.t0, _context8.t6);\n\n            case 17:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(React.Fragment, null, __jsx(AlertModal, {\n        onHide: function onHide(e) {\n          return _this2.setState({\n            showModal: false\n          });\n        },\n        show: this.state.showModal,\n        header: 'Success',\n        message: this.state.showModalMessage,\n        iconname: faThumbsUp,\n        color: \"#00b300\"\n      }), __jsx(ConfirmModal, {\n        onHide: function onHide() {\n          return _this2.setState({\n            showConfirmDeleteModal: false\n          });\n        },\n        show: this.state.showConfirmDeleteModal,\n        title: 'Delete Sub Category',\n        _id: this.state.delete_category_id,\n        name: this.state.delete_category_name,\n        confirm: this.handleDeleteSubCategoryClick.bind(this)\n      }), __jsx(TitleRow, {\n        icon: faListAlt,\n        title: ' Admin Dashboard / Product Categories'\n      }), __jsx(CardAccordion, {\n        title: 'Add New Category'\n      }, __jsx(Form.Row, null, __jsx(Form.Group, {\n        as: Col,\n        lg: 6,\n        md: 6,\n        sm: 6,\n        xs: 12\n      }, __jsx(Form.Label, {\n        style: styles.label\n      }, \"Category\"), __jsx(InputGroup, null, __jsx(Form.Control, {\n        type: \"text\",\n        size: \"sm\",\n        placeholder: \"Enter Category Value\",\n        name: \"sku\",\n        value: this.state.categoryValue,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            categoryValue: e.target.value,\n            categoryError: ''\n          });\n        },\n        isInvalid: this.state.categoryError\n      }), __jsx(Form.Control.Feedback, {\n        type: \"invalid\"\n      }, this.state.categoryError))), __jsx(Form.Group, {\n        as: Col,\n        lg: 6,\n        md: 6,\n        sm: 6,\n        xs: 12\n      }, __jsx(Form.Label, {\n        style: styles.label\n      }, \"Sub Category\"), __jsx(InputGroup, null, __jsx(Form.Control, {\n        type: \"text\",\n        size: \"sm\",\n        placeholder: \"Enter Category Value\",\n        name: \"sku\",\n        value: this.state.subCategoryValue,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            subCategoryValue: e.target.value,\n            subCategoryError: ''\n          });\n        },\n        isInvalid: this.state.subCategoryError\n      }), __jsx(Form.Control.Feedback, {\n        type: \"invalid\"\n      }, this.state.subCategoryError))), __jsx(Form.Group, {\n        as: Col\n      }, __jsx(Button, {\n        type: \"submit\",\n        size: \"sm\",\n        onClick: this.handleSubmit.bind(this),\n        disabled: this.state.isLoading,\n        block: true,\n        style: styles.submit_btn\n      }, this.state.isLoading ? 'Uploading' : 'Add Category', this.state.isLoading ? __jsx(Spinner, {\n        animation: \"grow\",\n        size: \"sm\"\n      }) : null)))), __jsx(CardAccordion, {\n        title: 'All Categories'\n      }, __jsx(Form.Row, {\n        style: {\n          margin: '0% 5%'\n        }\n      }, __jsx(Form.Group, {\n        as: Col\n      }, __jsx(InputGroup, null, __jsx(InputGroup.Prepend, null, __jsx(Form.Control, {\n        as: \"select\",\n        variant: \"primary\",\n        size: \"sm\",\n        value: this.state.searchType,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            searchType: e.target.value\n          });\n        }\n      }, __jsx(\"option\", {\n        className: \"jsx-2287855846\"\n      }, \"Category\"), __jsx(\"option\", {\n        className: \"jsx-2287855846\"\n      }, \"Sub Category\"))), __jsx(Form.Control, {\n        type: \"text\",\n        size: \"sm\",\n        placeholder: \"Search Here\",\n        name: \"search\",\n        value: this.state.filterStr,\n        onChange: function onChange(e) {\n          return _this2.handleFilterStrChange(e);\n        }\n      })))), __jsx(\"hr\", {\n        className: \"jsx-2287855846\"\n      }), this.state.categoriesList && this.state.categoriesList.map(function (element, index) {\n        return __jsx(\"div\", {\n          key: index,\n          className: \"jsx-2287855846\"\n        }, __jsx(Form.Row, null, __jsx(Form.Group, {\n          as: Col,\n          lg: 6,\n          md: 6,\n          sm: 8,\n          xs: 12\n        }, __jsx(Form.Control, {\n          type: \"text\",\n          size: \"sm\",\n          name: \"sku\",\n          value: element.value,\n          disabled: element.label,\n          onChange: function onChange(e) {\n            return _this2.handleCategoryChange(e, index);\n          },\n          isInvalid: element.error\n        }), __jsx(Form.Control.Feedback, {\n          type: \"invalid\"\n        }, element.error)), __jsx(\"div\", {\n          className: \"jsx-2287855846\" + \" \" + 'sm_xs_show mr-auto'\n        }), __jsx(Form.Group, {\n          as: Col,\n          lg: \"auto\",\n          md: \"auto\",\n          sm: \"auto\",\n          xs: \"auto\"\n        }, __jsx(Button, {\n          type: \"submit\",\n          variant: element.label ? \"outline-primary\" : \"outline-success\",\n          size: \"sm\",\n          block: true,\n          style: styles.submit_btn,\n          onClick: element.label ? function () {\n            return _this2.handleEditCategoryClick(index);\n          } : function () {\n            return _this2.handleUpdateCategoryClick(index);\n          },\n          disabled: element.label ? false : element.error\n        }, __jsx(\"div\", {\n          className: \"jsx-2287855846\"\n        }, element.label ? 'Edit' : 'Update'))), __jsx(\"div\", {\n          className: \"jsx-2287855846\" + \" \" + 'sm_xs_show mr-auto'\n        }), __jsx(Form.Group, {\n          as: Col,\n          lg: \"auto\",\n          md: \"auto\",\n          sm: \"auto\",\n          xs: \"auto\"\n        }, __jsx(Button, {\n          type: \"submit\",\n          variant: element.label ? \"outline-danger\" : \"outline-primary\",\n          size: \"sm\",\n          block: true,\n          style: styles.submit_btn,\n          onClick: element.label ? null : function () {\n            return _this2.handleCancelCategoryClick(index);\n          },\n          disabled: element.label ? true : false\n        }, __jsx(\"div\", {\n          className: \"jsx-2287855846\"\n        }, element.label ? 'Delete' : 'Cancel')))), __jsx(\"hr\", {\n          className: \"jsx-2287855846\" + \" \" + 'pb-0 pt-0 mt-0'\n        }), __jsx(Form.Row, null, _this2.state.subCategoriesList.map(function (e, i) {\n          return element._id == e.category_id ? __jsx(Col, {\n            lg: 6,\n            md: 6,\n            sm: 12,\n            xs: 12,\n            key: e._id\n          }, __jsx(Form.Row, null, __jsx(Form.Group, {\n            as: Col,\n            lg: \"auto\",\n            md: \"auto\",\n            sm: 8,\n            xs: 12\n          }, __jsx(Form.Control, {\n            type: \"text\",\n            size: \"sm\",\n            name: \"sku\",\n            value: e.value,\n            disabled: e.label,\n            onChange: function onChange(event) {\n              return _this2.handleSubCategoryChange(event, i);\n            },\n            isInvalid: e.error\n          }), __jsx(Form.Control.Feedback, {\n            type: \"invalid\"\n          }, e.error)), __jsx(\"div\", {\n            className: \"jsx-2287855846\" + \" \" + 'mr-auto'\n          }), __jsx(Form.Group, {\n            as: Col,\n            lg: \"auto\",\n            md: \"auto\",\n            sm: \"auto\",\n            xs: \"auto\"\n          }, __jsx(Button, {\n            type: \"submit\",\n            variant: e.label ? \"outline-primary\" : \"outline-success\",\n            size: \"sm\",\n            block: true,\n            style: styles.submit_btn,\n            onClick: e.label ? function () {\n              return _this2.handleEditSubCategoryClick(i);\n            } : function () {\n              return _this2.handleUpdateSubCategoryClick(i);\n            },\n            disabled: e.label ? false : e.error\n          }, __jsx(\"div\", {\n            className: \"jsx-2287855846\"\n          }, e.label ? 'Edit' : 'Update'))), __jsx(\"div\", {\n            className: \"jsx-2287855846\" + \" \" + 'sm_xs_show mr-auto'\n          }), __jsx(Form.Group, {\n            as: Col,\n            lg: \"auto\",\n            md: \"auto\",\n            sm: \"auto\",\n            xs: \"auto\"\n          }, __jsx(Button, {\n            type: \"submit\",\n            variant: e.label ? \"outline-danger\" : \"outline-primary\",\n            size: \"sm\",\n            block: true,\n            style: styles.submit_btn,\n            onClick: e.label ? function () {\n              return _this2.setState({\n                showConfirmDeleteModal: true,\n                delete_category_id: e._id,\n                delete_category_name: e.value,\n                index: index\n              });\n            } : function () {\n              return _this2.handleCancelSubCategoryClick(i);\n            }\n          }, __jsx(\"div\", {\n            className: \"jsx-2287855846\"\n          }, e.label ? 'Delete' : 'Cancel'))))) : null;\n        })), __jsx(\"hr\", {\n          className: \"jsx-2287855846\" + \" \" + 'mb-0'\n        }), __jsx(\"hr\", {\n          className: \"jsx-2287855846\" + \" \" + 'pb-0 pt-0 mt-0'\n        }));\n      })), __jsx(_JSXStyle, {\n        id: \"2287855846\"\n      }, [\"@media only screen and (min-width:768px){.sm_xs_show.jsx-2287855846{display:none;}}\"]));\n    }\n  }]);\n\n  return ProducCategories;\n}(Component);\n\nvar styles = {\n  title_row: {\n    borderBottom: '1px solid gray',\n    padding: '1.5% 4%'\n  },\n  title_fontawesome: {\n    color: 'gray',\n    marginRight: '3%',\n    width: '26px',\n    height: '26px',\n    maxHeight: '26px',\n    maxWidth: '26px'\n  },\n  title: {\n    color: 'gray'\n  },\n  card: {\n    // width: '100%',\n    margin: '2%'\n  },\n  card_body: {// padding: '5%'\n  },\n  label: {\n    fontSize: \"\".concat(GlobalStyleSheet.form_label_fontsize)\n  },\n  error: {\n    width: '100%',\n    textAlign: 'center',\n    color: '#DC3545',\n    fontSize: '14px'\n  },\n  accordin_fontawesome: {\n    color: \"\".concat(GlobalStyleSheet.admin_primry_color),\n    marginRight: '10%',\n    width: '15px',\n    height: '15px',\n    maxHeight: '15px',\n    maxWidth: '15px'\n  }\n};\nexport default ProducCategories;","map":null,"metadata":{},"sourceType":"module"}