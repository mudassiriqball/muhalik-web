{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Row, Form, Col, Card, Button, Spinner, InputGroup } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-regular-svg-icons';\nimport ShowToast from '../../../../toast';\nimport GlobalStyleSheet from '../../../../../../styleSheet';\nimport TitleRow from '../../../../title-row';\n\nvar AddCategory = /*#__PURE__*/function (_Component) {\n  _inherits(AddCategory, _Component);\n\n  var _super = _createSuper(AddCategory);\n\n  function AddCategory(props) {\n    var _this;\n\n    _classCallCheck(this, AddCategory);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCategoryValueChange\", function (e) {\n      _this.setState({\n        categoryValue: e.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", function () {\n      if (_this.state.categoryValue == '') {\n        _this.setState({\n          error: 'Enter Value First'\n        });\n      } else {\n        _this.setState({\n          isLoading: true\n        });\n\n        _this.setState({\n          error: ''\n        });\n\n        _this.addCategory(_assertThisInitialized(_this));\n      }\n    });\n\n    _this.state = {\n      isLoading: false,\n      showToast: false,\n      categoryValue: '',\n      error: ''\n    };\n    return _this;\n  } //  Submit data to api\n\n\n  _createClass(AddCategory, [{\n    key: \"addCategory\",\n    value: function addCategory(currentComponent) {\n      return _regeneratorRuntime.async(function addCategory$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(React.Fragment, null, this.state.showToast ? __jsx(ShowToast, {\n        onCloseHandler: function onCloseHandler(e) {\n          return _this2.setState({\n            showToast: false\n          });\n        },\n        show: this.state.showToast,\n        header: 'Success',\n        message: 'Category Added Successfully',\n        iconName: faThumbsUp,\n        color: \"green\"\n      }) : null, __jsx(TitleRow, {\n        icon: faPlus,\n        title: 'Vendor Dashboard / Add New Category'\n      }), __jsx(Row, {\n        noGutters: true\n      }, __jsx(Card, {\n        style: styles.card\n      }, __jsx(Card.Header, {\n        style: styles.card_header\n      }, \"Product Category\"), __jsx(Card.Body, {\n        style: styles.card_body\n      }, __jsx(Form.Group, null, __jsx(InputGroup, null, __jsx(Form.Control, {\n        type: \"text\",\n        size: \"sm\",\n        placeholder: \"Enter Category Value\",\n        name: \"sku\",\n        value: this.state.categoryValue,\n        onChange: this.handleCategoryValueChange,\n        isInvalid: this.state.error\n      }), __jsx(Form.Control.Feedback, {\n        type: \"invalid\"\n      }, this.state.error))), __jsx(Form.Group, null, __jsx(Button, {\n        type: \"submit\",\n        size: \"sm\",\n        onClick: this.handleSubmit.bind(this),\n        disabled: this.state.isLoading,\n        block: true,\n        style: styles.submit_btn\n      }, this.state.isLoading ? 'Uploading' : 'Add Category', this.state.isLoading ? __jsx(Spinner, {\n        animation: \"grow\",\n        size: \"sm\"\n      }) : __jsx(\"div\", null)))))));\n    }\n  }]);\n\n  return AddCategory;\n}(Component);\n\nvar styles = {\n  title_row: {\n    borderBottom: '1px solid gray',\n    padding: '1.5% 4%'\n  },\n  title_fontawesome: {\n    color: 'gray',\n    marginRight: '3%',\n    width: '26px',\n    height: '26px',\n    maxHeight: '26px',\n    maxWidth: '26px'\n  },\n  title: {\n    color: 'gray'\n  },\n  card: {\n    width: '100%',\n    margin: '5%'\n  },\n  card_header: {\n    fontSize: \"\".concat(GlobalStyleSheet.card_header_fontsize),\n    background: \"\".concat(GlobalStyleSheet.card_header_background)\n  },\n  card_body: {\n    padding: '5%'\n  },\n  error: {\n    width: '100%',\n    textAlign: 'center',\n    color: '#DC3545',\n    fontSize: '14px'\n  }\n};\nexport default AddCategory;","map":null,"metadata":{},"sourceType":"module"}