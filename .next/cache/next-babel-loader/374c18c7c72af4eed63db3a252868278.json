{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Form, Col, Row, Card, InputGroup, Button, Toast, Tab, Nav, Tabs, Spinner } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faKey, faSlidersH, faStoreAlt, faTruck, faTools, faDollarSign, faListAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-regular-svg-icons';\nimport Select from 'react-select';\nimport CreatableSelect from 'react-select/creatable';\nimport ReactSelectMaterialUi from \"react-select-material-ui\";\nimport ShowToast from '../../../../toast';\nimport GlobalStyleSheet from '../../../../../../styleSheet';\nimport MuhalikConfig from '../../../../../../sdk/muhalik.config';\nimport { getUncodededTokenFromStorage } from '../../../../../../sdk/core/authentication-service';\nimport CustomFields from './add-new-contents/custom-fields';\nimport ProductData from './add-new-contents/product-data';\nimport product_size_options from '../../../../../../sdk/consts/product-size-options';\nimport product_color_options from '../../../../../../sdk/consts/product-color-options';\nconst product_attributes_list = [{\n  value: 'Size',\n  label: 'Size'\n}, {\n  value: 'Color',\n  label: 'Color'\n}, {\n  value: 'Price',\n  label: 'Price'\n}]; // Option List for select Product Category (when offline)\n\nconst product_categories = [{\n  value: 'Shoe',\n  label: 'Shoe'\n}, {\n  value: 'Cloth',\n  label: 'Cloth'\n}, {\n  value: 'Shirt',\n  label: 'Shirt'\n}, {\n  value: 'Pant',\n  label: 'Pant'\n}]; // For React-Select\n\nconst components = {\n  DropdownIndicator: null\n}; // Model For React-Select\n\nconst createOption = label => ({\n  value: label,\n  label\n}); // Yup Schema for validation fields\n\n\nconst schema = yup.object({\n  product_name: yup.string().required(\"Enter Product Name\").min(2, \"Must have at least 2 characters\").max(40, \"Can't be longer than 40 characters\"),\n  product_category: yup.string(),\n  product_type: yup.string(),\n  product_weight: yup.number().integer(\"Enter Only Numbers\").min(0, \"Must grater than 0 digit\").max(100, \"Can't be longer than 100\"),\n  dimension_length: yup.number().integer(\"Enter Only Numbers\").min(0, \"Must grater than 0 digit\").max(100, \"Can't be longer than 100\"),\n  dimension_width: yup.number().integer(\"Enter Only Numbers\").min(0, \"Must grater than 0 digit\").max(100, \"Can't be longer than 100\"),\n  dimension_height: yup.number().integer(\"Enter Only Numbers\").min(0, \"Must grater than 0 digit\").max(100, \"Can't be longer than 100\"),\n  handling_fee: yup.number().integer(\"Enter Only Numbers\").min(0, \"Must grater than 0 digit\").max(100, \"Can't be longer than 100\"),\n  product_description: yup.string().min(5, \"Must have at least 5 characters\").max(200, \"Can't be longer than 200 characters\"),\n  not_specified: yup.string(),\n  Plastic: yup.string(),\n  Ceramic: yup.string(),\n  Metal: yup.string(),\n  Glass: yup.string(),\n  Plastic: yup.string(),\n  product_brand_name: yup.string().min(2, \"Must have at least 2 characters\").max(40, \"Can't be longer than 40 characters\"),\n  product_price: yup.number().integer(\"Enter Only Numbers\").positive('Enter Between 1-1000000').max(1000000, 'Enter Between 1-1000000'),\n  product_size: yup.string(),\n  product_colors: yup.string(),\n  product_tags: yup.string(),\n  purchase_note: yup.string(),\n  product_in_stock: yup.number().integer(\"Enter Only Numbers\").min(1, \"Must grater than 1 digit\").max(1000000, \"Can't be longer than 1000000\"),\n  product_warranty: yup.number().integer(\"Enter Only Numbers\").min(0, 'Enter Between 0-200').max(200, 'Enter Between 0-200'),\n  warranty_type: yup.string(),\n  product_discount: yup.number().integer(\"Enter Only Numbers\").min(0, 'Enter Between 0-100').max(100, 'Enter Between 0-100'),\n  sku: yup.string().min(0, 'Enter Between 0-100').max(100, 'Enter Between 0-100'),\n  shipping_charges: yup.number().integer(\"Enter Only Numbers\").min(0, 'Enter Between 0-100').max(100, 'Enter Between 0-100'),\n  product_image_link: yup.string(),\n  product_attributes: yup.string(),\n  product_variations: yup.string(),\n  custom_fields: yup.string()\n});\n\nclass AddNew extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleProductSizeChange\", (arr, actionMeta) => {\n      this.setState({\n        size: arr\n      });\n    });\n\n    _defineProperty(this, \"handleProductColorChange\", (arr, actionMeta) => {\n      this.setState({\n        color: arr\n      }); // this.setState({ color: newValue, colorError: 'no_error', colorErrorDiv: 'BorderDiv' });\n    });\n\n    _defineProperty(this, \"handleProductTagChange\", arr => {\n      this.setState({\n        productTags: arr\n      });\n    });\n\n    _defineProperty(this, \"handleProductCategoryChange\", arr => {\n      this.setState({\n        productCategories: arr,\n        categoryError: 'no_error',\n        categoryErrorDiv: 'BorderDiv'\n      });\n    });\n\n    _defineProperty(this, \"handleImage_linkChange\", (arr, actionMeta) => {\n      this.setState({\n        image_link: arr,\n        image_linkError: 'no_error',\n        image_linkErrorDiv: 'BorderDiv'\n      });\n    });\n\n    _defineProperty(this, \"handleImageLinkInputChange\", aa => {\n      this.setState({\n        inputValue: aa\n      });\n    });\n\n    _defineProperty(this, \"handleImage_linkKeyDown\", event => {\n      const inputValue = this.state.inputValue;\n      const image_link = this.state.image_link;\n      if (!inputValue) return;\n\n      switch (event.key) {\n        case 'Enter':\n        case 'Tab':\n          this.setState({\n            inputValue: '',\n            image_link: [...image_link, createOption(inputValue)]\n          });\n          event.preventDefault();\n      }\n    });\n\n    _defineProperty(this, \"handleProductAttributeNameChange\", e => {\n      this.setState({\n        productAttributeName: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleProductAttributeValueChange\", e => {\n      this.setState({\n        productAttributeValue: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleAddProductAttributeClicked\", () => {\n      if (this.state.productAttributeName != '' && this.state.productAttributeValue != '') {\n        this.setState({\n          productAttributeError: ''\n        });\n        const copyArray = Object.assign([], this.state.productAttributesArray);\n        copyArray.push({\n          productAttributeName: this.state.productAttributeName,\n          productAttributeValue: this.state.productAttributeValue\n        });\n        this.setState({\n          productAttributeName: ''\n        });\n        this.setState({\n          productAttributeValue: ''\n        });\n        this.setState({\n          productAttributesArray: copyArray\n        });\n      } else {\n        this.setState({\n          productAttributeError: 'Enter Field Name and Value'\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleSaveProductAttributesClicked\", () => {\n      var allArrays = [];\n      this.state.productAttributesArray.forEach(element => {\n        var trim = element.productAttributeValue.split(' ').join('');\n        var splitArray = trim.split('|');\n        allArrays.push(splitArray);\n      });\n      const array = this.allPossibleCases(allArrays);\n      var data = [];\n      array.forEach(element => {\n        const split = element.split('-');\n        let item = [];\n        split.forEach((e, i) => {\n          item.push({\n            name: this.state.productAttributesArray[i].productAttributeName,\n            value: e\n          });\n        });\n        data.push({\n          items: item,\n          price: '0',\n          stock: '1',\n          image_link: ''\n        });\n      }); // console.log(\"split Array: \", data)\n\n      this.setState({\n        variationsArray: data\n      });\n    });\n\n    _defineProperty(this, \"handleUpdateProductAttributeClicked\", (index, name, value) => {\n      const copyArray = Object.assign([], this.state.productAttributesArray);\n      copyArray[index] = {\n        productAttributeName: name,\n        productAttributeValue: value\n      };\n      this.setState({\n        productAttributesArray: copyArray\n      });\n    });\n\n    _defineProperty(this, \"handleDeleteProductAttributeClicked\", index => {\n      const copyArray = Object.assign([], this.state.productAttributesArray);\n      copyArray.splice(index, 1);\n      this.setState({\n        productAttributesArray: copyArray\n      });\n    });\n\n    _defineProperty(this, \"handleDeleteProductVariationClicked\", index => {\n      const copyArray = Object.assign([], this.state.variationsArray);\n      copyArray.splice(index, 1);\n      this.setState({\n        variationsArray: copyArray\n      });\n    });\n\n    _defineProperty(this, \"handlePriceCheckboxChanged\", e => {\n      if (e.target.checked) {\n        const copyArray = Object.assign([], this.state.variationsArray);\n        copyArray.forEach(element => {\n          element.price = copyArray[0].items.price;\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleProductPriceChanged\", (e, index) => {\n      const copyArray = Object.assign([], this.state.variationsArray);\n      let object = copyArray[index];\n      object.price = e.target.value;\n      copyArray[index] = object;\n      this.setState({\n        variationsArray: copyArray\n      });\n    });\n\n    _defineProperty(this, \"handleProductInStockChanged\", (e, index) => {\n      const copyArray = Object.assign([], this.state.variationsArray);\n      let object = copyArray[index];\n      object.stock = e.target.value;\n      copyArray[index] = object;\n      this.setState({\n        variationsArray: copyArray\n      });\n    });\n\n    _defineProperty(this, \"handleProductImageLinkChanged\", (e, index) => {\n      const copyArray = Object.assign([], this.state.variationsArray);\n      let object = copyArray[index];\n      object.image_link = e.target.value;\n      copyArray[index] = object;\n      this.setState({\n        variationsArray: copyArray\n      });\n    });\n\n    _defineProperty(this, \"customFieldNameChangeHandler\", e => {\n      this.setState({\n        customFieldName: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"customFieldValueChangeHandler\", e => {\n      this.setState({\n        customFieldValue: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"addCustomFieldBtnClicked\", () => {\n      if (this.state.customFieldName != '' && this.state.customFieldValue != '') {\n        this.setState({\n          customFieldError: ''\n        });\n        const copyArray = Object.assign([], this.state.customFieldsArray);\n        copyArray.push({\n          customFieldName: this.state.customFieldName,\n          customFieldValue: this.state.customFieldValue\n        });\n        this.setState({\n          customFieldName: ''\n        });\n        this.setState({\n          customFieldValue: ''\n        });\n        this.setState({\n          customFieldsArray: copyArray\n        });\n      } else {\n        this.setState({\n          customFieldError: 'Enter Field Name and Value'\n        });\n      }\n    });\n\n    _defineProperty(this, \"updateCustomFieldsEvent\", (index, name, value) => {\n      const copyArray = Object.assign([], this.state.customFieldsArray);\n      copyArray[index] = {\n        customFieldName: name,\n        customFieldValue: value\n      };\n      this.setState({\n        customFieldsArray: copyArray\n      });\n    });\n\n    _defineProperty(this, \"deleteCustomFieldsEvent\", index => {\n      const copyArray = Object.assign([], this.state.customFieldsArray);\n      copyArray.splice(index, 1);\n      this.setState({\n        customFieldsArray: copyArray\n      });\n    });\n\n    this.state = {\n      isLoading: false,\n      showToast: false,\n      product_categories_options: product_categories,\n      productCategories: '',\n      categoryError: 'no_error',\n      categoryErrorDiv: 'BorderDiv',\n      size: [],\n      color: [],\n      productTags: [],\n      warrantyType: 'Year',\n      inputValue: '',\n      image_link: [],\n      image_linkError: 'no_error',\n      image_linkErrorDiv: 'BorderDiv',\n      isVariableProduct: false,\n      // Product Attributes\n      productAttributesArray: [],\n      productAttributeName: '',\n      productAttributeValue: '',\n      productAttributeError: '',\n      productType: 'simple-product',\n      variationsArray: [],\n      // Custom Fields\n      customFieldsArray: [],\n      customFieldName: '',\n      customFieldValue: '',\n      customFieldError: ''\n    };\n    this.handleProductTypeChange = this.handleProductTypeChange.bind(this);\n    this.addCustomFieldBtnClicked = this.addCustomFieldBtnClicked.bind(this); // this.uploadProduct = this.uploadProduct.bind(this);\n  } // Getting Product Categories from DB\n\n\n  async componentDidMount() {\n    const url = MuhalikConfig.PATH + '/api/products-categories/get-all';\n\n    try {\n      const response = await axios.get(url);\n      this.setState({\n        product_categories_options: response.data.data\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  } //  Submit data to api\n\n\n  async uploadProduct(data, currentComponent) {\n    console.log('data: ', data); // const url = MuhalikConfig.PATH + '/api/products/add';\n    // await axios.post(url, {\n    //     data\n    // }, {\n    //     headers: { 'authorization': await getUncodededTokenFromStorage() }\n    // }).then(function (response) {\n\n    currentComponent.setState({\n      isLoading: false\n    });\n    currentComponent.setState({\n      showToast: true\n    }); //     return true;\n    // }).catch(function (error) {\n    //     currentComponent.setState({ isLoading: false });\n    //     alert('Error: ', error.response.data.message);\n    //     return false;\n    // });\n  } // Product Size\n\n\n  handleProductTypeChange(e) {\n    if (e.target.value == 'variable-prouct') {\n      this.setState({\n        isVariableProduct: true\n      });\n      this.setState({\n        productType: 'variable-prouct'\n      });\n    } else {\n      this.setState({\n        isVariableProduct: false\n      });\n      this.setState({\n        productType: 'simple-product'\n      });\n    }\n  } // Product Attributes\n\n\n  allPossibleCases(arr) {\n    if (arr.length == 1) {\n      return arr[0];\n    } else {\n      var result = [];\n      var allCasesOfRest = this.allPossibleCases(arr.slice(1)); // recur with the rest of array\n\n      for (var i = 0; i < allCasesOfRest.length; i++) {\n        for (var j = 0; j < arr[0].length; j++) {\n          result.push(arr[0][j] + \"-\" + allCasesOfRest[i]);\n        }\n      }\n\n      return result;\n    }\n  }\n\n  render() {\n    return __jsx(Formik, {\n      validationSchema: schema,\n      initialValues: {\n        product_name: '',\n        product_category: '',\n        product_type: '',\n        product_weight: 0,\n        dimension_length: '',\n        dimension_width: '',\n        dimension_height: '',\n        handling_fee: '',\n        product_description: '',\n        not_specified: '',\n        Plastic: '',\n        Ceramic: '',\n        Metal: '',\n        Glass: '',\n        Plastic: '',\n        product_brand_name: '',\n        product_price: '',\n        product_size: '',\n        product_colors: '',\n        product_tags: '',\n        purchase_note: '',\n        product_in_stock: 1,\n        product_warranty: 0,\n        warranty_type: '',\n        product_discount: 0,\n        sku: '',\n        shipping_charges: 40,\n        product_image_link: '',\n        product_attributes: '',\n        product_variations: '',\n        custom_fields: ''\n      },\n      onSubmit: (values, {\n        setSubmitting,\n        resetForm\n      }) => {\n        if (this.state.productCategories == '') {\n          // if (this.state.customFieldNameArray == '') {\n          //     this.setState({ categoryError: \"error\", categoryErrorDiv: 'RedBorderDiv' });\n          // }\n          if (this.state.productCategories == '') {\n            this.setState({\n              categoryError: \"error\",\n              categoryErrorDiv: 'RedBorderDiv'\n            });\n          } // if (this.state.image_link == '') {\n          //     this.setState({ image_linkError: \"error\", image_linkErrorDiv: 'RedBorderDiv' });\n          // }\n\n\n          setSubmitting(false);\n        } else {\n          resetForm();\n          setSubmitting(true);\n          this.setState({\n            isLoading: true\n          });\n          setTimeout(() => {\n            values.product_category = this.state.productCategories;\n            values.product_size = this.state.size;\n            values.product_colors = this.state.color;\n            values.product_tags = this.state.productTags;\n            values.product_image_link = this.state.image_link;\n            values.product_variations = this.state.variationsArray;\n            values.custom_fields = this.state.customFieldsArray;\n            console.log('values: ', values);\n            this.uploadProduct(values, this); // if (this.uploadData(values)) {\n            //     this.setState({ size: [], color: [], customFieldNameArray: [], image_link: [], inputValue: '' });\n            //     resetForm();\n            // }\n\n            setSubmitting(false);\n          }, 500);\n        }\n      }\n    }, ({\n      handleSubmit,\n      handleChange,\n      values,\n      touched,\n      isValid,\n      errors,\n      handleBlur,\n      isSubmitting\n    }) => __jsx(\"div\", {\n      className: _JSXStyle.dynamic([[\"3833814464\", [GlobalStyleSheet.admin_primry_color]]])\n    }, __jsx(Row, {\n      style: styles.title_row,\n      noGutters: true\n    }, __jsx(FontAwesomeIcon, {\n      icon: faPlus,\n      style: styles.title_fontawesome\n    }), __jsx(\"div\", {\n      style: styles.title,\n      className: _JSXStyle.dynamic([[\"3833814464\", [GlobalStyleSheet.admin_primry_color]]]) + \" \" + \"mr-auto\"\n    }, \" Add New \")), __jsx(Form, {\n      noValidate: true,\n      onSubmit: handleSubmit\n    }, this.state.showToast ? __jsx(ShowToast, {\n      onCloseHandler: e => this.setState({\n        showToast: false\n      }),\n      show: this.state.showToast,\n      message: 'Product Uploaded Successfully',\n      icon: faThumbsUp\n    }) : null, __jsx(Row, {\n      noGutters: true,\n      style: {\n        paddingTop: '2%'\n      }\n    }, __jsx(Col, {\n      lg: 9,\n      md: 9,\n      sm: 12,\n      xs: 12\n    }, __jsx(Form.Group, {\n      as: Row,\n      style: styles.left_culmn_row\n    }, __jsx(Form.Label, {\n      style: styles.label\n    }, \"Product Name\", __jsx(\"span\", {\n      className: _JSXStyle.dynamic([[\"3833814464\", [GlobalStyleSheet.admin_primry_color]]])\n    }, \"*\")), __jsx(InputGroup, null, __jsx(Form.Control, {\n      type: \"text\",\n      placeholder: \"Enter Product Name\",\n      name: \"product_name\",\n      value: values.product_name,\n      onChange: handleChange,\n      isInvalid: touched.product_name && errors.product_name\n    }), __jsx(Form.Control.Feedback, {\n      type: \"invalid\"\n    }, errors.product_name))), __jsx(Form.Group, {\n      as: Row,\n      style: styles.left_culmn_row\n    }, __jsx(Card, {\n      style: styles.card\n    }, __jsx(Card.Header, {\n      style: styles.card_header\n    }, \"Product Discruption\"), __jsx(Card.Body, null, __jsx(Form.Group, null, __jsx(Form.Control, {\n      as: \"textarea\",\n      rows: \"7\",\n      placeholder: \"Enter description about season, style, material etc\",\n      value: values.product_description,\n      onChange: handleChange\n    }))))), __jsx(Row, {\n      style: styles.left_culmn_row\n    }, __jsx(ProductData, {\n      productType: this.state.productType,\n      productTypeHandler: this.handleProductTypeChange,\n      isVariableProduct: this.state.isVariableProduct,\n      values: values,\n      onChange: handleChange,\n      touched: touched,\n      errors: errors,\n      color: this.state.color,\n      productColorChangeHandler: this.handleProductColorChange,\n      size: this.state.size,\n      productSizeChangeHandler: this.handleProductSizeChange,\n      attributesArray: this.state.productAttributesArray,\n      name: this.state.productAttributeName,\n      value: this.state.productAttributeValue,\n      attributeNameHandler: this.handleProductAttributeNameChange.bind(this),\n      attributeValueHandler: this.handleProductAttributeValueChange.bind(this),\n      addAttributeHandler: this.handleAddProductAttributeClicked.bind(this),\n      update: this.handleUpdateProductAttributeClicked.bind(this),\n      deleteAttributeHandler: this.handleDeleteProductAttributeClicked.bind(this),\n      deleteVariationHandler: this.handleDeleteProductVariationClicked.bind(this),\n      error: this.state.productAttributeError,\n      saveAttributesHandler: this.handleSaveProductAttributesClicked,\n      variationsArray: this.state.variationsArray,\n      productPriceHandler: this.handleProductPriceChanged.bind(this),\n      productStockHandler: this.handleProductInStockChanged.bind(this),\n      productImageLinkHandler: this.handleProductImageLinkChanged.bind(this),\n      priceCheckboxHandler: this.handlePriceCheckboxChanged.bind(this)\n    })), __jsx(Form.Group, {\n      as: Row,\n      style: styles.left_culmn_row\n    }, __jsx(CustomFields, {\n      customFieldsArray: this.state.customFieldsArray,\n      name: this.state.customFieldName,\n      value: this.state.customFieldValue,\n      fieldNameHandler: this.customFieldNameChangeHandler.bind(this),\n      fieldValueHandler: this.customFieldValueChangeHandler.bind(this),\n      addFieldHandler: this.addCustomFieldBtnClicked.bind(this),\n      update: this.updateCustomFieldsEvent.bind(this),\n      delete: this.deleteCustomFieldsEvent.bind(this),\n      error: this.state.customFieldError\n    }))), __jsx(Col, {\n      lg: 3,\n      md: 3,\n      sm: 12,\n      xs: 12\n    }, __jsx(Form.Group, {\n      as: Row,\n      style: styles.right_culmn_row\n    }, __jsx(Card, {\n      style: styles.card\n    }, __jsx(Card.Header, {\n      style: styles.card_header\n    }, \"Product Categories\"), __jsx(Card.Body, {\n      style: {\n        height: '250px'\n      }\n    }, __jsx(\"div\", {\n      className: _JSXStyle.dynamic([[\"3833814464\", [GlobalStyleSheet.admin_primry_color]]]) + \" \" + (this.state.categoryErrorDiv || \"\")\n    }, __jsx(CreatableSelect, {\n      isMulti: true,\n      onChange: this.handleProductCategoryChange,\n      options: this.state.product_categories_options,\n      value: this.state.productCategories,\n      placeholder: \"Select/Enter Category\"\n    })), __jsx(\"label\", {\n      className: _JSXStyle.dynamic([[\"3833814464\", [GlobalStyleSheet.admin_primry_color]]]) + \" \" + (this.state.categoryError || \"\")\n    }, \"Selet Category\")))), __jsx(Form.Group, {\n      as: Row,\n      style: styles.right_culmn_row\n    }, __jsx(Card, {\n      style: styles.card\n    }, __jsx(Card.Header, {\n      style: styles.card_header\n    }, \"Dangerous Goods\"), __jsx(Card.Body, null, __jsx(Form.Check, {\n      name: \"not_specified\",\n      label: \"Not Specified\",\n      style: styles.label,\n      onChange: handleChange,\n      isInvalid: touched.not_specified && errors.not_specified,\n      feedback: errors.not_specified,\n      id: \"not_specified\"\n    }), __jsx(\"br\", {\n      className: _JSXStyle.dynamic([[\"3833814464\", [GlobalStyleSheet.admin_primry_color]]])\n    }), __jsx(Form.Check, {\n      name: \"Ceramic\",\n      label: \"Ceramic\",\n      style: styles.label,\n      onChange: handleChange,\n      isInvalid: touched.Ceramic && errors.Ceramic,\n      feedback: errors.Ceramic,\n      id: \"Ceramic\"\n    }), __jsx(\"br\", {\n      className: _JSXStyle.dynamic([[\"3833814464\", [GlobalStyleSheet.admin_primry_color]]])\n    }), __jsx(Form.Check, {\n      name: \"Glass\",\n      label: \"Glass\",\n      style: styles.label,\n      onChange: handleChange,\n      isInvalid: touched.Glass && errors.Glass,\n      feedback: errors.Glass,\n      id: \"Glass\"\n    }), __jsx(\"br\", {\n      className: _JSXStyle.dynamic([[\"3833814464\", [GlobalStyleSheet.admin_primry_color]]])\n    }), __jsx(Form.Check, {\n      name: \"Metal\",\n      label: \"Metal\",\n      style: styles.label,\n      onChange: handleChange,\n      isInvalid: touched.Metal && errors.Metal,\n      feedback: errors.Metal,\n      id: \"Metal\"\n    }), __jsx(\"br\", {\n      className: _JSXStyle.dynamic([[\"3833814464\", [GlobalStyleSheet.admin_primry_color]]])\n    }), __jsx(Form.Check, {\n      name: \"Plastic\",\n      label: \"Plastic\",\n      style: styles.label,\n      onChange: handleChange,\n      isInvalid: touched.Plastic && errors.Plastic,\n      feedback: errors.Plastic,\n      id: \"Plastic\"\n    })))), __jsx(Form.Group, {\n      as: Row,\n      style: styles.right_culmn_row\n    }, __jsx(Card, {\n      style: styles.card\n    }, __jsx(Card.Header, {\n      style: styles.card_header\n    }, \"Product Tags\"), __jsx(Card.Body, {\n      style: {\n        height: '250px'\n      }\n    }, __jsx(CreatableSelect, {\n      isMulti: true,\n      onChange: this.handleProductTagChange,\n      options: product_color_options,\n      value: this.state.productTags,\n      placeholder: \"Select/Enter Tags\"\n    })))))), __jsx(Form.Row, {\n      style: styles.left_culmn_row\n    }, __jsx(Form.Group, {\n      as: Col\n    }, __jsx(\"p\", {\n      style: styles.label,\n      className: _JSXStyle.dynamic([[\"3833814464\", [GlobalStyleSheet.admin_primry_color]]])\n    }, \"Fields with \", __jsx(\"span\", {\n      className: _JSXStyle.dynamic([[\"3833814464\", [GlobalStyleSheet.admin_primry_color]]])\n    }, \" * \"), \" are mandatory.\"), __jsx(\"p\", {\n      style: styles.label,\n      className: _JSXStyle.dynamic([[\"3833814464\", [GlobalStyleSheet.admin_primry_color]]])\n    }, \"For adding new size, color, link: Enter text and hit Enter or Tab key\"), __jsx(Button, {\n      type: \"submit\",\n      onSubmit: handleSubmit,\n      disabled: this.state.isLoading,\n      block: true,\n      style: styles.submit_btn\n    }, this.state.isLoading ? 'Uploading' : 'Upload', this.state.isLoading ? __jsx(Spinner, {\n      animation: \"grow\",\n      size: \"sm\"\n    }) : __jsx(\"div\", {\n      className: _JSXStyle.dynamic([[\"3833814464\", [GlobalStyleSheet.admin_primry_color]]])\n    }))))), __jsx(_JSXStyle, {\n      id: \"3833814464\",\n      dynamic: [GlobalStyleSheet.admin_primry_color]\n    }, [\".no_error.__jsx-style-dynamic-selector{display:none;}\", \".error.__jsx-style-dynamic-selector{margin-top:4px;color:#DC3545;font-size:14px;display:block;}\", \".RedBorderDiv.__jsx-style-dynamic-selector{border:0.5px solid #DC3545;padding:0.5px 0px 0.2px 0.5px;width:100%;}\", \".BorderDiv.__jsx-style-dynamic-selector{border:none;width:100%;}\", \"span.__jsx-style-dynamic-selector{color:red;}\", `.nav_link.__jsx-style-dynamic-selector{background:${GlobalStyleSheet.admin_primry_color};border-top:0.5px solid #434556;border-bottom:0.5px solid #434556;margin:1.5px 0px;border-radius:4px;}`, \"p.__jsx-style-dynamic-selector{text-align:center;margin:0px;}\"])));\n  }\n\n}\n\nconst styles = {\n  title_row: {\n    borderBottom: '1px solid gray',\n    padding: '1.5% 4%'\n  },\n  title_fontawesome: {\n    color: 'gray',\n    marginRight: '3%',\n    width: '26px',\n    height: '26px',\n    maxHeight: '26px',\n    maxWidth: '26px'\n  },\n  title: {\n    color: 'gray'\n  },\n  nav_link: {\n    color: 'white',\n    fontSize: '13px',\n    display: 'flex',\n    alignItems: 'center',\n    height: '45px'\n  },\n  left_culmn_row: {\n    margin: '0% 0% 3% 1.5%',\n    padding: '0%'\n  },\n  right_culmn_row: {\n    margin: '0% 2% 2% 5%',\n    padding: '0%'\n  },\n  card: {\n    width: '100%'\n  },\n  card_header: {\n    alignItems: 'center',\n    // color: '#6A7074',\n    fontSize: '14px',\n    background: 'lightgray'\n  },\n  buttons: {\n    background: `${GlobalStyleSheet.primry_color}`,\n    border: 'none',\n    fontSize: '10px'\n  },\n  submit_btn: {\n    background: `${GlobalStyleSheet.primry_color}`,\n    marginTop: '1%'\n  },\n  label: {\n    fontSize: `${GlobalStyleSheet.form_label_fontsize}`\n  },\n  term_condition_label: {\n    width: '100%',\n    fontSize: `${GlobalStyleSheet.form_label_fontsize}`,\n    paddingTop: '-10px',\n    marginTop: '-10px'\n  },\n  fontawesome: {\n    color: `${GlobalStyleSheet.primary_text_color}`,\n    width: '15px',\n    height: '15px',\n    maxHeight: '15px',\n    maxWidth: '15px'\n  },\n  product_fontawesome: {\n    color: `${GlobalStyleSheet.primary_text_color}`,\n    marginRight: '10%',\n    width: '17px',\n    height: '17px',\n    maxHeight: '17px',\n    maxWidth: '17px'\n  }\n};\nexport default AddNew;","map":null,"metadata":{},"sourceType":"module"}