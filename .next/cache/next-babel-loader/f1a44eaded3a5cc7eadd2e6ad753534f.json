{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Form, Row, Accordion, Col, Card, InputGroup, Button, Spinner } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faListAlt, faSlidersH } from '@fortawesome/free-solid-svg-icons';\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-regular-svg-icons';\nimport React, { Component } from 'react';\nimport MuhalikConfig from '../../../../../../sdk/muhalik.config';\nimport GlobalStyleSheet from '../../../../.././../styleSheet';\nimport axios from 'axios';\nimport AlertModal from '../../../../alert-modal';\nimport TitleRow from '../../../../title-row';\nimport CardAccordion from '../../../../card_accordion';\nimport { getUncodededTokenFromStorage } from '../../../../../../sdk/core/authentication-service';\nvar categoryArray = [];\n\nvar ProducCategories = /*#__PURE__*/function (_Component) {\n  _inherits(ProducCategories, _Component);\n\n  var _super = _createSuper(ProducCategories);\n\n  function ProducCategories(props) {\n    var _this;\n\n    _classCallCheck(this, ProducCategories);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCategoryChange\", function (e, index) {\n      var copyArray = [];\n      copyArray = Object.assign([], _this.state.categoryList);\n      copyArray[index].value = e.target.value;\n\n      if (e.target.value != '' && e.target.value.length <= 20 && e.target.value.length >= 3) {\n        copyArray[index].error = '';\n      } else {\n        copyArray[index].error = 'Value must be 3-20 characters';\n      }\n\n      _this.setState({\n        categoryList: copyArray\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDeleteCategoryClick\", function (index) {\n      var copyArray = [];\n      copyArray = Object.assign([], _this.state.categoryList);\n      categoryArray.forEach(function (element, i) {\n        if (copyArray[index].value == element.value) {\n          categoryArray.splice(index, 1);\n        }\n      });\n      copyArray.splice(index, 1);\n\n      _this.setState({\n        categoryList: copyArray,\n        showModalMessage: 'Product Category Deleted',\n        showModal: true\n      });\n    });\n\n    _this.state = {\n      isLoading: false,\n      showToast: false,\n      categoryValue: '',\n      subCategoryValue: '',\n      categoryError: '',\n      subCategoryError: '',\n      categoryList: [],\n      categoryRequestList: [],\n      editRequestedCategory: '',\n      showModalMessage: '',\n      showModal: false,\n      filterStr: ''\n    };\n    return _this;\n  } // Getting Product Categories from DB\n\n\n  _createClass(ProducCategories, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"addCategory\",\n    value: function addCategory(currentComponent) {\n      var data, url;\n      return _regeneratorRuntime.async(function addCategory$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              data = [];\n              data = {\n                category: {\n                  value: this.state.categoryValue,\n                  label: this.state.categoryValue\n                },\n                sub_category: {\n                  value: this.state.subCategoryValue,\n                  label: this.state.subCategoryValue\n                }\n              };\n              url = MuhalikConfig.PATH + '/api/categories/category';\n              _context2.t0 = _regeneratorRuntime;\n              _context2.t1 = axios;\n              _context2.t2 = url;\n              _context2.t3 = {\n                data: data\n              };\n              _context2.next = 9;\n              return _regeneratorRuntime.awrap(getUncodededTokenFromStorage());\n\n            case 9:\n              _context2.t4 = _context2.sent;\n              _context2.t5 = {\n                'authorization': _context2.t4\n              };\n              _context2.t6 = {\n                headers: _context2.t5\n              };\n              _context2.t7 = _context2.t1.post.call(_context2.t1, _context2.t2, _context2.t3, _context2.t6).then(function (response) {\n                currentComponent.setState({\n                  isLoading: false\n                });\n                currentComponent.setState({\n                  showModalMessage: 'Product Category Added Successfully'\n                });\n                currentComponent.setState({\n                  showModal: true\n                });\n                return true;\n              })[\"catch\"](function (error) {\n                currentComponent.setState({\n                  isLoading: false\n                });\n\n                try {\n                  alert('Error: ', error.response.data.message);\n                } catch (err) {\n                  console.log('Request Failed:', error);\n                }\n\n                return false;\n              });\n              _context2.next = 15;\n              return _context2.t0.awrap.call(_context2.t0, _context2.t7);\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"handleFilterStrChange\",\n    value: function handleFilterStrChange(e) {\n      this.setState({\n        filterStr: e.target.value\n      });\n\n      if (e.target.value == '') {\n        this.setState({\n          categoryList: categoryArray\n        });\n      } else {\n        var array = [];\n        this.state.categoryList.filter(function (data) {\n          // var value = data.value.toLowerCase;\n          if (data.value.includes(e.target.value)) {\n            array.push(data);\n          }\n        });\n        this.setState({\n          categoryList: array\n        });\n      }\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      return _regeneratorRuntime.async(function handleSubmit$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (this.state.categoryValue == '' || this.state.subCategoryValue == '') {\n                if (this.state.categoryValue == '') {\n                  this.setState({\n                    categoryError: 'Enter Value First'\n                  });\n                }\n\n                if (this.state.subCategoryValue == '') {\n                  this.setState({\n                    subCategoryError: 'Enter Value First'\n                  });\n                }\n              } else {\n                this.setState({\n                  isLoading: true\n                });\n                this.addCategory(this);\n              }\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    } // // Category Request \n    // // => Field Value \n    // handleCategoryRequestChange = (e, index) => {\n    //     let copyArray = [];\n    //     copyArray = Object.assign([], this.state.categoryRequestList);\n    //     copyArray[index].value = e.target.value;\n    //     if (e.target.value != '' && e.target.value.length <= 20 && e.target.value.length >= 3) {\n    //         copyArray[index].error = ''\n    //     } else {\n    //         copyArray[index].error = 'Value must be 3-20 characters'\n    //     }\n    //     this.setState({ categoryRequestList: copyArray })\n    // }\n    // //  => Edit\n    // async handleEditCategoryRequestClick(index) {\n    //     let copyArray = [];\n    //     copyArray = Object.assign([], this.state.categoryRequestList);\n    //     var obj = {};\n    //     obj['value'] = copyArray[index].value;\n    //     obj['label'] = false;\n    //     obj['prevVal'] = copyArray[index].value;\n    //     obj['error'] = '';\n    //     copyArray[index] = obj\n    //     await this.setState({ categoryRequestList: copyArray })\n    // }\n    // //  => Cancle\n    // handleCancelCategoryRequestClick(index) {\n    //     let copyArray = [];\n    //     copyArray = Object.assign([], this.state.categoryRequestList);\n    //     copyArray[index].value = copyArray[index].prevVal;\n    //     copyArray[index].label = true;\n    //     copyArray[index].error = '';\n    //     this.setState({ categoryRequestList: copyArray })\n    // }\n    // // Update\n    // handleUpdateCategoryRequestClick(index) {\n    //     let copyArray = [];\n    //     copyArray = Object.assign([], this.state.categoryRequestList);\n    //     if (copyArray[index].value == copyArray[index].prevVal) {\n    //         copyArray[index].error = 'Enter Different Value';\n    //         this.setState({ categoryRequestList: copyArray });\n    //     } else {\n    //         if (copyArray[index].error == '') {\n    //             copyArray[index].label = true;\n    //             this.setState({ categoryRequestList: copyArray, showModalMessage: 'Product Category Updated Successfully', showModal: true });\n    //         }\n    //     }\n    // }\n    // //  => Add\n    // handleAddCategoryRequestClick(index) {\n    //     let copyArray = [];\n    //     copyArray = Object.assign([], this.state.categoryRequestList);\n    //     copyArray.splice(index, 1);\n    //     this.setState({ categoryRequestList: copyArray, showModalMessage: 'Product Category Added Successfully', showModal: true })\n    //     this.addCategory(this)\n    // }\n    // //  => Delete\n    // handleDeleteCategoryRequestClick(index) {\n    //     let copyArray = [];\n    //     copyArray = Object.assign([], this.state.categoryRequestList);\n    //     copyArray.splice(index, 1);\n    //     this.setState({ categoryRequestList: copyArray, showModalMessage: 'Product Category Deleted', showModal: true })\n    // }\n    // All categories\n    //  => Chane\n\n  }, {\n    key: \"handleEditCategoryClick\",\n    //  => Edit\n    value: function handleEditCategoryClick(index) {\n      var copyArray, obj;\n      return _regeneratorRuntime.async(function handleEditCategoryClick$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              copyArray = [];\n              copyArray = Object.assign([], this.state.categoryList);\n              obj = {};\n              obj['value'] = copyArray[index].value;\n              obj['label'] = false;\n              obj['prevVal'] = copyArray[index].value;\n              obj['error'] = '';\n              copyArray[index] = obj;\n              _context4.next = 10;\n              return _regeneratorRuntime.awrap(this.setState({\n                categoryList: copyArray\n              }));\n\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    } //  => Cancle\n\n  }, {\n    key: \"handleCancelCategoryClick\",\n    value: function handleCancelCategoryClick(index) {\n      var copyArray = [];\n      copyArray = Object.assign([], this.state.categoryList);\n      copyArray[index].value = copyArray[index].prevVal;\n      copyArray[index].error = '';\n      copyArray[index].label = true;\n      this.setState({\n        categoryList: copyArray\n      });\n    } //  => Update\n\n  }, {\n    key: \"handleUpdateCategoryClick\",\n    value: function handleUpdateCategoryClick(index) {\n      var copyArray = [];\n      copyArray = Object.assign([], this.state.categoryList);\n\n      if (copyArray[index].value == copyArray[index].prevVal) {\n        copyArray[index].error = 'Enter Different Value';\n        this.setState({\n          categoryRequestList: copyArray\n        });\n      } else {\n        if (copyArray[index].error == '') {\n          copyArray[index].label = true;\n          categoryArray.forEach(function (element, i) {\n            if (copyArray[index].prevVal == element.value) {\n              element.value = copyArray[index].value;\n            }\n          });\n          this.setState({\n            categoryList: copyArray,\n            showModalMessage: 'Product Category Updated Successfully',\n            showModal: true\n          });\n        }\n      }\n    } //  => Delete\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(React.Fragment, null, __jsx(AlertModal, {\n        onHide: function onHide(e) {\n          return _this2.setState({\n            showModal: false\n          });\n        },\n        show: this.state.showModal,\n        header: 'Success',\n        message: this.state.showModalMessage,\n        iconName: faThumbsUp,\n        color: \"#00b300\"\n      }), __jsx(TitleRow, {\n        icon: faListAlt,\n        title: ' Admin Dashboard / Product Categories'\n      }), __jsx(CardAccordion, {\n        title: 'Add New Category'\n      }, __jsx(Form.Row, null, __jsx(Form.Group, {\n        as: Col,\n        lg: 4,\n        md: 4,\n        sm: 4,\n        xs: 12\n      }, __jsx(Form.Label, {\n        style: styles.label\n      }, \"Category\"), __jsx(InputGroup, null, __jsx(Form.Control, {\n        type: \"text\",\n        size: \"sm\",\n        placeholder: \"Enter Category Value\",\n        name: \"sku\",\n        value: this.state.categoryValue,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            categoryValue: e.target.value,\n            categoryError: ''\n          });\n        },\n        isInvalid: this.state.categoryError\n      }), __jsx(Form.Control.Feedback, {\n        type: \"invalid\"\n      }, this.state.categoryError))), __jsx(Form.Group, {\n        as: Col,\n        lg: 4,\n        md: 4,\n        sm: 4,\n        xs: 12\n      }, __jsx(Form.Label, {\n        style: styles.label\n      }, \"Sub Category\"), __jsx(InputGroup, null, __jsx(Form.Control, {\n        type: \"text\",\n        size: \"sm\",\n        placeholder: \"Enter Category Value\",\n        name: \"sku\",\n        value: this.state.subCategoryValue,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            subCategoryValue: e.target.value,\n            subCategoryError: ''\n          });\n        },\n        isInvalid: this.state.subCategoryError\n      }), __jsx(Form.Control.Feedback, {\n        type: \"invalid\"\n      }, this.state.subCategoryError)))), __jsx(Form.Group, null, __jsx(Button, {\n        type: \"submit\",\n        size: \"sm\",\n        onClick: this.handleSubmit.bind(this),\n        disabled: this.state.isLoading,\n        block: true,\n        style: styles.submit_btn\n      }, this.state.isLoading ? 'Uploading' : 'Add Category', this.state.isLoading ? __jsx(Spinner, {\n        animation: \"grow\",\n        size: \"sm\"\n      }) : null))), __jsx(CardAccordion, {\n        title: 'All Categories'\n      }, __jsx(Form.Row, {\n        style: {\n          margin: '0% 5%'\n        }\n      }, __jsx(Form.Group, {\n        as: Col\n      }, __jsx(InputGroup, null, __jsx(Form.Control, {\n        type: \"text\",\n        size: \"sm\",\n        placeholder: \"Enter Category Value\",\n        name: \"sku\",\n        value: this.state.filterStr,\n        onChange: function onChange(e) {\n          return _this2.handleFilterStrChange(e);\n        }\n      })))), __jsx(\"hr\", null), this.state.categoryList && this.state.categoryList.map(function (element, index) {\n        return __jsx(Form.Row, null, __jsx(Form.Group, {\n          as: Col,\n          lg: \"auto\",\n          md: \"auto\",\n          sm: \"auto\",\n          xs: 12\n        }, __jsx(Form.Control, {\n          type: \"text\",\n          size: \"sm\",\n          name: \"sku\",\n          value: element.entry_date,\n          disabled: true\n        })), __jsx(Form.Group, {\n          as: Col,\n          lg: 3,\n          md: 3,\n          sm: 3,\n          xs: 12\n        }, __jsx(InputGroup, null, __jsx(Form.Control, {\n          type: \"text\",\n          size: \"sm\",\n          placeholder: \"Enter Category Value\",\n          name: \"sku\",\n          value: element.category,\n          onChange: function onChange(e) {\n            return _this2.handleCategoryChange(e, index);\n          },\n          disabled: element.label,\n          isInvalid: element.error\n        }), __jsx(Form.Control.Feedback, {\n          type: \"invalid\"\n        }, element.error))), __jsx(Form.Group, {\n          as: Col,\n          lg: 3,\n          md: 3,\n          sm: 3,\n          xs: 12\n        }, __jsx(InputGroup, null, __jsx(Form.Control, {\n          type: \"text\",\n          size: \"sm\",\n          placeholder: \"Enter Category Value\",\n          name: \"sku\",\n          value: element.sub_category,\n          onChange: function onChange(e) {\n            return _this2.handleCategoryChange(e, index);\n          },\n          disabled: element.label,\n          isInvalid: element.error\n        }), __jsx(Form.Control.Feedback, {\n          type: \"invalid\"\n        }, element.error))), __jsx(Form.Group, {\n          as: Col,\n          lg: 3,\n          md: 3,\n          sm: 3,\n          xs: 12\n        }, __jsx(InputGroup, null, __jsx(Form.Control, {\n          type: \"text\",\n          size: \"sm\",\n          placeholder: \"Enter Category Value\",\n          name: \"sku\",\n          value: element.sub_sub_category,\n          onChange: function onChange(e) {\n            return _this2.handleCategoryChange(e, index);\n          },\n          disabled: element.label,\n          isInvalid: element.error\n        }), __jsx(Form.Control.Feedback, {\n          type: \"invalid\"\n        }, element.error))), __jsx(Form.Group, {\n          as: Col,\n          lg: \"auto\",\n          md: \"auto\",\n          sm: \"auto\",\n          xs: \"auto\"\n        }, __jsx(Button, {\n          type: \"submit\",\n          variant: \"outline-success\",\n          size: \"sm\",\n          block: true,\n          style: styles.submit_btn,\n          onClick: element.label ? function () {\n            return _this2.handleEditCategoryClick(index);\n          } : function () {\n            return _this2.handleUpdateCategoryClick(index);\n          }\n        }, __jsx(\"div\", null, element.label ? 'Edit' : 'Update'))), __jsx(\"div\", {\n          className: \"mr-auto\"\n        }), __jsx(Form.Group, {\n          as: Col,\n          lg: \"auto\",\n          md: \"auto\",\n          sm: \"auto\",\n          xs: \"auto\"\n        }, __jsx(Button, {\n          type: \"submit\",\n          variant: element.label ? \"outline-danger\" : \"outline-primary\",\n          size: \"sm\",\n          block: true,\n          style: styles.submit_btn,\n          onClick: element.label ? function () {\n            return _this2.handleDeleteCategoryClick(index);\n          } : function () {\n            return _this2.handleCancelCategoryClick(index);\n          }\n        }, __jsx(\"div\", null, element.label ? 'Delete' : 'Cancel'))));\n      })));\n    }\n  }]);\n\n  return ProducCategories;\n}(Component);\n\nvar styles = {\n  title_row: {\n    borderBottom: '1px solid gray',\n    padding: '1.5% 4%'\n  },\n  title_fontawesome: {\n    color: 'gray',\n    marginRight: '3%',\n    width: '26px',\n    height: '26px',\n    maxHeight: '26px',\n    maxWidth: '26px'\n  },\n  title: {\n    color: 'gray'\n  },\n  card: {\n    // width: '100%',\n    margin: '2%'\n  },\n  card_body: {// padding: '5%'\n  },\n  label: {\n    fontSize: \"\".concat(GlobalStyleSheet.form_label_fontsize)\n  },\n  error: {\n    width: '100%',\n    textAlign: 'center',\n    color: '#DC3545',\n    fontSize: '14px'\n  },\n  accordin_fontawesome: {\n    color: \"\".concat(GlobalStyleSheet.admin_primry_color),\n    marginRight: '10%',\n    width: '15px',\n    height: '15px',\n    maxHeight: '15px',\n    maxWidth: '15px'\n  }\n};\nexport default ProducCategories;","map":null,"metadata":{},"sourceType":"module"}