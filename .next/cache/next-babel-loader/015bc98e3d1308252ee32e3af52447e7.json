{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Form, Row, Accordion, Col, Card, InputGroup, Button, Spinner } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faListAlt, faSlidersH } from '@fortawesome/free-solid-svg-icons';\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-regular-svg-icons';\nimport React, { Component } from 'react';\nimport MuhalikConfig from '../../../../../../sdk/muhalik.config';\nimport GlobalStyleSheet from '../../../../.././../styleSheet';\nimport axios from 'axios';\nimport AlertModal from '../../../../alert-modal';\nimport TitleRow from '../../../../title-row';\nimport CardAccordion from '../../../../card_accordion';\nimport { getUncodededTokenFromStorage } from '../../../../../../sdk/core/authentication-service';\nlet tagArray = [];\n\nclass ProducTags extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleTagRequestChange\", (e, index) => {\n      let copyArray = [];\n      copyArray = Object.assign([], this.state.tagRequestList);\n      copyArray[index].value = e.target.value;\n\n      if (e.target.value != '' && e.target.value.length <= 20 && e.target.value.length >= 3) {\n        copyArray[index].error = '';\n      } else {\n        copyArray[index].error = 'Value must be 3-20 characters';\n      }\n\n      this.setState({\n        tagRequestList: copyArray\n      });\n    });\n\n    _defineProperty(this, \"handleTagChange\", (e, index) => {\n      let copyArray = [];\n      copyArray = Object.assign([], this.state.tagList);\n      copyArray[index].value = e.target.value;\n\n      if (e.target.value != '' && e.target.value.length <= 20 && e.target.value.length >= 3) {\n        copyArray[index].error = '';\n      } else {\n        copyArray[index].error = 'Value must be 3-20 characters';\n      }\n\n      this.setState({\n        tagList: copyArray\n      });\n    });\n\n    _defineProperty(this, \"handleDeleteTagClick\", index => {\n      let copyArray = [];\n      copyArray = Object.assign([], this.state.tagList);\n      tagArray.forEach((element, i) => {\n        if (copyArray[index].value == element.value) {\n          tagArray.splice(index, 1);\n        }\n      });\n      copyArray.splice(index, 1);\n      this.setState({\n        tagList: copyArray,\n        showModalMessage: 'Product Tag Deleted',\n        showModal: true\n      });\n    });\n\n    this.state = {\n      isLoading: false,\n      showToast: false,\n      tagValue: '',\n      error: '',\n      tagList: [],\n      tagRequestList: [],\n      editRequestedTag: '',\n      showModalMessage: '',\n      showModal: false,\n      filterStr: ''\n    };\n  } // Getting Product Tags from DB\n\n\n  async componentDidMount() {\n    const url = MuhalikConfig.PATH + '/api/categories/tags';\n    await axios.get(url, {\n      headers: {\n        'authorization': await getUncodededTokenFromStorage()\n      }\n    }).then(response => {\n      console.log('tags:', response.data.data);\n      let copyArray = [];\n      copyArray = response.data.data;\n      copyArray.forEach((data, index) => {\n        data.label = true;\n      });\n      this.setState({\n        tagList: copyArray\n      });\n      this.setState({\n        tagRequestList: this.state.tagList\n      });\n      tagArray = copyArray;\n    }).catch(error => {\n      alert('Tags_1 Fetchig Error: ', error);\n    });\n  }\n\n  async addTag(tagValue, currentComponent) {\n    const url = MuhalikConfig.PATH + '/api/categories/add-tag';\n    let data = [];\n    data = {\n      label: tagValue,\n      value: tagValue\n    };\n    await axios.post(url, {\n      data\n    }, {\n      headers: {\n        'authorization': await getUncodededTokenFromStorage()\n      }\n    }).then(function (response) {\n      currentComponent.setState({\n        isLoading: false\n      });\n      currentComponent.setState({\n        showModalMessage: 'Product Tag Added Successfully'\n      });\n      currentComponent.setState({\n        showModal: true\n      });\n    }).catch(function (error) {\n      currentComponent.setState({\n        isLoading: false\n      });\n      alert('Error: ', error.response.data.message);\n    });\n  }\n\n  handleFilterStrChange(e) {\n    this.setState({\n      filterStr: e.target.value\n    });\n\n    if (e.target.value == '') {\n      this.setState({\n        tagList: tagArray\n      });\n    } else {\n      let array = [];\n      this.state.tagList.filter(function (data) {\n        // var value = data.value.toLowerCase;\n        if (data.value.includes(e.target.value)) {\n          array.push(data);\n        }\n      });\n      this.setState({\n        tagList: array\n      });\n    }\n  }\n\n  async handleSubmit() {\n    if (this.state.tagValue == '') {\n      this.setState({\n        error: 'Enter Value First'\n      });\n    } else {\n      this.setState({\n        isLoading: true\n      });\n      this.setState({\n        error: ''\n      });\n      this.addTag(this.state.tagValue, this);\n    }\n  } // Tag Request \n  // => Field Value \n\n\n  //  => Edit\n  async handleEditTagRequestClick(index) {\n    let copyArray = [];\n    copyArray = Object.assign([], this.state.tagRequestList);\n    var obj = {};\n    obj['value'] = copyArray[index].value;\n    obj['label'] = false;\n    obj['prevVal'] = copyArray[index].value;\n    obj['error'] = '';\n    copyArray[index] = obj;\n    await this.setState({\n      tagRequestList: copyArray\n    });\n  } //  => Cancle\n\n\n  handleCancelTagRequestClick(index) {\n    let copyArray = [];\n    copyArray = Object.assign([], this.state.tagRequestList);\n    copyArray[index].value = copyArray[index].prevVal;\n    copyArray[index].label = true;\n    copyArray[index].error = '';\n    this.setState({\n      tagRequestList: copyArray\n    });\n  } // Update\n\n\n  handleUpdateTagRequestClick(index) {\n    let copyArray = [];\n    copyArray = Object.assign([], this.state.tagRequestList);\n\n    if (copyArray[index].value == copyArray[index].prevVal) {\n      copyArray[index].error = 'Enter Different Value';\n      this.setState({\n        tagRequestList: copyArray\n      });\n    } else {\n      if (copyArray[index].error == '') {\n        copyArray[index].label = true;\n        this.setState({\n          tagRequestList: copyArray,\n          showModalMessage: 'Product Tag Updated Successfully',\n          showModal: true\n        });\n      }\n    }\n  } //  => Add\n\n\n  handleAddTagRequestClick(index) {\n    let copyArray = [];\n    copyArray = Object.assign([], this.state.tagRequestList);\n    copyArray.splice(index, 1);\n    this.setState({\n      tagRequestList: copyArray,\n      showModalMessage: 'Product Tag Added Successfully',\n      showModal: true\n    });\n    this.addTag(copyArray[index].value, this);\n  } //  => Delete\n\n\n  handleDeleteTagRequestClick(index) {\n    let copyArray = [];\n    copyArray = Object.assign([], this.state.tagRequestList);\n    copyArray.splice(index, 1);\n    this.setState({\n      tagRequestList: copyArray,\n      showModalMessage: 'Product Tag Deleted',\n      showModal: true\n    });\n  } // All tags\n  //  => Chane\n\n\n  //  => Edit\n  async handleEditTagClick(index) {\n    let copyArray = [];\n    copyArray = Object.assign([], this.state.tagList);\n    var obj = {};\n    obj['value'] = copyArray[index].value;\n    obj['label'] = false;\n    obj['prevVal'] = copyArray[index].value;\n    obj['error'] = '';\n    copyArray[index] = obj;\n    await this.setState({\n      tagList: copyArray\n    });\n  } //  => Cancle\n\n\n  handleCancelTagClick(index) {\n    let copyArray = [];\n    copyArray = Object.assign([], this.state.tagList);\n    copyArray[index].value = copyArray[index].prevVal;\n    copyArray[index].error = '';\n    copyArray[index].label = true;\n    this.setState({\n      tagList: copyArray\n    });\n  } //  => Update\n\n\n  handleUpdateTagClick(index) {\n    let copyArray = [];\n    copyArray = Object.assign([], this.state.tagList);\n\n    if (copyArray[index].value == copyArray[index].prevVal) {\n      copyArray[index].error = 'Enter Different Value';\n      this.setState({\n        tagRequestList: copyArray\n      });\n    } else {\n      if (copyArray[index].error == '') {\n        copyArray[index].label = true;\n        tagArray.forEach((element, i) => {\n          if (copyArray[index].prevVal == element.value) {\n            element.value = copyArray[index].value;\n          }\n        });\n        this.setState({\n          tagList: copyArray,\n          showModalMessage: 'Product Tag Updated Successfully',\n          showModal: true\n        });\n      }\n    }\n  } //  => Delete\n\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(AlertModal, {\n      onHide: e => this.setState({\n        showModal: false\n      }),\n      show: this.state.showModal,\n      header: 'Success',\n      message: this.state.showModalMessage,\n      iconName: faThumbsUp,\n      color: \"#00b300\"\n    }), __jsx(TitleRow, {\n      icon: faListAlt,\n      title: ' Admin Dashboard / Product Tags'\n    }), __jsx(CardAccordion, {\n      title: 'Add New Tag'\n    }, __jsx(Form.Group, null, __jsx(InputGroup, null, __jsx(Form.Control, {\n      type: \"text\",\n      size: \"sm\",\n      placeholder: \"Enter Tag Value\",\n      name: \"sku\",\n      value: this.state.tagValue,\n      onChange: e => this.setState({\n        tagValue: e.target.value\n      }),\n      isInvalid: this.state.error\n    }), __jsx(Form.Control.Feedback, {\n      type: \"invalid\"\n    }, this.state.error))), __jsx(Form.Group, null, __jsx(Button, {\n      type: \"submit\",\n      size: \"sm\",\n      onClick: this.handleSubmit.bind(this),\n      disabled: this.state.isLoading,\n      block: true,\n      style: styles.submit_btn\n    }, this.state.isLoading ? 'Uploading' : 'Add Tag', this.state.isLoading ? __jsx(Spinner, {\n      animation: \"grow\",\n      size: \"sm\"\n    }) : null))), __jsx(CardAccordion, {\n      title: 'Add Tag Requests'\n    }, this.state.tagRequestList.map((data, index) => __jsx(Form.Row, null, __jsx(Form.Group, {\n      as: Col,\n      lg: 2,\n      md: 2,\n      sm: 6,\n      xs: 12\n    }, __jsx(Form.Control, {\n      type: \"text\",\n      size: \"sm\",\n      placeholder: \"Enter Tag Value\",\n      name: \"sku\",\n      value: data.value,\n      disabled: true\n    })), __jsx(Form.Group, {\n      as: Col,\n      lg: 2,\n      md: 2,\n      sm: 6,\n      xs: 12\n    }, __jsx(Form.Control, {\n      type: \"text\",\n      size: \"sm\",\n      placeholder: \"Enter Tag Value\",\n      name: \"sku\",\n      value: data.value,\n      disabled: true\n    })), __jsx(\"div\", {\n      className: \"mr-auto\"\n    }), __jsx(Form.Group, {\n      as: Col,\n      lg: 4,\n      md: 4,\n      sm: 6,\n      xs: 12\n    }, __jsx(InputGroup, null, __jsx(Form.Control, {\n      type: \"text\",\n      size: \"sm\",\n      placeholder: \"Enter Tag Value\",\n      name: \"sku\",\n      value: data.value,\n      onChange: e => this.handleTagRequestChange(e, index),\n      isInvalid: data.error,\n      disabled: data.label\n    }), __jsx(Form.Control.Feedback, {\n      type: \"invalid\"\n    }, data.error))), __jsx(\"div\", {\n      className: \"mr-auto\"\n    }), __jsx(Form.Group, {\n      as: Col,\n      lg: \"auto\",\n      md: \"auto\",\n      sm: \"auto\",\n      xs: \"auto\"\n    }, __jsx(Button, {\n      type: \"submit\",\n      variant: \"outline-success\",\n      size: \"sm\",\n      block: true,\n      style: styles.submit_btn,\n      onClick: () => data.label ? this.handleEditTagRequestClick(index) : this.handleUpdateTagRequestClick(index)\n    }, __jsx(\"div\", null, data.label ? 'Edit' : 'Update'))), __jsx(Form.Group, {\n      as: Col,\n      lg: \"auto\",\n      md: \"auto\",\n      sm: \"auto\",\n      xs: \"auto\"\n    }, __jsx(Button, {\n      type: \"submit\",\n      variant: \"outline-primary\",\n      size: \"sm\",\n      block: true,\n      style: styles.submit_btn,\n      onClick: () => {\n        data.label ? this.handleAddTagRequestClick(index) : this.handleCancelTagRequestClick(index);\n      }\n    }, __jsx(\"div\", null, data.label ? 'Add' : 'Cancel'))), __jsx(\"div\", {\n      className: \"mr-auto\"\n    }), __jsx(Form.Group, {\n      as: Col,\n      lg: \"auto\",\n      md: \"auto\",\n      sm: \"auto\",\n      xs: \"auto\"\n    }, __jsx(Button, {\n      type: \"submit\",\n      variant: \"outline-danger\",\n      size: \"sm\",\n      block: true,\n      style: styles.submit_btn,\n      onClick: () => this.handleDeleteTagRequestClick(index)\n    }, __jsx(\"div\", null, \"Discard\")))))), __jsx(CardAccordion, {\n      title: 'All Tags'\n    }, __jsx(Form.Row, {\n      style: {\n        margin: '0% 5%'\n      }\n    }, __jsx(Form.Group, {\n      as: Col\n    }, __jsx(InputGroup, null, __jsx(Form.Control, {\n      type: \"text\",\n      size: \"sm\",\n      placeholder: \"Enter Tag Value\",\n      name: \"sku\",\n      value: this.state.filterStr,\n      onChange: e => this.handleFilterStrChange(e)\n    })))), __jsx(\"hr\", null), this.state.tagList.map((data, index) => __jsx(Form.Row, null, __jsx(Form.Group, {\n      as: Col,\n      lg: 8,\n      md: 8,\n      sm: 12,\n      xs: 12\n    }, __jsx(InputGroup, null, __jsx(Form.Control, {\n      type: \"text\",\n      size: \"sm\",\n      placeholder: \"Enter Tag Value\",\n      name: \"sku\",\n      value: data.value,\n      onChange: e => this.handleTagChange(e, index),\n      disabled: data.label,\n      isInvalid: data.error\n    }), __jsx(Form.Control.Feedback, {\n      type: \"invalid\"\n    }, data.error))), __jsx(Form.Group, {\n      as: Col,\n      lg: 1,\n      md: 1,\n      sm: \"auto\",\n      xs: \"auto\"\n    }, __jsx(Button, {\n      type: \"submit\",\n      variant: \"outline-success\",\n      size: \"sm\",\n      block: true,\n      style: styles.submit_btn,\n      onClick: data.label ? () => this.handleEditTagClick(index) : () => this.handleUpdateTagClick(index)\n    }, __jsx(\"div\", null, data.label ? 'Edit' : 'Update'))), __jsx(\"div\", {\n      className: \"mr-auto\"\n    }), __jsx(Form.Group, {\n      as: Col,\n      lg: 2,\n      md: 2,\n      sm: \"auto\",\n      xs: \"auto\"\n    }, __jsx(Button, {\n      type: \"submit\",\n      variant: data.label ? \"outline-danger\" : \"outline-primary\",\n      size: \"sm\",\n      block: true,\n      style: styles.submit_btn,\n      onClick: data.label ? () => this.handleDeleteTagClick(index) : () => this.handleCancelTagClick(index)\n    }, __jsx(\"div\", null, data.label ? 'Delete' : 'Cancel')))))));\n  }\n\n}\n\nconst styles = {\n  title_row: {\n    borderBottom: '1px solid gray',\n    padding: '1.5% 4%'\n  },\n  title_fontawesome: {\n    color: 'gray',\n    marginRight: '3%',\n    width: '26px',\n    height: '26px',\n    maxHeight: '26px',\n    maxWidth: '26px'\n  },\n  title: {\n    color: 'gray'\n  },\n  card: {\n    // width: '100%',\n    margin: '2%'\n  },\n  card_body: {// padding: '5%'\n  },\n  label: {\n    fontSize: `${GlobalStyleSheet.form_label_fontsize}`\n  },\n  error: {\n    width: '100%',\n    textAlign: 'center',\n    color: '#DC3545',\n    fontSize: '14px'\n  },\n  accordin_fontawesome: {\n    color: `${GlobalStyleSheet.admin_primry_color}`,\n    marginRight: '10%',\n    width: '15px',\n    height: '15px',\n    maxHeight: '15px',\n    maxWidth: '15px'\n  }\n};\nexport default ProducTags;","map":null,"metadata":{},"sourceType":"module"}