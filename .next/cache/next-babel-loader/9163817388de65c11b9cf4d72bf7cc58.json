{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MudassirR\\\\Desktop\\\\Muhalik\\\\New folder\\\\muhalikweb\\\\src\\\\pages\\\\components\\\\admin\\\\dashboard\\\\dashboard-contents\\\\product-contents\\\\product-tags.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n// import { Form, Row, Accordion, Col, Card, InputGroup, Button, Spinner } from 'react-bootstrap'\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n// import { faPlus, faListAlt, faSlidersH } from '@fortawesome/free-solid-svg-icons'\n// import { faThumbsUp, faThumbsDown } from '@fortawesome/free-regular-svg-icons'\n// import React, { Component } from 'react';\n// import MuhalikConfig from '../../../../../../sdk/muhalik.config'\n// import GlobalStyleSheet from '../../../../.././../styleSheet'\n// import axios from 'axios';\n// import AlertModal from '../../../../alert-modal';\n// import TitleRow from '../../../../title-row';\n// import CardAccordion from '../../../../card_accordion';\n// let tagArray = [];\n// class ProducTags extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             token: '',\n//             isLoading: false,\n//             showToast: false,\n//             tagValue: '',\n//             error: '',\n//             tagList: [],\n//             tagRequestList: [],\n//             editRequestedTag: '',\n//             showModalMessage: '',\n//             showModal: false,\n//             filterStr: '',\n//         }\n//     }\n//     UNSAFE_componentWillReceiveProps(nextProps) {\n//         this.setState({\n//             token: nextProps.token\n//         });\n//     }\n//     async addTag(tagValue, currentComponent) {\n//         const url = MuhalikConfig.PATH + '/api/categories/tag';\n//         let data = []\n//         data = { label: tagValue, value: tagValue }\n//         await axios.post(url, {\n//             data\n//         }, {\n//             headers: { 'authorization': this.state.token }\n//         }).then(function (response) {\n//             currentComponent.setState({ isLoading: false })\n//             currentComponent.setState({ showModalMessage: 'Product Tag Added Successfully' })\n//             currentComponent.setState({ showModal: true })\n//         }).catch(function (error) {\n//             currentComponent.setState({ isLoading: false });\n//             console.log('Error: ', error.response.data.message);\n//         });\n//     }\n//     handleFilterStrChange(e) {\n//         this.setState({ filterStr: e.target.value });\n//         if (e.target.value == '') {\n//             this.setState({ tagList: tagArray });\n//         } else {\n//             let array = [];\n//             this.state.tagList.filter(function (data) {\n//                 // var value = data.value.toLowerCase;\n//                 if (data.value.includes(e.target.value)) {\n//                     array.push(data);\n//                 }\n//             })\n//             this.setState({ tagList: array });\n//         }\n//     }\n//     async handleSubmit() {\n//         if (this.state.tagValue == '') {\n//             this.setState({ error: 'Enter Value First' })\n//         } else {\n//             this.setState({ isLoading: true })\n//             this.setState({ error: '' })\n//             this.addTag(this.state.tagValue, this)\n//         }\n//     }\n//     // Tag Request \n//     // => Field Value \n//     handleTagRequestChange = (e, index) => {\n//         let copyArray = [];\n//         copyArray = Object.assign([], this.state.tagRequestList);\n//         copyArray[index].value = e.target.value;\n//         if (e.target.value != '' && e.target.value.length <= 20 && e.target.value.length >= 3) {\n//             copyArray[index].error = ''\n//         } else {\n//             copyArray[index].error = 'Value must be 3-20 characters'\n//         }\n//         this.setState({ tagRequestList: copyArray })\n//     }\n//     //  => Edit\n//     async handleEditTagRequestClick(index) {\n//         let copyArray = [];\n//         copyArray = Object.assign([], this.state.tagRequestList);\n//         var obj = {};\n//         obj['value'] = copyArray[index].value;\n//         obj['label'] = false;\n//         obj['prevVal'] = copyArray[index].value;\n//         obj['error'] = '';\n//         copyArray[index] = obj\n//         await this.setState({ tagRequestList: copyArray })\n//     }\n//     //  => Cancle\n//     handleCancelTagRequestClick(index) {\n//         let copyArray = [];\n//         copyArray = Object.assign([], this.state.tagRequestList);\n//         copyArray[index].value = copyArray[index].prevVal;\n//         copyArray[index].label = true;\n//         copyArray[index].error = '';\n//         this.setState({ tagRequestList: copyArray })\n//     }\n//     // Update\n//     handleUpdateTagRequestClick(index) {\n//         let copyArray = [];\n//         copyArray = Object.assign([], this.state.tagRequestList);\n//         if (copyArray[index].value == copyArray[index].prevVal) {\n//             copyArray[index].error = 'Enter Different Value';\n//             this.setState({ tagRequestList: copyArray });\n//         } else {\n//             if (copyArray[index].error == '') {\n//                 copyArray[index].label = true;\n//                 this.setState({ tagRequestList: copyArray, showModalMessage: 'Product Tag Updated Successfully', showModal: true });\n//             }\n//         }\n//     }\n//     //  => Add\n//     handleAddTagRequestClick(index) {\n//         let copyArray = [];\n//         copyArray = Object.assign([], this.state.tagRequestList);\n//         copyArray.splice(index, 1);\n//         this.setState({ tagRequestList: copyArray, showModalMessage: 'Product Tag Added Successfully', showModal: true })\n//         this.addTag(copyArray[index].value, this)\n//     }\n//     //  => Delete\n//     handleDeleteTagRequestClick(index) {\n//         let copyArray = [];\n//         copyArray = Object.assign([], this.state.tagRequestList);\n//         copyArray.splice(index, 1);\n//         this.setState({ tagRequestList: copyArray, showModalMessage: 'Product Tag Deleted', showModal: true })\n//     }\n//     // All tags\n//     //  => Chane\n//     handleTagChange = (e, index) => {\n//         let copyArray = [];\n//         copyArray = Object.assign([], this.state.tagList);\n//         copyArray[index].value = e.target.value;\n//         if (e.target.value != '' && e.target.value.length <= 20 && e.target.value.length >= 3) {\n//             copyArray[index].error = ''\n//         } else {\n//             copyArray[index].error = 'Value must be 3-20 characters'\n//         }\n//         this.setState({ tagList: copyArray })\n//     }\n//     //  => Edit\n//     async handleEditTagClick(index) {\n//         let copyArray = [];\n//         copyArray = Object.assign([], this.state.tagList);\n//         var obj = {};\n//         obj['value'] = copyArray[index].value;\n//         obj['label'] = false;\n//         obj['prevVal'] = copyArray[index].value;\n//         obj['error'] = '';\n//         copyArray[index] = obj\n//         await this.setState({ tagList: copyArray })\n//     }\n//     //  => Cancle\n//     handleCancelTagClick(index) {\n//         let copyArray = [];\n//         copyArray = Object.assign([], this.state.tagList);\n//         copyArray[index].value = copyArray[index].prevVal;\n//         copyArray[index].error = '';\n//         copyArray[index].label = true;\n//         this.setState({ tagList: copyArray })\n//     }\n//     //  => Update\n//     handleUpdateTagClick(index) {\n//         let copyArray = [];\n//         copyArray = Object.assign([], this.state.tagList);\n//         if (copyArray[index].value == copyArray[index].prevVal) {\n//             copyArray[index].error = 'Enter Different Value';\n//             this.setState({ tagRequestList: copyArray });\n//         } else {\n//             if (copyArray[index].error == '') {\n//                 copyArray[index].label = true;\n//                 tagArray.forEach((element, i) => {\n//                     if (copyArray[index].prevVal == element.value) {\n//                         element.value = copyArray[index].value;\n//                     }\n//                 });\n//                 this.setState({ tagList: copyArray, showModalMessage: 'Product Tag Updated Successfully', showModal: true });\n//             }\n//         }\n//     }\n//     //  => Delete\n//     handleDeleteTagClick = (index) => {\n//         let copyArray = [];\n//         copyArray = Object.assign([], this.state.tagList);\n//         tagArray.forEach((element, i) => {\n//             if (copyArray[index].value == element.value) {\n//                 tagArray.splice(index, 1);\n//             }\n//         });\n//         copyArray.splice(index, 1);\n//         this.setState({ tagList: copyArray, showModalMessage: 'Product Tag Deleted', showModal: true })\n//     }\n//     render() {\n//         return (\n//             <>\n//                 <AlertModal\n//                     onHide={(e) => this.setState({ showModal: false })}\n//                     show={this.state.showModal}\n//                     header={'Success'}\n//                     message={this.state.showModalMessage}\n//                     iconname={faThumbsUp}\n//                     color={\"#00b300\"}\n//                 />\n//                 <TitleRow icon={faListAlt} title={' Admin Dashboard / Product Tags'} />\n//                 {/* Add New Tag */}\n//                 <CardAccordion title={'Add New Tag'}>\n//                     <Form.Group>\n//                         <InputGroup>\n//                             <Form.Control\n//                                 type=\"text\"\n//                                 size=\"sm\"\n//                                 placeholder=\"Enter Tag Value\"\n//                                 name=\"sku\"\n//                                 value={this.state.tagValue}\n//                                 onChange={(e) => this.setState({ tagValue: e.target.value })}\n//                                 isInvalid={this.state.error}\n//                             />\n//                             <Form.Control.Feedback type=\"invalid\">\n//                                 {this.state.error}\n//                             </Form.Control.Feedback>\n//                         </InputGroup>\n//                     </Form.Group>\n//                     <Form.Group>\n//                         <Button type=\"submit\" size=\"sm\" onClick={this.handleSubmit.bind(this)} disabled={this.state.isLoading} block style={styles.submit_btn}>\n//                             {this.state.isLoading ? 'Uploading' : 'Add Tag'}\n//                             {this.state.isLoading ? <Spinner animation=\"grow\" size=\"sm\" /> : null}\n//                         </Button>\n//                     </Form.Group>\n//                 </CardAccordion>\n//                 {/* Add Tag Requests */}\n//                 <CardAccordion title={'Add Tag Requests'}>\n//                     {this.state.tagRequestList.map((element, index) =>\n//                         <Form.Row>\n//                             <Form.Group as={Col} lg={2} md={2} sm={3} xs={12}>\n//                                 <Form.Control\n//                                     type=\"text\"\n//                                     size=\"sm\"\n//                                     name=\"sku\"\n//                                     value={element.entry_date}\n//                                     disabled={true}\n//                                 />\n//                             </Form.Group>\n//                             <Form.Group as={Col} lg={2} md={2} sm={3} xs={12}>\n//                                 <Form.Control\n//                                     type=\"text\"\n//                                     size=\"sm\"\n//                                     name=\"sku\"\n//                                     value={element.entry_date}\n//                                     disabled={true}\n//                                 />\n//                             </Form.Group>\n//                             <div className=\"mr-auto\"></div>\n//                             <Form.Group as={Col} lg={4} md={4} sm={6} xs={12}>\n//                                 <InputGroup>\n//                                     <Form.Control\n//                                         type=\"text\"\n//                                         size=\"sm\"\n//                                         placeholder=\"Enter Tag Value\"\n//                                         name=\"sku\"\n//                                         value={element.value}\n//                                         onChange={(e) => this.handleTagRequestChange(e, index)}\n//                                         isInvalid={element.error}\n//                                         disabled={element.label}\n//                                     />\n//                                     <Form.Control.Feedback type=\"invalid\">\n//                                         {element.error}\n//                                     </Form.Control.Feedback>\n//                                 </InputGroup>\n//                             </Form.Group>\n//                             <div className=\"mr-auto\"></div>\n//                             <Form.Group as={Col} lg=\"auto\" md=\"auto\" sm=\"auto\" xs=\"auto\">\n//                                 <Button type=\"submit\" variant=\"outline-success\" size=\"sm\" block style={styles.submit_btn}\n//                                     onClick={() => element.label ? this.handleEditTagRequestClick(index) : this.handleUpdateTagRequestClick(index)} >\n//                                     <div>{element.label ? 'Edit' : 'Update'}</div>\n//                                 </Button>\n//                             </Form.Group>\n//                             <Form.Group as={Col} lg=\"auto\" md=\"auto\" sm=\"auto\" xs=\"auto\">\n//                                 <Button type=\"submit\" variant=\"outline-primary\" size=\"sm\" block style={styles.submit_btn}\n//                                     onClick={() => { element.label ? this.handleAddTagRequestClick(index) : this.handleCancelTagRequestClick(index) }}>\n//                                     <div>{element.label ? 'Add' : 'Cancel'}</div>\n//                                 </Button>\n//                             </Form.Group>\n//                             <div className=\"mr-auto\"></div>\n//                             <Form.Group as={Col} lg=\"auto\" md=\"auto\" sm=\"auto\" xs=\"auto\">\n//                                 <Button type=\"submit\" variant=\"outline-danger\" size=\"sm\" block style={styles.submit_btn}\n//                                     onClick={() => this.handleDeleteTagRequestClick(index)}>\n//                                     <div>Discard</div>\n//                                 </Button>\n//                             </Form.Group>\n//                         </Form.Row>\n//                     )}\n//                 </CardAccordion>\n//                 {/* All Tags */}\n//                 <CardAccordion title={'All Tags'}>\n//                     <Form.Row style={{ margin: '0% 5%' }}>\n//                         <Form.Group as={Col}>\n//                             <InputGroup>\n//                                 <Form.Control\n//                                     type=\"text\"\n//                                     size=\"sm\"\n//                                     placeholder=\"Enter Tag Value\"\n//                                     name=\"sku\"\n//                                     value={this.state.filterStr}\n//                                     onChange={(e) => this.handleFilterStrChange(e)}\n//                                 />\n//                             </InputGroup>\n//                         </Form.Group>\n//                     </Form.Row>\n//                     <hr />\n//                     {this.state.tagList.map((element, index) =>\n//                         <Form.Row>\n//                             <Form.Group as={Col} lg={2} md={2} sm={6} xs={12}>\n//                                 <Form.Control\n//                                     type=\"text\"\n//                                     size=\"sm\"\n//                                     name=\"sku\"\n//                                     value={element.entry_date}\n//                                     disabled={true}\n//                                 />\n//                             </Form.Group>\n//                             <div className=\"mr-auto\"></div>\n//                             <Form.Group as={Col} lg={6} md={6} sm={6} xs={12}>\n//                                 <InputGroup>\n//                                     <Form.Control\n//                                         type=\"text\"\n//                                         size=\"sm\"\n//                                         placeholder=\"Enter Tag Value\"\n//                                         name=\"sku\"\n//                                         value={element.value}\n//                                         onChange={(e) => this.handleTagChange(e, index)}\n//                                         disabled={element.label}\n//                                         isInvalid={element.error}\n//                                     />\n//                                     <Form.Control.Feedback type=\"invalid\">\n//                                         {element.error}\n//                                     </Form.Control.Feedback>\n//                                 </InputGroup>\n//                             </Form.Group>\n//                             <div className=\"mr-auto\"></div>\n//                             <Form.Group as={Col} lg=\"auto\" md=\"auto\" sm=\"auto\" xs=\"auto\">\n//                                 <Button type=\"submit\" variant=\"outline-success\" size=\"sm\" block style={styles.submit_btn}\n//                                     onClick={element.label ? () => this.handleEditTagClick(index) : () => this.handleUpdateTagClick(index)} >\n//                                     <div>{element.label ? 'Edit' : 'Update'}</div>\n//                                 </Button>\n//                             </Form.Group>\n//                             <div className=\"mr-auto\"></div>\n//                             <Form.Group as={Col} lg=\"auto\" md=\"auto\" sm=\"auto\" xs=\"auto\">\n//                                 <Button type=\"submit\" variant={element.label ? \"outline-danger\" : \"outline-primary\"} size=\"sm\" block style={styles.submit_btn}\n//                                     onClick={element.label ? () => this.handleDeleteTagClick(index) : () => this.handleCancelTagClick(index)}>\n//                                     <div>{element.label ? 'Delete' : 'Cancel'}</div>\n//                                 </Button>\n//                             </Form.Group>\n//                         </Form.Row>\n//                     )}\n//                 </CardAccordion>\n//             </>\n//         )\n//     }\n// }\n// const styles = {\n//     title_row: {\n//         borderBottom: '1px solid gray',\n//         padding: '1.5% 4%'\n//     },\n//     title_fontawesome: {\n//         color: 'gray',\n//         marginRight: '3%',\n//         width: '26px',\n//         height: '26px',\n//         maxHeight: '26px',\n//         maxWidth: '26px',\n//     },\n//     title: {\n//         color: 'gray'\n//     },\n//     card: {\n//         // width: '100%',\n//         margin: '2%'\n//     },\n//     card_body: {\n//         // padding: '5%'\n//     },\n//     label: {\n//         fontSize: `${GlobalStyleSheet.form_label_fontsize}`\n//     },\n//     error: {\n//         width: '100%',\n//         textAlign: 'center',\n//         color: '#DC3545',\n//         fontSize: '14px',\n//     },\n//     accordin_fontawesome: {\n//         color: `${GlobalStyleSheet.admin_primry_color}`,\n//         marginRight: '10%',\n//         width: '15px',\n//         height: '15px',\n//         maxHeight: '15px',\n//         maxWidth: '15px',\n//     },\n// }\n// export default ProducTags\nconst ProducTags = () => {\n  __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 5\n    }\n  }, \"Comented\");\n};\n\nexport default ProducTags;","map":{"version":3,"sources":["C:/Users/MudassirR/Desktop/Muhalik/New folder/muhalikweb/src/pages/components/admin/dashboard/dashboard-contents/product-contents/product-tags.js"],"names":["ProducTags"],"mappingsrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,CAFD;;AAGA,eAAeA,UAAf","sourcesContent":["// import { Form, Row, Accordion, Col, Card, InputGroup, Button, Spinner } from 'react-bootstrap'\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n// import { faPlus, faListAlt, faSlidersH } from '@fortawesome/free-solid-svg-icons'\r\n// import { faThumbsUp, faThumbsDown } from '@fortawesome/free-regular-svg-icons'\r\n// import React, { Component } from 'react';\r\n// import MuhalikConfig from '../../../../../../sdk/muhalik.config'\r\n// import GlobalStyleSheet from '../../../../.././../styleSheet'\r\n// import axios from 'axios';\r\n// import AlertModal from '../../../../alert-modal';\r\n// import TitleRow from '../../../../title-row';\r\n// import CardAccordion from '../../../../card_accordion';\r\n\r\n// let tagArray = [];\r\n// class ProducTags extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {\r\n//             token: '',\r\n//             isLoading: false,\r\n//             showToast: false,\r\n//             tagValue: '',\r\n//             error: '',\r\n//             tagList: [],\r\n//             tagRequestList: [],\r\n\r\n//             editRequestedTag: '',\r\n//             showModalMessage: '',\r\n//             showModal: false,\r\n\r\n//             filterStr: '',\r\n//         }\r\n//     }\r\n\r\n//     UNSAFE_componentWillReceiveProps(nextProps) {\r\n//         this.setState({\r\n//             token: nextProps.token\r\n//         });\r\n//     }\r\n\r\n//     async addTag(tagValue, currentComponent) {\r\n//         const url = MuhalikConfig.PATH + '/api/categories/tag';\r\n//         let data = []\r\n//         data = { label: tagValue, value: tagValue }\r\n//         await axios.post(url, {\r\n//             data\r\n//         }, {\r\n//             headers: { 'authorization': this.state.token }\r\n//         }).then(function (response) {\r\n//             currentComponent.setState({ isLoading: false })\r\n//             currentComponent.setState({ showModalMessage: 'Product Tag Added Successfully' })\r\n//             currentComponent.setState({ showModal: true })\r\n//         }).catch(function (error) {\r\n//             currentComponent.setState({ isLoading: false });\r\n//             console.log('Error: ', error.response.data.message);\r\n//         });\r\n//     }\r\n\r\n//     handleFilterStrChange(e) {\r\n//         this.setState({ filterStr: e.target.value });\r\n//         if (e.target.value == '') {\r\n//             this.setState({ tagList: tagArray });\r\n//         } else {\r\n//             let array = [];\r\n//             this.state.tagList.filter(function (data) {\r\n//                 // var value = data.value.toLowerCase;\r\n//                 if (data.value.includes(e.target.value)) {\r\n//                     array.push(data);\r\n//                 }\r\n//             })\r\n//             this.setState({ tagList: array });\r\n//         }\r\n//     }\r\n\r\n//     async handleSubmit() {\r\n//         if (this.state.tagValue == '') {\r\n//             this.setState({ error: 'Enter Value First' })\r\n//         } else {\r\n//             this.setState({ isLoading: true })\r\n//             this.setState({ error: '' })\r\n//             this.addTag(this.state.tagValue, this)\r\n//         }\r\n//     }\r\n\r\n\r\n\r\n//     // Tag Request \r\n//     // => Field Value \r\n//     handleTagRequestChange = (e, index) => {\r\n//         let copyArray = [];\r\n//         copyArray = Object.assign([], this.state.tagRequestList);\r\n//         copyArray[index].value = e.target.value;\r\n\r\n//         if (e.target.value != '' && e.target.value.length <= 20 && e.target.value.length >= 3) {\r\n//             copyArray[index].error = ''\r\n//         } else {\r\n//             copyArray[index].error = 'Value must be 3-20 characters'\r\n//         }\r\n//         this.setState({ tagRequestList: copyArray })\r\n//     }\r\n//     //  => Edit\r\n//     async handleEditTagRequestClick(index) {\r\n//         let copyArray = [];\r\n//         copyArray = Object.assign([], this.state.tagRequestList);\r\n//         var obj = {};\r\n//         obj['value'] = copyArray[index].value;\r\n//         obj['label'] = false;\r\n//         obj['prevVal'] = copyArray[index].value;\r\n//         obj['error'] = '';\r\n//         copyArray[index] = obj\r\n//         await this.setState({ tagRequestList: copyArray })\r\n//     }\r\n//     //  => Cancle\r\n//     handleCancelTagRequestClick(index) {\r\n//         let copyArray = [];\r\n//         copyArray = Object.assign([], this.state.tagRequestList);\r\n//         copyArray[index].value = copyArray[index].prevVal;\r\n//         copyArray[index].label = true;\r\n//         copyArray[index].error = '';\r\n//         this.setState({ tagRequestList: copyArray })\r\n//     }\r\n//     // Update\r\n//     handleUpdateTagRequestClick(index) {\r\n//         let copyArray = [];\r\n//         copyArray = Object.assign([], this.state.tagRequestList);\r\n//         if (copyArray[index].value == copyArray[index].prevVal) {\r\n//             copyArray[index].error = 'Enter Different Value';\r\n//             this.setState({ tagRequestList: copyArray });\r\n//         } else {\r\n//             if (copyArray[index].error == '') {\r\n//                 copyArray[index].label = true;\r\n//                 this.setState({ tagRequestList: copyArray, showModalMessage: 'Product Tag Updated Successfully', showModal: true });\r\n//             }\r\n//         }\r\n//     }\r\n//     //  => Add\r\n//     handleAddTagRequestClick(index) {\r\n//         let copyArray = [];\r\n//         copyArray = Object.assign([], this.state.tagRequestList);\r\n//         copyArray.splice(index, 1);\r\n//         this.setState({ tagRequestList: copyArray, showModalMessage: 'Product Tag Added Successfully', showModal: true })\r\n//         this.addTag(copyArray[index].value, this)\r\n//     }\r\n//     //  => Delete\r\n//     handleDeleteTagRequestClick(index) {\r\n//         let copyArray = [];\r\n//         copyArray = Object.assign([], this.state.tagRequestList);\r\n//         copyArray.splice(index, 1);\r\n//         this.setState({ tagRequestList: copyArray, showModalMessage: 'Product Tag Deleted', showModal: true })\r\n//     }\r\n\r\n\r\n\r\n\r\n\r\n\r\n//     // All tags\r\n//     //  => Chane\r\n//     handleTagChange = (e, index) => {\r\n//         let copyArray = [];\r\n//         copyArray = Object.assign([], this.state.tagList);\r\n//         copyArray[index].value = e.target.value;\r\n\r\n//         if (e.target.value != '' && e.target.value.length <= 20 && e.target.value.length >= 3) {\r\n//             copyArray[index].error = ''\r\n//         } else {\r\n//             copyArray[index].error = 'Value must be 3-20 characters'\r\n//         }\r\n//         this.setState({ tagList: copyArray })\r\n//     }\r\n\r\n//     //  => Edit\r\n//     async handleEditTagClick(index) {\r\n//         let copyArray = [];\r\n//         copyArray = Object.assign([], this.state.tagList);\r\n//         var obj = {};\r\n//         obj['value'] = copyArray[index].value;\r\n//         obj['label'] = false;\r\n//         obj['prevVal'] = copyArray[index].value;\r\n//         obj['error'] = '';\r\n//         copyArray[index] = obj\r\n//         await this.setState({ tagList: copyArray })\r\n//     }\r\n//     //  => Cancle\r\n//     handleCancelTagClick(index) {\r\n//         let copyArray = [];\r\n//         copyArray = Object.assign([], this.state.tagList);\r\n//         copyArray[index].value = copyArray[index].prevVal;\r\n//         copyArray[index].error = '';\r\n//         copyArray[index].label = true;\r\n//         this.setState({ tagList: copyArray })\r\n//     }\r\n//     //  => Update\r\n//     handleUpdateTagClick(index) {\r\n//         let copyArray = [];\r\n//         copyArray = Object.assign([], this.state.tagList);\r\n//         if (copyArray[index].value == copyArray[index].prevVal) {\r\n//             copyArray[index].error = 'Enter Different Value';\r\n//             this.setState({ tagRequestList: copyArray });\r\n//         } else {\r\n//             if (copyArray[index].error == '') {\r\n//                 copyArray[index].label = true;\r\n//                 tagArray.forEach((element, i) => {\r\n//                     if (copyArray[index].prevVal == element.value) {\r\n//                         element.value = copyArray[index].value;\r\n//                     }\r\n//                 });\r\n//                 this.setState({ tagList: copyArray, showModalMessage: 'Product Tag Updated Successfully', showModal: true });\r\n//             }\r\n//         }\r\n//     }\r\n//     //  => Delete\r\n//     handleDeleteTagClick = (index) => {\r\n//         let copyArray = [];\r\n//         copyArray = Object.assign([], this.state.tagList);\r\n//         tagArray.forEach((element, i) => {\r\n//             if (copyArray[index].value == element.value) {\r\n//                 tagArray.splice(index, 1);\r\n//             }\r\n//         });\r\n//         copyArray.splice(index, 1);\r\n//         this.setState({ tagList: copyArray, showModalMessage: 'Product Tag Deleted', showModal: true })\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <>\r\n//                 <AlertModal\r\n//                     onHide={(e) => this.setState({ showModal: false })}\r\n//                     show={this.state.showModal}\r\n//                     header={'Success'}\r\n//                     message={this.state.showModalMessage}\r\n//                     iconname={faThumbsUp}\r\n//                     color={\"#00b300\"}\r\n//                 />\r\n\r\n//                 <TitleRow icon={faListAlt} title={' Admin Dashboard / Product Tags'} />\r\n\r\n//                 {/* Add New Tag */}\r\n//                 <CardAccordion title={'Add New Tag'}>\r\n//                     <Form.Group>\r\n//                         <InputGroup>\r\n//                             <Form.Control\r\n//                                 type=\"text\"\r\n//                                 size=\"sm\"\r\n//                                 placeholder=\"Enter Tag Value\"\r\n//                                 name=\"sku\"\r\n//                                 value={this.state.tagValue}\r\n//                                 onChange={(e) => this.setState({ tagValue: e.target.value })}\r\n//                                 isInvalid={this.state.error}\r\n//                             />\r\n//                             <Form.Control.Feedback type=\"invalid\">\r\n//                                 {this.state.error}\r\n//                             </Form.Control.Feedback>\r\n//                         </InputGroup>\r\n//                     </Form.Group>\r\n//                     <Form.Group>\r\n//                         <Button type=\"submit\" size=\"sm\" onClick={this.handleSubmit.bind(this)} disabled={this.state.isLoading} block style={styles.submit_btn}>\r\n//                             {this.state.isLoading ? 'Uploading' : 'Add Tag'}\r\n//                             {this.state.isLoading ? <Spinner animation=\"grow\" size=\"sm\" /> : null}\r\n//                         </Button>\r\n//                     </Form.Group>\r\n//                 </CardAccordion>\r\n\r\n//                 {/* Add Tag Requests */}\r\n//                 <CardAccordion title={'Add Tag Requests'}>\r\n//                     {this.state.tagRequestList.map((element, index) =>\r\n//                         <Form.Row>\r\n//                             <Form.Group as={Col} lg={2} md={2} sm={3} xs={12}>\r\n//                                 <Form.Control\r\n//                                     type=\"text\"\r\n//                                     size=\"sm\"\r\n//                                     name=\"sku\"\r\n//                                     value={element.entry_date}\r\n//                                     disabled={true}\r\n//                                 />\r\n//                             </Form.Group>\r\n//                             <Form.Group as={Col} lg={2} md={2} sm={3} xs={12}>\r\n//                                 <Form.Control\r\n//                                     type=\"text\"\r\n//                                     size=\"sm\"\r\n//                                     name=\"sku\"\r\n//                                     value={element.entry_date}\r\n//                                     disabled={true}\r\n//                                 />\r\n//                             </Form.Group>\r\n//                             <div className=\"mr-auto\"></div>\r\n//                             <Form.Group as={Col} lg={4} md={4} sm={6} xs={12}>\r\n//                                 <InputGroup>\r\n//                                     <Form.Control\r\n//                                         type=\"text\"\r\n//                                         size=\"sm\"\r\n//                                         placeholder=\"Enter Tag Value\"\r\n//                                         name=\"sku\"\r\n//                                         value={element.value}\r\n//                                         onChange={(e) => this.handleTagRequestChange(e, index)}\r\n//                                         isInvalid={element.error}\r\n//                                         disabled={element.label}\r\n//                                     />\r\n//                                     <Form.Control.Feedback type=\"invalid\">\r\n//                                         {element.error}\r\n//                                     </Form.Control.Feedback>\r\n//                                 </InputGroup>\r\n//                             </Form.Group>\r\n//                             <div className=\"mr-auto\"></div>\r\n//                             <Form.Group as={Col} lg=\"auto\" md=\"auto\" sm=\"auto\" xs=\"auto\">\r\n//                                 <Button type=\"submit\" variant=\"outline-success\" size=\"sm\" block style={styles.submit_btn}\r\n//                                     onClick={() => element.label ? this.handleEditTagRequestClick(index) : this.handleUpdateTagRequestClick(index)} >\r\n//                                     <div>{element.label ? 'Edit' : 'Update'}</div>\r\n//                                 </Button>\r\n//                             </Form.Group>\r\n//                             <Form.Group as={Col} lg=\"auto\" md=\"auto\" sm=\"auto\" xs=\"auto\">\r\n//                                 <Button type=\"submit\" variant=\"outline-primary\" size=\"sm\" block style={styles.submit_btn}\r\n//                                     onClick={() => { element.label ? this.handleAddTagRequestClick(index) : this.handleCancelTagRequestClick(index) }}>\r\n//                                     <div>{element.label ? 'Add' : 'Cancel'}</div>\r\n//                                 </Button>\r\n//                             </Form.Group>\r\n//                             <div className=\"mr-auto\"></div>\r\n//                             <Form.Group as={Col} lg=\"auto\" md=\"auto\" sm=\"auto\" xs=\"auto\">\r\n//                                 <Button type=\"submit\" variant=\"outline-danger\" size=\"sm\" block style={styles.submit_btn}\r\n//                                     onClick={() => this.handleDeleteTagRequestClick(index)}>\r\n//                                     <div>Discard</div>\r\n//                                 </Button>\r\n//                             </Form.Group>\r\n\r\n//                         </Form.Row>\r\n//                     )}\r\n//                 </CardAccordion>\r\n\r\n//                 {/* All Tags */}\r\n//                 <CardAccordion title={'All Tags'}>\r\n//                     <Form.Row style={{ margin: '0% 5%' }}>\r\n//                         <Form.Group as={Col}>\r\n//                             <InputGroup>\r\n//                                 <Form.Control\r\n//                                     type=\"text\"\r\n//                                     size=\"sm\"\r\n//                                     placeholder=\"Enter Tag Value\"\r\n//                                     name=\"sku\"\r\n//                                     value={this.state.filterStr}\r\n//                                     onChange={(e) => this.handleFilterStrChange(e)}\r\n//                                 />\r\n//                             </InputGroup>\r\n//                         </Form.Group>\r\n//                     </Form.Row>\r\n//                     <hr />\r\n//                     {this.state.tagList.map((element, index) =>\r\n//                         <Form.Row>\r\n//                             <Form.Group as={Col} lg={2} md={2} sm={6} xs={12}>\r\n//                                 <Form.Control\r\n//                                     type=\"text\"\r\n//                                     size=\"sm\"\r\n//                                     name=\"sku\"\r\n//                                     value={element.entry_date}\r\n//                                     disabled={true}\r\n//                                 />\r\n//                             </Form.Group>\r\n//                             <div className=\"mr-auto\"></div>\r\n//                             <Form.Group as={Col} lg={6} md={6} sm={6} xs={12}>\r\n//                                 <InputGroup>\r\n//                                     <Form.Control\r\n//                                         type=\"text\"\r\n//                                         size=\"sm\"\r\n//                                         placeholder=\"Enter Tag Value\"\r\n//                                         name=\"sku\"\r\n//                                         value={element.value}\r\n//                                         onChange={(e) => this.handleTagChange(e, index)}\r\n//                                         disabled={element.label}\r\n//                                         isInvalid={element.error}\r\n//                                     />\r\n//                                     <Form.Control.Feedback type=\"invalid\">\r\n//                                         {element.error}\r\n//                                     </Form.Control.Feedback>\r\n//                                 </InputGroup>\r\n//                             </Form.Group>\r\n//                             <div className=\"mr-auto\"></div>\r\n//                             <Form.Group as={Col} lg=\"auto\" md=\"auto\" sm=\"auto\" xs=\"auto\">\r\n//                                 <Button type=\"submit\" variant=\"outline-success\" size=\"sm\" block style={styles.submit_btn}\r\n//                                     onClick={element.label ? () => this.handleEditTagClick(index) : () => this.handleUpdateTagClick(index)} >\r\n//                                     <div>{element.label ? 'Edit' : 'Update'}</div>\r\n//                                 </Button>\r\n//                             </Form.Group>\r\n//                             <div className=\"mr-auto\"></div>\r\n//                             <Form.Group as={Col} lg=\"auto\" md=\"auto\" sm=\"auto\" xs=\"auto\">\r\n//                                 <Button type=\"submit\" variant={element.label ? \"outline-danger\" : \"outline-primary\"} size=\"sm\" block style={styles.submit_btn}\r\n//                                     onClick={element.label ? () => this.handleDeleteTagClick(index) : () => this.handleCancelTagClick(index)}>\r\n//                                     <div>{element.label ? 'Delete' : 'Cancel'}</div>\r\n//                                 </Button>\r\n//                             </Form.Group>\r\n\r\n//                         </Form.Row>\r\n//                     )}\r\n//                 </CardAccordion>\r\n//             </>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// const styles = {\r\n//     title_row: {\r\n//         borderBottom: '1px solid gray',\r\n//         padding: '1.5% 4%'\r\n//     },\r\n//     title_fontawesome: {\r\n//         color: 'gray',\r\n//         marginRight: '3%',\r\n//         width: '26px',\r\n//         height: '26px',\r\n//         maxHeight: '26px',\r\n//         maxWidth: '26px',\r\n//     },\r\n//     title: {\r\n//         color: 'gray'\r\n//     },\r\n\r\n//     card: {\r\n//         // width: '100%',\r\n//         margin: '2%'\r\n//     },\r\n//     card_body: {\r\n//         // padding: '5%'\r\n//     },\r\n//     label: {\r\n//         fontSize: `${GlobalStyleSheet.form_label_fontsize}`\r\n//     },\r\n//     error: {\r\n//         width: '100%',\r\n//         textAlign: 'center',\r\n//         color: '#DC3545',\r\n//         fontSize: '14px',\r\n//     },\r\n//     accordin_fontawesome: {\r\n//         color: `${GlobalStyleSheet.admin_primry_color}`,\r\n//         marginRight: '10%',\r\n//         width: '15px',\r\n//         height: '15px',\r\n//         maxHeight: '15px',\r\n//         maxWidth: '15px',\r\n//     },\r\n// }\r\n// export default ProducTags\r\n\r\nconst ProducTags = () => {\r\n    <div>Comented</div>\r\n}\r\nexport default ProducTags\r\n"]},"metadata":{},"sourceType":"module"}