{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport { Navbar, Container, Form, Col, Row, InputGroup, Button } from 'react-bootstrap';\nimport React, { Component } from 'react';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport GlobalStyleSheet from '../styleSheet';\nconst styles = {\n  submit_btn: {\n    // background: `${GlobalStyleSheet.primry_color}`,\n    // background: 'white',\n    border: 'none' // marginTop: '50px',\n\n  },\n  container: {\n    background: `${GlobalStyleSheet.primry_color}`,\n    // border: `2px solid ${GlobalStyleSheet.primry_color}`,\n    marginTop: '50px',\n    padding: '20px 30px'\n  },\n  label: {\n    color: `${GlobalStyleSheet.primary_text_color}`,\n    marginRight: '10px'\n  }\n};\nconst schema = yup.object({\n  firstName: yup.string().required(),\n  lastName: yup.string().required(),\n  username: yup.string().required(),\n  city: yup.string().required(),\n  state: yup.string().required(),\n  zip: yup.string().required(),\n  terms: yup.bool().required()\n});\n\nfunction SignupForm() {\n  return __jsx(Formik, {\n    validationSchema: schema,\n    onSubmit: console.log,\n    initialValues: {\n      firstName: 'Mark',\n      lastName: 'Otto'\n    }\n  }, ({\n    handleSubmit,\n    handleChange,\n    handleBlur,\n    values,\n    touched,\n    isValid,\n    errors\n  }) => __jsx(Form, {\n    noValidate: true,\n    onSubmit: handleSubmit\n  }, __jsx(Form.Row, null, __jsx(Form.Group, {\n    as: Col,\n    md: \"4\",\n    controlId: \"validationFormik01\"\n  }, __jsx(Form.Label, null, \"First name\"), __jsx(Form.Control, {\n    type: \"text\",\n    name: \"firstName\",\n    value: values.firstName,\n    onChange: handleChange,\n    isValid: touched.firstName && !errors.firstName\n  }), __jsx(Form.Control.Feedback, null, \"Looks good!\")), __jsx(Form.Group, {\n    as: Col,\n    md: \"4\",\n    controlId: \"validationFormik02\"\n  }, __jsx(Form.Label, null, \"Last name\"), __jsx(Form.Control, {\n    type: \"text\",\n    name: \"lastName\",\n    value: values.lastName,\n    onChange: handleChange,\n    isValid: touched.lastName && !errors.lastName\n  }), __jsx(Form.Control.Feedback, null, \"Looks good!\")), __jsx(Form.Group, {\n    as: Col,\n    md: \"4\",\n    controlId: \"validationFormikUsername\"\n  }, __jsx(Form.Label, null, \"Username\"), __jsx(InputGroup, null, __jsx(InputGroup.Prepend, null, __jsx(InputGroup.Text, {\n    id: \"inputGroupPrepend\"\n  }, \"@\")), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Username\",\n    \"aria-describedby\": \"inputGroupPrepend\",\n    name: \"username\",\n    value: values.username,\n    onChange: handleChange,\n    isInvalid: !!errors.username\n  }), __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, errors.username)))), __jsx(Form.Row, null, __jsx(Form.Group, {\n    as: Col,\n    md: \"6\",\n    controlId: \"validationFormik03\"\n  }, __jsx(Form.Label, null, \"City\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"City\",\n    name: \"city\",\n    value: values.city,\n    onChange: handleChange,\n    isInvalid: !!errors.city\n  }), __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, errors.city)), __jsx(Form.Group, {\n    as: Col,\n    md: \"3\",\n    controlId: \"validationFormik04\"\n  }, __jsx(Form.Label, null, \"State\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"State\",\n    name: \"state\",\n    value: values.state,\n    onChange: handleChange,\n    isInvalid: !!errors.state\n  }), __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, errors.state)), __jsx(Form.Group, {\n    as: Col,\n    md: \"3\",\n    controlId: \"validationFormik05\"\n  }, __jsx(Form.Label, null, \"Zip\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Zip\",\n    name: \"zip\",\n    value: values.zip,\n    onChange: handleChange,\n    isInvalid: !!errors.zip\n  }), __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, errors.zip))), __jsx(Form.Group, null, __jsx(Form.Check, {\n    required: true,\n    name: \"terms\",\n    label: \"Agree to terms and conditions\",\n    onChange: handleChange,\n    isInvalid: !!errors.terms,\n    feedback: errors.terms,\n    id: \"validationFormik0\"\n  })), __jsx(Button, {\n    type: \"submit\"\n  }, \"Submit form\")));\n}\n\nclass VendorSignup extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {});\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(Navbar, {\n      variant: \"dark\",\n      style: {\n        background: `${GlobalStyleSheet.primry_color}`\n      }\n    }, __jsx(Navbar.Brand, {\n      href: \"/\",\n      className: \"mr-auto\"\n    }, \" Muhalik    \")), __jsx(Container, {\n      style: {\n        padding: '0px 50px'\n      }\n    }, __jsx(Row, null, __jsx(Col, {\n      lg: 1,\n      md: 1,\n      sm: 1\n    }), __jsx(Col, {\n      lg: 10,\n      md: 10,\n      sm: 10,\n      style: styles.container\n    }, __jsx(SignupForm, null)), __jsx(Col, {\n      lg: 1,\n      md: 1,\n      sm: 1\n    }))));\n  }\n\n}\n\nexport default VendorSignup;","map":null,"metadata":{},"sourceType":"module"}