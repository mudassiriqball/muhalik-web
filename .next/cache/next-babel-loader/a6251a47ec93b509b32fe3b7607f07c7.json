{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Form, Row, Col, Card, InputGroup, Button, Spinner } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faListAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-regular-svg-icons';\nimport React, { Component } from 'react';\nimport MuhalikConfig from '../../../../../../sdk/muhalik.config';\nimport axios from 'axios';\n\nvar ProducCategories = /*#__PURE__*/function (_Component) {\n  _inherits(ProducCategories, _Component);\n\n  var _super = _createSuper(ProducCategories);\n\n  function ProducCategories(props) {\n    var _this;\n\n    _classCallCheck(this, ProducCategories);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isLoading: false,\n      showToast: false,\n      categoryValue: '',\n      error: '',\n      categoryList: []\n    };\n    return _this;\n  } // Getting Product Categories from DB\n\n\n  _createClass(ProducCategories, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var url, response;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              url = MuhalikConfig.PATH + '/api/products-categories/get-all';\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(axios.get(url));\n\n            case 4:\n              response = _context.sent;\n              this.setState({\n                categoryList: response.data.data\n              });\n              console.log('list:', response);\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[1, 9]], Promise);\n    }\n  }, {\n    key: \"addCategory\",\n    value: function addCategory() {\n      return _regeneratorRuntime.async(function addCategory$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // const url = MuhalikConfig.PATH + '/api/products/add';\n              // await axios.post(url, {\n              // this.state.categoryValue\n              // }, {\n              //     headers: { 'authorization': await getUncodededTokenFromStorage() }\n              // }).then(function (response) {\n              this.setState({\n                isLoading: true\n              });\n              this.setState({\n                showToast: true\n              });\n              return _context2.abrupt(\"return\", true);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      if (categoryValue == '') {\n        this.setState({\n          error: 'Enter Value First'\n        });\n      } else {\n        this.setState({\n          isLoading: true\n        });\n        this.setState({\n          error: ''\n        });\n        this.addCategory(this);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // const [isLoading, setIsLoading] = React.useState(false);\n      // const [showToast, setShowToast] = React.useState(false);\n      // const [categoryValue, setCategoryValue] = React.useState('');\n      // const [error, setError] = React.useState('');\n      return __jsx(React.Fragment, null, __jsx(Row, {\n        style: styles.title_row,\n        noGutters: true\n      }, __jsx(FontAwesomeIcon, {\n        icon: faListAlt,\n        style: styles.title_fontawesome\n      }), __jsx(\"div\", {\n        className: \"mr-auto\",\n        style: styles.title\n      }, \" Product Categories \")), __jsx(Row, {\n        noGutters: true\n      }, __jsx(Card, {\n        style: styles.card\n      }, __jsx(Card.Header, null, __jsx(\"div\", null, \"Add Category Requests\")), __jsx(Card.Body, {\n        style: styles.card_body\n      }, this.state.categoryList.map(function (data) {\n        return __jsx(Form.Row, null, __jsx(Form.Group, {\n          as: Col,\n          lg: 6,\n          md: 6,\n          sm: 6,\n          xs: 12\n        }, __jsx(InputGroup, null, __jsx(Form.Control, {\n          type: \"text\",\n          size: \"sm\",\n          placeholder: \"Enter Category Value\",\n          name: \"sku\",\n          value: data.label,\n          onChange: function onChange(e) {\n            _this2.setState({\n              categoryValue: e.target.value\n            });\n          },\n          isInvalid: _this2.state.error\n        }), __jsx(Form.Control.Feedback, {\n          type: \"invalid\"\n        }, _this2.state.error))), __jsx(Form.Group, {\n          as: Col,\n          lg: 2,\n          md: 2,\n          sm: 2,\n          xs: 4\n        }, __jsx(Button, {\n          type: \"submit\",\n          variant: \"outline-primary\",\n          size: \"sm\",\n          onClick: _this2.handleSubmit.bind(_this2),\n          disabled: _this2.state.isLoading,\n          block: true,\n          style: styles.submit_btn\n        }, \"Edit\")), __jsx(Form.Group, {\n          as: Col,\n          lg: 2,\n          md: 2,\n          sm: 2,\n          xs: 4\n        }, __jsx(Button, {\n          type: \"submit\",\n          variant: \"outline-danger\",\n          size: \"sm\",\n          onClick: _this2.handleSubmit.bind(_this2),\n          disabled: _this2.state.isLoading,\n          block: true,\n          style: styles.submit_btn\n        }, \"Discard\")), __jsx(Form.Group, {\n          as: Col,\n          lg: 2,\n          md: 2,\n          sm: 2,\n          xs: 4\n        }, __jsx(Button, {\n          type: \"submit\",\n          variant: \"outline-success\",\n          size: \"sm\",\n          onClick: _this2.handleSubmit.bind(_this2),\n          disabled: _this2.state.isLoading,\n          block: true,\n          style: styles.submit_btn\n        }, \"Add\")));\n      })))), __jsx(Row, {\n        noGutters: true\n      }, __jsx(Card, {\n        style: styles.card\n      }, __jsx(Card.Header, null, __jsx(\"div\", null, \"Add Category\")), __jsx(Card.Body, {\n        style: styles.card_body\n      }, __jsx(Form.Group, null, __jsx(InputGroup, null, __jsx(Form.Control, {\n        type: \"text\",\n        size: \"sm\",\n        placeholder: \"Enter Category Value\",\n        name: \"sku\",\n        value: this.state.categoryValue,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            categoryValue: e.target.value\n          });\n        },\n        isInvalid: this.state.error\n      }), __jsx(Form.Control.Feedback, {\n        type: \"invalid\"\n      }, this.state.error))), __jsx(Form.Group, null, __jsx(Button, {\n        type: \"submit\",\n        size: \"sm\",\n        onClick: this.handleSubmit.bind(this),\n        disabled: this.state.isLoading,\n        block: true,\n        style: styles.submit_btn\n      }, this.state.isLoading ? 'Uploading' : 'Add Category', this.state.isLoading ? __jsx(Spinner, {\n        animation: \"grow\",\n        size: \"sm\"\n      }) : null))))));\n    }\n  }]);\n\n  return ProducCategories;\n}(Component);\n\nvar styles = {\n  title_row: {\n    borderBottom: '1px solid gray',\n    padding: '1.5% 4%'\n  },\n  title_fontawesome: {\n    color: 'gray',\n    marginRight: '3%',\n    width: '26px',\n    height: '26px',\n    maxHeight: '26px',\n    maxWidth: '26px'\n  },\n  title: {\n    color: 'gray'\n  },\n  card: {\n    width: '100%',\n    margin: '2%'\n  },\n  card_body: {// padding: '5%'\n  },\n  error: {\n    width: '100%',\n    textAlign: 'center',\n    color: '#DC3545',\n    fontSize: '14px'\n  }\n};\nexport default ProducCategories;","map":null,"metadata":{},"sourceType":"module"}