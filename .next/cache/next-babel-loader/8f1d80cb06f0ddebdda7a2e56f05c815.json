{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport chroma from 'chroma-js';\nimport { colourOptions } from '../data';\nimport Select from 'react-select';\nconst colourStyles = {\n  control: styles => _objectSpread({}, styles, {\n    backgroundColor: 'white'\n  }),\n  option: (styles, {\n    data,\n    isDisabled,\n    isFocused,\n    isSelected\n  }) => {\n    const color = chroma(data.color);\n    return _objectSpread({}, styles, {\n      backgroundColor: isDisabled ? null : isSelected ? data.color : isFocused ? color.alpha(0.1).css() : null,\n      color: isDisabled ? '#ccc' : isSelected ? chroma.contrast(color, 'white') > 2 ? 'white' : 'black' : data.color,\n      cursor: isDisabled ? 'not-allowed' : 'default',\n      ':active': _objectSpread({}, styles[':active'], {\n        backgroundColor: !isDisabled && (isSelected ? data.color : color.alpha(0.3).css())\n      })\n    });\n  },\n  multiValue: (styles, {\n    data\n  }) => {\n    const color = chroma(data.color);\n    return _objectSpread({}, styles, {\n      backgroundColor: color.alpha(0.1).css()\n    });\n  },\n  multiValueLabel: (styles, {\n    data\n  }) => _objectSpread({}, styles, {\n    color: data.color\n  }),\n  multiValueRemove: (styles, {\n    data\n  }) => _objectSpread({}, styles, {\n    color: data.color,\n    ':hover': {\n      backgroundColor: data.color,\n      color: 'white'\n    }\n  })\n};\nexport default (() => __jsx(Select, {\n  closeMenuOnSelect: false,\n  defaultValue: [colourOptions[0], colourOptions[1]],\n  isMulti: true,\n  options: colourOptions,\n  styles: colourStyles\n}));","map":{"version":3,"sources":["C:/Users/MudassirR/Desktop/FYP/muhalikweb/pages/components/vendor/dashboard/dashboard-tabs-content/orders.js"],"names":["React","chroma","colourOptions","Select","colourStyles","control","styles","backgroundColor","option","data","isDisabled","isFocused","isSelected","color","alpha","css","contrast","cursor","multiValue","multiValueLabel","multiValueRemove"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,SAASC,aAAT,QAA8B,SAA9B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAEC,MAAM,sBAAUA,MAAV;AAAkBC,IAAAA,eAAe,EAAE;AAAnC,IADI;AAEnBC,EAAAA,MAAM,EAAE,CAACF,MAAD,EAAS;AAAEG,IAAAA,IAAF;AAAQC,IAAAA,UAAR;AAAoBC,IAAAA,SAApB;AAA+BC,IAAAA;AAA/B,GAAT,KAAyD;AAC/D,UAAMC,KAAK,GAAGZ,MAAM,CAACQ,IAAI,CAACI,KAAN,CAApB;AACA,6BACKP,MADL;AAEEC,MAAAA,eAAe,EAAEG,UAAU,GACvB,IADuB,GAEvBE,UAAU,GACVH,IAAI,CAACI,KADK,GAEVF,SAAS,GACTE,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,EADS,GAET,IARN;AASEF,MAAAA,KAAK,EAAEH,UAAU,GACb,MADa,GAEbE,UAAU,GACVX,MAAM,CAACe,QAAP,CAAgBH,KAAhB,EAAuB,OAAvB,IAAkC,CAAlC,GACE,OADF,GAEE,OAHQ,GAIVJ,IAAI,CAACI,KAfX;AAgBEI,MAAAA,MAAM,EAAEP,UAAU,GAAG,aAAH,GAAmB,SAhBvC;AAkBE,mCACKJ,MAAM,CAAC,SAAD,CADX;AAEEC,QAAAA,eAAe,EAAE,CAACG,UAAD,KAAgBE,UAAU,GAAGH,IAAI,CAACI,KAAR,GAAgBA,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,EAA1C;AAFnB;AAlBF;AAuBD,GA3BkB;AA4BnBG,EAAAA,UAAU,EAAE,CAACZ,MAAD,EAAS;AAAEG,IAAAA;AAAF,GAAT,KAAsB;AAChC,UAAMI,KAAK,GAAGZ,MAAM,CAACQ,IAAI,CAACI,KAAN,CAApB;AACA,6BACKP,MADL;AAEEC,MAAAA,eAAe,EAAEM,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB;AAFnB;AAID,GAlCkB;AAmCnBI,EAAAA,eAAe,EAAE,CAACb,MAAD,EAAS;AAAEG,IAAAA;AAAF,GAAT,uBACZH,MADY;AAEfO,IAAAA,KAAK,EAAEJ,IAAI,CAACI;AAFG,IAnCE;AAuCnBO,EAAAA,gBAAgB,EAAE,CAACd,MAAD,EAAS;AAAEG,IAAAA;AAAF,GAAT,uBACbH,MADa;AAEhBO,IAAAA,KAAK,EAAEJ,IAAI,CAACI,KAFI;AAGhB,cAAU;AACRN,MAAAA,eAAe,EAAEE,IAAI,CAACI,KADd;AAERA,MAAAA,KAAK,EAAE;AAFC;AAHM;AAvCC,CAArB;AAiDA,gBAAe,MACb,MAAC,MAAD;AACE,EAAA,iBAAiB,EAAE,KADrB;AAEE,EAAA,YAAY,EAAE,CAACX,aAAa,CAAC,CAAD,CAAd,EAAmBA,aAAa,CAAC,CAAD,CAAhC,CAFhB;AAGE,EAAA,OAAO,MAHT;AAIE,EAAA,OAAO,EAAEA,aAJX;AAKE,EAAA,MAAM,EAAEE;AALV,EADF","sourcesContent":["import React from 'react';\r\nimport chroma from 'chroma-js';\r\n\r\nimport { colourOptions } from '../data';\r\nimport Select from 'react-select';\r\n\r\nconst colourStyles = {\r\n  control: styles => ({ ...styles, backgroundColor: 'white' }),\r\n  option: (styles, { data, isDisabled, isFocused, isSelected }) => {\r\n    const color = chroma(data.color);\r\n    return {\r\n      ...styles,\r\n      backgroundColor: isDisabled\r\n        ? null\r\n        : isSelected\r\n        ? data.color\r\n        : isFocused\r\n        ? color.alpha(0.1).css()\r\n        : null,\r\n      color: isDisabled\r\n        ? '#ccc'\r\n        : isSelected\r\n        ? chroma.contrast(color, 'white') > 2\r\n          ? 'white'\r\n          : 'black'\r\n        : data.color,\r\n      cursor: isDisabled ? 'not-allowed' : 'default',\r\n\r\n      ':active': {\r\n        ...styles[':active'],\r\n        backgroundColor: !isDisabled && (isSelected ? data.color : color.alpha(0.3).css()),\r\n      },\r\n    };\r\n  },\r\n  multiValue: (styles, { data }) => {\r\n    const color = chroma(data.color);\r\n    return {\r\n      ...styles,\r\n      backgroundColor: color.alpha(0.1).css(),\r\n    };\r\n  },\r\n  multiValueLabel: (styles, { data }) => ({\r\n    ...styles,\r\n    color: data.color,\r\n  }),\r\n  multiValueRemove: (styles, { data }) => ({\r\n    ...styles,\r\n    color: data.color,\r\n    ':hover': {\r\n      backgroundColor: data.color,\r\n      color: 'white',\r\n    },\r\n  }),\r\n};\r\n\r\nexport default () => (\r\n  <Select\r\n    closeMenuOnSelect={false}\r\n    defaultValue={[colourOptions[0], colourOptions[1]]}\r\n    isMulti\r\n    options={colourOptions}\r\n    styles={colourStyles}\r\n  />\r\n);"]},"metadata":{},"sourceType":"module"}