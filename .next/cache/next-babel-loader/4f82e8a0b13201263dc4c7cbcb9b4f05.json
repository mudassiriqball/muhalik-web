{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { OverlayTrigger, Popover } from 'react-bootstrap';\nimport React, { Component } from 'react';\nconst UpdatingPopover = React.forwardRef((_ref, ref) => {\n  let {\n    popper,\n    children,\n    show: _\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"popper\", \"children\", \"show\"]);\n\n  React.useEffect(() => {\n    console.log('updating!');\n    popper.scheduleUpdate();\n  }, [children, popper]);\n  return __jsx(Popover, _extends({\n    ref: ref,\n    content: true\n  }, props), children);\n});\nconst longContent = `\n  Very long\n  Multiline content\n  that is engaging and what-not\n`;\nconst shortContent = 'Short and sweet!';\n\nfunction OverlayPopover(props) {\n  const [content, setContent] = React.useState(shortContent);\n  React.useEffect(() => {\n    const timerId = setInterval(() => {\n      setContent(content === shortContent ? longContent : shortContent);\n    }, 3000);\n    return () => clearInterval(timerId);\n  });\n  return __jsx(OverlayTrigger, {\n    trigger: \"hover\",\n    overlay: __jsx(UpdatingPopover, {\n      id: \"popover-contained\"\n    }, content)\n  }, props.children);\n}\n\nexport default OverlayPopover;","map":null,"metadata":{},"sourceType":"module"}