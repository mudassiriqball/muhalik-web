{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Accordion, Form, Col, Row, Card, InputGroup, Button, Toast, Alert, Nav, Tabs, Spinner } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faArrowLeft, faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-regular-svg-icons';\nimport CreatableSelect from 'react-select/creatable';\nimport Select from 'react-select';\nimport AlertModal from '../../../../alert-modal';\nimport GlobalStyleSheet from '../../../../../../styleSheet';\nimport TitleRow from '../../../../title-row';\nimport CardAccordion from '../../../../card_accordion';\nimport MuhalikConfig from '../../../../../../sdk/muhalik.config';\nimport { getUncodededTokenFromStorage } from '../../../../../../sdk/core/authentication-service';\nimport CustomFields from './add-new-contents/custom-fields';\nimport ProductData from './add-new-contents/product-data';\nimport product_size_options from '../../../../../../sdk/consts/product-size-options';\nimport product_color_options from '../../../../../../sdk/consts/product-color-options'; // Option List for select Product Category (when offline)\n\nlet product_categories_options = [{\n  value: 'Shoe',\n  label: 'Shoe'\n}, {\n  value: 'Cloth',\n  label: 'Cloth'\n}, {\n  value: 'Shirt',\n  label: 'Shirt'\n}, {\n  value: 'Pant',\n  label: 'Pant'\n}];\nconst product_sub_categories_options = [{\n  value: 'Sub Shoe',\n  label: 'Sub Shoe'\n}, {\n  value: 'Sub Cloth',\n  label: 'Sub Cloth'\n}, {\n  value: 'Sub Shirt',\n  label: 'Sub Shirt'\n}]; // For React-Select\n\nconst components = {\n  DropdownIndicator: null\n}; // Model For React-Select\n\nconst createOption = label => ({\n  value: label,\n  label\n}); // Yup Schema for validation fields\n\n\nconst schema = yup.object({\n  product_name: yup.string().required(\"Enter Product Name\").min(2, \"Must have at least 2 characters\").max(40, \"Can't be longer than 40 characters\"),\n  product_description: yup.string().min(5, \"Must have at least 5 characters\").max(200, \"Can't be longer than 200 characters\"),\n  // Product Data\n  product_type: yup.string(),\n  // => Inventory\n  sku: yup.string().min(0, 'Enter Between 0-100').max(100, 'Enter Between 0-100'),\n  // => General(Simple-Product)\n  product_price: yup.number().integer(\"Enter Only Numbers\").positive('Enter Between 1-1000000').max(1000000, 'Enter Between 1-1000000'),\n  product_in_stock: yup.number().integer(\"Enter Only Numbers\").positive('Enter Between 1-1000000').max(1000000, \"Can't be longer than 1000000\"),\n  product_brand_name: yup.string().min(2, \"Must have at least 2 characters\").max(40, \"Can't be longer than 40 characters\"),\n  product_image_link: yup.string(),\n  product_warranty: yup.number().integer(\"Enter Only Numbers\").positive('Enter Between 1-1000').max(1000, 'Enter Between 0-1000'),\n  warranty_type: yup.string(),\n  product_discount: yup.number().integer(\"Enter Only Numbers\").positive('Enter Between 0-100').max(100, 'Enter Between 0-100'),\n  // => Attributes (Variable Product)\n  purchase_note: yup.string(),\n  // => Variations (Variable Product)\n  product_variations: yup.string(),\n  // => Shipping\n  product_weight: yup.number().integer(\"Enter Only Numbers\").positive('Enter Between 0-10000').max(10000, \"Can't be longer than 10000\"),\n  dimension_length: yup.number().integer(\"Enter Only Numbers\").positive('Enter Between 0-10000').max(10000, \"Can't be longer than 10000\"),\n  dimension_width: yup.number().integer(\"Enter Only Numbers\").positive('Enter Between 0-10000').max(10000, \"Can't be longer than 10000\"),\n  dimension_height: yup.number().integer(\"Enter Only Numbers\").positive('Enter Between 0-10000').max(10000, \"Can't be longer than 10000\"),\n  shipping_charges: yup.number(\"Enter Only Numbers\").positive('Enter Between 0-10000').max(10000, 'Enter Between 0-10000'),\n  handling_fee: yup.number().integer(\"Enter Only Numbers\").positive('Enter Between 0-10000').max(10000, \"Can't be longer than 1000\"),\n  // => Advanve\n  purchase_note: yup.string(),\n  // Custom Fields\n  custom_fields: yup.string(),\n  product_category: yup.string(),\n  product_sub_category: yup.string(),\n  dangerous_goods: yup.string(),\n  product_tags: yup.string()\n});\n\nclass AddNew extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleSimpleProductImage_linkKeyDown\", (event, inputValue) => {\n      const simple_product_image_link = this.state.simple_product_image_link;\n      if (!inputValue) return;\n\n      switch (event.key) {\n        case 'Enter':\n        case 'Tab':\n          this.setState({\n            simple_product_image_link: [...simple_product_image_link, createOption(inputValue)]\n          });\n          event.preventDefault();\n          return true;\n      }\n    });\n\n    _defineProperty(this, \"handleProductCategoryChange\", value => {\n      this.setState({\n        productCategories: value,\n        subCategoryDisabled: false,\n        categoryErrorDiv: 'BorderDiv'\n      });\n    });\n\n    _defineProperty(this, \"handleProductSubCategoryChange\", value => {\n      this.setState({\n        productSubCategories: value,\n        subSubCategoryDisabled: false,\n        subCategoryErrorDiv: 'BorderDiv'\n      });\n    });\n\n    _defineProperty(this, \"handleDangerousGoodsChange\", (e, name) => {\n      const copyArray = Object.assign([], this.state.dangerousGoodsArray);\n\n      if (e.target.checked) {\n        copyArray.push({\n          value: name\n        });\n      } else {\n        copyArray.forEach((element, index) => {\n          if (element.value == name) {\n            copyArray.splice(index, 1);\n          }\n        });\n      }\n\n      this.setState({\n        dangerousGoodsArray: copyArray\n      });\n    });\n\n    _defineProperty(this, \"handleProductTagChange\", arr => {\n      this.setState({\n        productTags: arr\n      });\n    });\n\n    _defineProperty(this, \"deleteImage\", index => {\n      const copyArray = Object.assign([], this.state.files);\n      const imgCopyArray = Object.assign([], this.state.imagePreviewArray);\n      copyArray.splice(index, 1);\n      imgCopyArray.splice(index, 1);\n      this.setState({\n        files: copyArray,\n        imagePreviewArray: imgCopyArray\n      });\n    });\n\n    this.state = {\n      isUpdateProduct: this.props.isUpdateProduct,\n      _id: this.props._id,\n      isLoading: false,\n      showToast: false,\n      toastMessage: '',\n      showVariationsErrorAlert: false,\n      showSimpleProductPriceImgLinkErrorrAlert: false,\n      isVariableProduct: this.props.isVariableProduct,\n      productCategories: this.props.productCategories,\n      productSubCategories: this.props.productSubCategories,\n      subCategoryDisabled: true,\n      categoryErrorDiv: 'BorderDiv',\n      subCategoryErrorDiv: 'BorderDiv',\n      productTags: this.props.productTags,\n      warrantyType: this.props.warrantyType,\n      inputValue: '',\n      simple_product_image_link: this.props.simple_product_image_link,\n      variationsArray: this.props.variationsArray,\n      isVariationsSaved: false,\n      // Custom Fields\n      customFieldsArray: [],\n      files: [],\n      imagePreviewArray: [],\n      // Dangerous Goods\n      dangerousGoodsArray: this.props.dangerousGoodsArray\n    }; // this.handleProductTypeChange = this.handleProductTypeChange.bind(this);\n  } // Getting Product Categories from DB\n\n\n  async componentDidMount() {\n    const url = MuhalikConfig.PATH + '/api/categories/categories';\n    const url_1 = MuhalikConfig.PATH + '/api/categories/fields';\n    const url_2 = MuhalikConfig.PATH + '/api/categories/tags';\n    const token = await getUncodededTokenFromStorage();\n    await axios.get(url, {\n      headers: {\n        'authorization': token\n      }\n    }).then(response => {// console.log('categories:', response.data)\n    }).catch(error => {// alert('categories Fetchig Error: ', error)\n    });\n    await axios.get(url_1, {\n      headers: {\n        'authorization': token\n      }\n    }).then(response => {// console.log('fields:', response.data)\n    }).catch(error => {// console.log('fuck:', error)\n      // alert('fields Fetchig Error: ', error.response.data.message)\n    });\n    await axios.get(url_2, {\n      headers: {\n        'authorization': token\n      }\n    }).then(response => {// console.log('tags:', response.data)\n    }).catch(error => {// alert('tags Fetchig Error: ', error)\n    });\n  }\n\n  async uploadProduct(data, currentComponent) {\n    console.log('da111222333ta: ', data);\n\n    if (this.state.isUpdateProduct == false) {\n      const url = MuhalikConfig.PATH + '/api/products/add';\n      await axios.post(url, {\n        data\n      }, {\n        headers: {\n          'authorization': await getUncodededTokenFromStorage()\n        }\n      }).then(function (response) {\n        currentComponent.setState({\n          isLoading: false\n        });\n        currentComponent.setState({\n          showToast: true,\n          toastMessage: 'Product Uploaded Successfully'\n        });\n        return true;\n      }).catch(function (error) {\n        console.log('error rooro:', error);\n        console.log('error rooro:', error.response);\n        currentComponent.setState({\n          isLoading: false\n        });\n        alert('Product Upload failed');\n        return false;\n      });\n    } else {\n      const url = MuhalikConfig.PATH + `/api/products/${this.state._id}`;\n      await axios.put(url, {\n        data\n      }, {\n        headers: {\n          'authorization': await getUncodededTokenFromStorage()\n        }\n      }).then(function (response) {\n        currentComponent.setState({\n          isLoading: false\n        });\n        currentComponent.setState({\n          showToast: true,\n          toastMessage: 'Product Updated Successfully'\n        });\n        return true;\n      }).catch(function (error) {\n        currentComponent.setState({\n          isLoading: false\n        });\n        alert('Product Update failed');\n        return false;\n      });\n    }\n  } //  Submit data to api\n  // async uploadProduct(data, ) {\n  //     if (await this.props.upload(data) == true) {\n  //         currentComponent.setState({ isLoading: false });\n  //         currentComponent.setState({ showToast: true });\n  //         return true;\n  //     } else {\n  //         currentComponent.setState({ isLoading: false });\n  //         alert('Product Upload failed');\n  //         return false;\n  //     }\n  // }\n  // handleProductTypeChange(e) {\n  // if (e.target.value == 'variable-prouct') {\n  //     this.setState({ isVariableProduct: true, customFieldsArray: [] });\n  // }\n  //     else {\n  //         this.setState({ isVariableProduct: false, variationsArray: [] });\n  //     }\n  // }\n  // Product Data\n  // => Simple Product Image Link\n\n\n  simpleProductImgLinkChange(value) {\n    this.setState({\n      simple_product_image_link: value\n    });\n  }\n\n  // => End Of Simple Product Image Link\n  // Custom Fields\n  handleSaveCustomFieldsBtnClick() {\n    if (this.state.isVariableProduct == true) {\n      const copyArray = Object.assign([], this.state.variationsArray);\n      copyArray.forEach(element => {\n        this.state.customFieldsArray.forEach(e => {\n          element.customField.push({\n            name: e.name,\n            value: e.value\n          });\n        });\n      });\n      this.setState({\n        variationsArray: copyArray,\n        customFieldsArray: []\n      });\n    }\n  } // Product Category\n\n\n  async fileSelectedHandler(e) {\n    await this.setState({\n      files: [...this.state.files, ...e.target.files]\n    });\n    let array = [];\n    this.state.files.forEach(element => {\n      array.push(URL.createObjectURL(element));\n    });\n    this.setState({\n      imagePreviewArray: array\n    });\n  }\n\n  render() {\n    var showCustomFields = false;\n\n    if (this.state.variationsArray == [] && this.state.isVariableProduct == true) {\n      showCustomFields = true;\n    } else {\n      showCustomFields = false;\n    }\n\n    return __jsx(Formik, {\n      validationSchema: schema,\n      initialValues: this.props.isUpdateProduct ? {\n        product_name: this.props.product_name,\n        product_description: this.props.product_description,\n        product_type: this.props.product_type,\n        sku: this.props.sku,\n        product_price: this.props.product_price,\n        product_in_stock: this.props.product_in_stock,\n        product_brand_name: this.props.product_brand_name,\n        // product_image_link:this.props.product_image_link}\n        product_warranty: this.props.product_warranty,\n        warranty_type: this.props.warranty_type,\n        product_discount: this.props.product_discount,\n        purchase_note: this.props.purchase_note,\n        // product_variations:this.props.product_variations}\n        product_weight: this.props.product_weight,\n        dimension_length: this.props.dimension_length,\n        dimension_width: this.props.dimension_width,\n        dimension_height: this.props.dimension_height,\n        shipping_charges: this.props.shipping_charges,\n        handling_fee: this.props.handling_fee\n      } : {\n        product_type: 'simple-product',\n        product_price: '',\n        product_in_stock: ''\n      },\n      onSubmit: (values, {\n        setSubmitting,\n        resetForm\n      }) => {\n        if (this.state.productCategories == '' || this.state.productSubCategories == '') {\n          if (this.state.productCategories == '') {\n            this.setState({\n              categoryErrorDiv: 'RedBorderDiv'\n            });\n          }\n\n          if (this.state.productSubCategories == '') {\n            this.setState({\n              subCategoryErrorDiv: 'RedBorderDiv'\n            });\n          }\n\n          setSubmitting(false);\n        } else if (values.product_type == 'simple-prouct' && values.product_price == '' || values.product_in_stock == '' || this.state.files == '') {\n          this.setState({\n            showSimpleProductPriceImgLinkErrorrAlert: true\n          });\n        } else if (this.state.isVariationsSaved == false && values.product_type == 'variable-prouct') {\n          this.setState({\n            showVariationsErrorAlert: true\n          });\n        } else {\n          resetForm();\n          setSubmitting(true);\n          this.setState({\n            isLoading: true\n          });\n          setTimeout(() => {\n            let array = [];\n            values.product_category = this.state.productCategories;\n            values.product_sub_category = this.state.productSubCategories;\n            values.product_tags = this.state.productTags;\n            values.dangerous_goods = this.state.dangerousGoodsArray;\n\n            if (!this.state.isVariableProduct) {\n              values.product_image_link = this.state.files;\n              values.custom_fields = this.state.customFieldsArray;\n            } else {\n              array = [];\n              this.state.variationsArray.forEach((element, index) => {\n                let item = [];\n                element.item.forEach(e => {\n                  item.push({\n                    name: e.name,\n                    value: e.value\n                  });\n                });\n                let item_1 = [];\n                element.custom_fields.forEach(e => {\n                  item_1.push({\n                    name: e.name,\n                    value: e.value\n                  });\n                });\n                array.push({\n                  item: item,\n                  custom_fields: item_1,\n                  price: element.price,\n                  stock: element.stock,\n                  image_link: element.image_link\n                });\n              });\n              values.product_variations = array;\n            }\n\n            resetForm();\n\n            if (this.uploadProduct(values, this)) {\n              this.setState({\n                showVariationsErrorAlert: false,\n                showSimpleProductPriceImgLinkErrorrAlert: false,\n                isVariableProduct: false,\n                productCategories: '',\n                productSubCategories: '',\n                subCategoryDisabled: true,\n                subSubCategoryDisabled: true,\n                categoryErrorDiv: 'BorderDiv',\n                subCategoryErrorDiv: 'BorderDiv',\n                productTags: [],\n                warrantyType: '',\n                inputValue: '',\n                files: [],\n                variationsArray: [],\n                isVariationsSaved: false,\n                // Custom Fields\n                customFieldsArray: [],\n                // Dangerous Goods\n                dangerousGoodsArray: []\n              });\n            }\n\n            setSubmitting(false);\n          }, 500);\n        }\n      }\n    }, ({\n      handleSubmit,\n      handleChange,\n      values,\n      touched,\n      isValid,\n      errors,\n      handleBlur,\n      isSubmitting\n    }) => __jsx(\"div\", {\n      className: _JSXStyle.dynamic([[\"3499326083\", [GlobalStyleSheet.admin_primry_color]]])\n    }, __jsx(TitleRow, {\n      icon: faPlus,\n      title: this.props.title\n    }), this.props.isUpdateProduct ? __jsx(Form.Row, {\n      style: {\n        margin: ' 0% 2%',\n        display: 'flex',\n        alignItems: 'center'\n      }\n    }, __jsx(Nav.Link, {\n      style: {\n        fontSize: '14px'\n      },\n      className: \"mr-auto\",\n      onClick: this.props.back\n    }, \"Back\"), __jsx(\"div\", {\n      style: {\n        fontSize: '14px'\n      },\n      className: _JSXStyle.dynamic([[\"3499326083\", [GlobalStyleSheet.admin_primry_color]]]) + \" \" + \"mr-auto\"\n    }, \" \", this.props.product_name), __jsx(Nav.Link, {\n      style: {\n        fontSize: '14px'\n      },\n      onClick: this.props.view\n    }, \" View \"), __jsx(Nav.Link, {\n      style: {\n        fontSize: '14px'\n      },\n      onClick: this.props.delete\n    }, \" Delete \")) : null, __jsx(Form, {\n      noValidate: true,\n      onSubmit: handleSubmit\n    }, __jsx(AlertModal, {\n      onHide: e => this.setState({\n        showToast: false\n      }),\n      show: this.state.showToast,\n      header: 'Success',\n      message: this.state.toastMessage,\n      iconName: faThumbsUp,\n      color: \"#00b300\"\n    }), __jsx(AlertModal, {\n      onHide: e => this.setState({\n        showVariationsErrorAlert: false\n      }),\n      show: this.state.showVariationsErrorAlert,\n      header: 'Error',\n      message: 'Please Add/Save Variations First',\n      iconName: faExclamationTriangle,\n      color: \"#ff3333\"\n    }), __jsx(AlertModal, {\n      onHide: e => this.setState({\n        showSimpleProductPriceImgLinkErrorrAlert: false\n      }),\n      show: this.state.showSimpleProductPriceImgLinkErrorrAlert,\n      header: 'Error',\n      message: 'Enter Price/Stock/Image(s) in General Tab First',\n      iconName: faExclamationTriangle,\n      color: \"#ff3333\"\n    }), __jsx(Row, {\n      noGutters: true,\n      style: {\n        paddingTop: '1%'\n      }\n    }, __jsx(Col, {\n      lg: 9,\n      md: 9,\n      sm: 12,\n      xs: 12\n    }, __jsx(Form.Group, {\n      as: Row,\n      style: {\n        margin: '0.5% 2% 2% 2%',\n        padding: '0%'\n      }\n    }, __jsx(Form.Label, {\n      style: styles.label\n    }, \"Product Name\", __jsx(\"span\", {\n      className: _JSXStyle.dynamic([[\"3499326083\", [GlobalStyleSheet.admin_primry_color]]])\n    }, \"*\")), __jsx(InputGroup, null, __jsx(Form.Control, {\n      type: \"text\",\n      placeholder: \"Enter Product Name\",\n      name: \"product_name\",\n      value: values.product_name || '',\n      onChange: handleChange,\n      isInvalid: errors.product_name\n    }), __jsx(Form.Control.Feedback, {\n      type: \"invalid\"\n    }, errors.product_name))), __jsx(CardAccordion, {\n      title: 'Product Discruption'\n    }, __jsx(Form.Group, null, __jsx(Form.Control, {\n      as: \"textarea\",\n      placeholder: \"Enter Product Description\",\n      name: \"product_description\",\n      value: values.product_description || '',\n      rows: \"7\",\n      onChange: handleChange,\n      isInvalid: errors.product_description\n    }), __jsx(Form.Control.Feedback, {\n      type: \"invalid\"\n    }, errors.product_description))), __jsx(ProductData, {\n      isUpdateProduct: this.props.isUpdateProduct,\n      productTypeHandler: e => {\n        if (e.target.value == 'variable-prouct') {\n          this.setState({\n            isVariableProduct: true\n          });\n        } else {\n          this.setState({\n            isVariableProduct: false\n          });\n        }\n      },\n      isVariableProduct: this.state.isVariableProduct,\n      product_type_values: values.product_type,\n      product_price_values: values.product_price || '',\n      product_price_errors: errors.product_price,\n      product_price_touched: touched.product_price,\n      product_in_stock_values: values.product_in_stock || '',\n      product_in_stock_errors: errors.product_in_stock,\n      product_brand_name_values: values.product_brand_name || '',\n      product_brand_name_errors: errors.product_brand_name,\n      fileSelectedHandler: this.fileSelectedHandler.bind(this),\n      imagePreviewArray: this.state.imagePreviewArray,\n      deleteImage: this.deleteImage,\n      imageLink: this.state.simple_product_image_link,\n      simpleProductImgLinkChange: this.simpleProductImgLinkChange.bind(this),\n      simpleProductImgLinkKeyDownHandler: this.handleSimpleProductImage_linkKeyDown.bind(this),\n      simpleProductError: this.state.showSimpleProductPriceImgLinkErrorrAlert,\n      product_warranty_values: values.product_warranty || '',\n      product_warranty_errors: errors.product_warranty,\n      warranty_type_values: values.warranty_type || '',\n      warranty_type_errors: errors.warranty_type,\n      product_discount_values: values.product_discount || '',\n      product_discount_errors: errors.product_discount,\n      sku_values: values.sku || '',\n      sku_errors: errors.sku,\n      product_weight_values: values.product_weight || '',\n      product_weight_errors: errors.product_weight,\n      dimension_length_values: values.dimension_length || '',\n      dimension_length_errors: errors.dimension_length,\n      dimension_width_values: values.dimension_width || '',\n      dimension_width_errors: errors.dimension_width,\n      dimension_height_values: values.dimension_height || '',\n      dimension_height_errors: errors.dimension_height,\n      shipping_charges_values: values.shipping_charges || '',\n      shipping_charges_errors: errors.shipping_charges,\n      handling_fee_values: values.handling_fee || '',\n      handling_fee_errors: errors.handling_fee,\n      purchase_note_values: values.purchase_note || '',\n      purchase_note_errors: errors.purchase_note,\n      onChange: handleChange,\n      errors: errors,\n      productColorChangeHandler: this.handleProductColorChange,\n      productSizeChangeHandler: this.handleProductSizeChange,\n      variationsArray: this.state.variationsArray,\n      setVariationsArray: arr => this.setState({\n        variationsArray: arr\n      }),\n      setVariationsSaved: () => this.setState({\n        isVariationsSaved: true\n      })\n    }), __jsx(CardAccordion, {\n      title: 'Custom Fields'\n    }, __jsx(CustomFields, {\n      customFieldsArray: this.state.customFieldsArray,\n      setFieldsArrayHandler: arr => this.setState({\n        customFieldsArray: arr\n      }),\n      isVariableProduct: this.state.isVariableProduct,\n      showCustomFields: showCustomFields,\n      saveCustomFieldsHandler: this.handleSaveCustomFieldsBtnClick.bind(this)\n    }))), __jsx(Col, {\n      lg: 3,\n      md: 3,\n      sm: 12,\n      xs: 12\n    }, __jsx(CardAccordion, {\n      title: 'Product Categories'\n    }, __jsx(Form.Group, null, __jsx(Form.Label, {\n      style: styles.label\n    }, \"Category\"), __jsx(\"div\", {\n      className: _JSXStyle.dynamic([[\"3499326083\", [GlobalStyleSheet.admin_primry_color]]]) + \" \" + (this.state.categoryErrorDiv || \"\")\n    }, __jsx(Select, {\n      styles: GlobalStyleSheet.react_select_styles,\n      onChange: this.handleProductCategoryChange,\n      options: product_categories_options,\n      value: this.state.productCategories,\n      isSearchable: true,\n      isClearable: true,\n      placeholder: \"Select Category\"\n    }))), __jsx(Form.Group, null, __jsx(Form.Label, {\n      style: styles.label\n    }, \"Sub Category\"), __jsx(\"div\", {\n      className: _JSXStyle.dynamic([[\"3499326083\", [GlobalStyleSheet.admin_primry_color]]]) + \" \" + (this.state.subCategoryErrorDiv || \"\")\n    }, __jsx(Select, {\n      styles: GlobalStyleSheet.react_select_styles,\n      onChange: this.handleProductSubCategoryChange,\n      options: product_sub_categories_options,\n      value: this.state.productSubCategories,\n      isSearchable: true,\n      isClearable: true,\n      placeholder: \"Select Sub Category\",\n      isDisabled: this.state.subCategoryDisabled\n    })), __jsx(\"div\", {\n      style: {\n        minHeight: '150px'\n      },\n      className: _JSXStyle.dynamic([[\"3499326083\", [GlobalStyleSheet.admin_primry_color]]])\n    }))), __jsx(CardAccordion, {\n      title: 'Dangerous Goods'\n    }, __jsx(Form.Check, {\n      name: \"not_specified\",\n      label: \"Not Specified\",\n      style: styles.label,\n      checked: this.state.dangerousGoodsArray && this.state.dangerousGoodsArray.forEach(element => {\n        if (element.value == 'Not-Specified') {\n          return true;\n        }\n      }),\n      onChange: e => this.handleDangerousGoodsChange(e, 'Not-Specified')\n    }), __jsx(\"br\", {\n      className: _JSXStyle.dynamic([[\"3499326083\", [GlobalStyleSheet.admin_primry_color]]])\n    }), __jsx(Form.Check, {\n      name: \"ceramic\",\n      label: \"Ceramic\",\n      style: styles.label,\n      checked: this.state.dangerousGoodsArray && this.state.dangerousGoodsArray.forEach(element => {\n        if (element.value == 'Ceramic') {\n          return true;\n        }\n      }),\n      onChange: e => this.handleDangerousGoodsChange(e, 'Ceramic')\n    }), __jsx(\"br\", {\n      className: _JSXStyle.dynamic([[\"3499326083\", [GlobalStyleSheet.admin_primry_color]]])\n    }), __jsx(Form.Check, {\n      name: \"glass\",\n      label: \"Glass\",\n      style: styles.label,\n      checked: this.state.dangerousGoodsArray && this.state.dangerousGoodsArray.forEach(element => {\n        if (element.value == 'Glass') {\n          return true;\n        }\n      }),\n      onChange: e => this.handleDangerousGoodsChange(e, 'Glass')\n    }), __jsx(\"br\", {\n      className: _JSXStyle.dynamic([[\"3499326083\", [GlobalStyleSheet.admin_primry_color]]])\n    }), __jsx(Form.Check, {\n      name: \"metal\",\n      label: \"Metal\",\n      style: styles.label,\n      checked: this.state.dangerousGoodsArray && this.state.dangerousGoodsArray.forEach(element => {\n        if (element.value == 'Metal') {\n          return true;\n        }\n      }),\n      onChange: e => this.handleDangerousGoodsChange(e, 'Metal')\n    }), __jsx(\"br\", {\n      className: _JSXStyle.dynamic([[\"3499326083\", [GlobalStyleSheet.admin_primry_color]]])\n    }), __jsx(Form.Check, {\n      name: \"plastic\",\n      label: \"Plastic\",\n      style: styles.label,\n      checked: this.state.dangerousGoodsArray && this.state.dangerousGoodsArray.forEach(element => {\n        if (element.value == 'Plastic') {\n          return true;\n        }\n      }),\n      onChange: e => this.handleDangerousGoodsChange(e, 'Plastic')\n    })), __jsx(CardAccordion, {\n      title: 'Product Tags'\n    }, __jsx(CreatableSelect, {\n      isMulti: true,\n      styles: GlobalStyleSheet.react_select_styles,\n      onChange: this.handleProductTagChange,\n      options: product_color_options,\n      value: this.state.productTags,\n      placeholder: \"Select/Enter Tags\"\n    }), __jsx(\"div\", {\n      style: {\n        minHeight: '150px'\n      },\n      className: _JSXStyle.dynamic([[\"3499326083\", [GlobalStyleSheet.admin_primry_color]]])\n    })))), __jsx(Row, {\n      style: styles.row\n    }, __jsx(Button, {\n      type: \"submit\",\n      onSubmit: handleSubmit,\n      disabled: this.state.isLoading,\n      block: true\n    }, this.state.isLoading ? 'Uploading' : 'Upload', this.state.isLoading ? __jsx(Spinner, {\n      animation: \"grow\",\n      size: \"sm\"\n    }) : __jsx(\"div\", {\n      className: _JSXStyle.dynamic([[\"3499326083\", [GlobalStyleSheet.admin_primry_color]]])\n    })))), __jsx(_JSXStyle, {\n      id: \"3499326083\",\n      dynamic: [GlobalStyleSheet.admin_primry_color]\n    }, [\".RedBorderDiv.__jsx-style-dynamic-selector{border:0.5px solid #DC3545;padding:1px;border-radius:2px;width:100%;}\", \".BorderDiv.__jsx-style-dynamic-selector{border:none;width:100%;}\", \"span.__jsx-style-dynamic-selector{color:red;}\", `.nav_link.__jsx-style-dynamic-selector{background:${GlobalStyleSheet.admin_primry_color};border-top:0.5px solid #434556;border-bottom:0.5px solid #434556;margin:1.5px 0px;border-radius:4px;}`, \"p.__jsx-style-dynamic-selector{text-align:center;margin:0px;}\"])));\n  }\n\n}\n\nconst styles = {\n  nav_link: {\n    color: 'white',\n    fontSize: '13px',\n    display: 'flex',\n    alignItems: 'center',\n    height: '45px'\n  },\n  row: {\n    margin: '2%',\n    padding: '0%'\n  },\n  card: {\n    width: '100%',\n    border: '1px solid lightgray'\n  },\n  card_header: {\n    alignItems: 'center',\n    fontSize: `${GlobalStyleSheet.card_header_fontsize}`,\n    background: `${GlobalStyleSheet.card_header_background}`\n  },\n  buttons: {\n    background: `${GlobalStyleSheet.primry_color}`,\n    border: 'none',\n    fontSize: '10px'\n  },\n  label: {\n    fontSize: `${GlobalStyleSheet.form_label_fontsize}`\n  },\n  term_condition_label: {\n    width: '100%',\n    fontSize: `${GlobalStyleSheet.form_label_fontsize}`,\n    paddingTop: '-10px',\n    marginTop: '-10px'\n  },\n  fontawesome: {\n    color: `${GlobalStyleSheet.primary_text_color}`,\n    width: '15px',\n    height: '15px',\n    maxHeight: '15px',\n    maxWidth: '15px'\n  },\n  product_fontawesome: {\n    color: `${GlobalStyleSheet.primary_text_color}`,\n    marginRight: '10%',\n    width: '17px',\n    height: '17px',\n    maxHeight: '17px',\n    maxWidth: '17px'\n  },\n  variations_fontawesome: {\n    color: `${GlobalStyleSheet.admin_primry_color}`,\n    marginRight: '10%',\n    width: '15px',\n    height: '15px',\n    maxHeight: '15px',\n    maxWidth: '15px'\n  }\n};\nexport default AddNew;","map":null,"metadata":{},"sourceType":"module"}