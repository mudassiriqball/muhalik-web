{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Form, Row, Accordion, Col, Card, InputGroup, Button, Spinner } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faListAlt, faSlidersH } from '@fortawesome/free-solid-svg-icons';\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-regular-svg-icons';\nimport React, { Component } from 'react';\nimport MuhalikConfig from '../../../../../../sdk/muhalik.config';\nimport GlobalStyleSheet from '../../../../.././../styleSheet';\nimport axios from 'axios';\nimport AlertModal from '../../../../alert-modal';\n\nvar ProducFields = /*#__PURE__*/function (_Component) {\n  _inherits(ProducFields, _Component);\n\n  var _super = _createSuper(ProducFields);\n\n  function ProducFields(props) {\n    var _this;\n\n    _classCallCheck(this, ProducFields);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFieldRequestChange\", function (e, index) {\n      var copyArray = Object.assign([], _this.state.fieldRequestList);\n      copyArray[index].value = e.target.value;\n\n      if (e.target.value != '' && e.target.value.length <= 20 && e.target.value.length >= 3) {\n        copyArray[index].error = '';\n      } else {\n        copyArray[index].error = 'Value must be 3-20 characters';\n      }\n\n      _this.setState({\n        fieldRequestList: copyArray\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFieldChange\", function (e, index) {\n      var copyArray = Object.assign([], _this.state.fieldList);\n      copyArray[index].value = e.target.value;\n\n      if (e.target.value != '' && e.target.value.length <= 20 && e.target.value.length >= 3) {\n        copyArray[index].error = '';\n      } else {\n        copyArray[index].error = 'Value must be 3-20 characters';\n      }\n\n      _this.setState({\n        fieldList: copyArray\n      });\n    });\n\n    _this.state = {\n      isLoading: false,\n      showToast: false,\n      fieldValue: '',\n      error: '',\n      fieldList: [],\n      fieldRequestList: [],\n      editRequestedField: '',\n      showModalMessage: '',\n      showModal: false\n    };\n    return _this;\n  } // Getting Product Fields from DB\n\n\n  _createClass(ProducFields, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var url, response, copyArray;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              url = MuhalikConfig.PATH + '/api/products-categories/get-all';\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(axios.get(url));\n\n            case 4:\n              response = _context.sent;\n              copyArray = response.data.data;\n              copyArray.forEach(function (data, index) {\n                data.label = true;\n              });\n              this.setState({\n                fieldList: copyArray\n              });\n              this.setState({\n                fieldRequestList: this.state.fieldList\n              });\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[1, 11]], Promise);\n    }\n  }, {\n    key: \"addField\",\n    value: function addField() {\n      return _regeneratorRuntime.async(function addField$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // const url = MuhalikConfig.PATH + '/api/products/add';\n              // await axios.post(url, {\n              // this.state.fieldValue\n              // }, {\n              //     headers: { 'authorization': await getUncodededTokenFromStorage() }\n              // }).then(function (response) {\n              this.setState({\n                isLoading: true\n              });\n              this.setState({\n                showModalMessage: 'Product Field Added Successfully'\n              });\n              this.setState({\n                showModal: true\n              });\n              return _context2.abrupt(\"return\", true);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      if (fieldValue == '') {\n        this.setState({\n          error: 'Enter Value First'\n        });\n      } else {\n        this.setState({\n          isLoading: true\n        });\n        this.setState({\n          error: ''\n        });\n        this.addField(this);\n      }\n    } // Field Request \n    // => Field Value \n\n  }, {\n    key: \"handleEditFieldRequestClick\",\n    //  => Edit\n    value: function handleEditFieldRequestClick(index) {\n      var copyArray, obj;\n      return _regeneratorRuntime.async(function handleEditFieldRequestClick$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              copyArray = Object.assign([], this.state.fieldRequestList);\n              obj = {};\n              obj['value'] = copyArray[index].value;\n              obj['label'] = false;\n              obj['prevVal'] = copyArray[index].value;\n              obj['error'] = '';\n              copyArray[index] = obj;\n              _context3.next = 9;\n              return _regeneratorRuntime.awrap(this.setState({\n                fieldRequestList: copyArray\n              }));\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    } //  => Cancle\n\n  }, {\n    key: \"handleCancelFieldRequestClick\",\n    value: function handleCancelFieldRequestClick(index) {\n      var copyArray = Object.assign([], this.state.fieldRequestList);\n      copyArray[index].value = copyArray[index].prevVal;\n      copyArray[index].label = true;\n      this.setState({\n        fieldRequestList: copyArray\n      });\n    } // Update\n\n  }, {\n    key: \"handleUpdateFieldRequestClick\",\n    value: function handleUpdateFieldRequestClick(index) {\n      var copyArray = Object.assign([], this.state.fieldRequestList);\n\n      if (copyArray[index].error == '') {\n        copyArray[index].label = true;\n        this.setState({\n          fieldRequestList: copyArray,\n          showModalMessage: 'Product Field Updated Successfully',\n          showModal: true\n        });\n      }\n    } //  => Add\n\n  }, {\n    key: \"handleAddFieldRequestClick\",\n    value: function handleAddFieldRequestClick(index) {\n      var copyArray = Object.assign([], this.state.fieldRequestList);\n      copyArray.splice(index, 1);\n      this.setState({\n        fieldRequestList: copyArray,\n        showModalMessage: 'Product Field Added Successfully',\n        showModal: true\n      });\n    } //  => Delete\n\n  }, {\n    key: \"handleDeleteFieldRequestClick\",\n    value: function handleDeleteFieldRequestClick(index) {\n      var copyArray = Object.assign([], this.state.fieldRequestList);\n      copyArray.splice(index, 1);\n      this.setState({\n        fieldRequestList: copyArray,\n        showModalMessage: 'Product Field Deleted',\n        showModal: true\n      });\n    } // All categories\n    //  => Chane\n\n  }, {\n    key: \"handleEditFieldClick\",\n    //  => Edit\n    value: function handleEditFieldClick(index) {\n      var copyArray, obj;\n      return _regeneratorRuntime.async(function handleEditFieldClick$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              copyArray = Object.assign([], this.state.fieldList);\n              obj = {};\n              obj['value'] = copyArray[index].value;\n              obj['label'] = false;\n              obj['prevVal'] = copyArray[index].value;\n              obj['error'] = '';\n              copyArray[index] = obj;\n              _context4.next = 9;\n              return _regeneratorRuntime.awrap(this.setState({\n                fieldList: copyArray\n              }));\n\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    } //  => Cancle\n\n  }, {\n    key: \"handleCancelFieldClick\",\n    value: function handleCancelFieldClick(index) {\n      var copyArray = Object.assign([], this.state.fieldList);\n      copyArray[index].value = copyArray[index].prevVal;\n      copyArray[index].label = true;\n      this.setState({\n        fieldList: copyArray\n      });\n    } //  => Update\n\n  }, {\n    key: \"handleUpdateFieldClick\",\n    value: function handleUpdateFieldClick(index) {\n      var copyArray = Object.assign([], this.state.fieldList);\n      copyArray[index].label = true;\n      this.setState({\n        fieldList: copyArray,\n        showModalMessage: 'Product Field Updated Successfully',\n        showModal: true\n      });\n    } //  => Delete\n\n  }, {\n    key: \"handleDeleteFieldClick\",\n    value: function handleDeleteFieldClick(index) {\n      var copyArray = Object.assign([], this.state.fieldList);\n      copyArray.splice(index, 1);\n      this.setState({\n        fieldList: copyArray,\n        showModalMessage: 'Product Field Deleted',\n        showModal: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(React.Fragment, null, __jsx(AlertModal, {\n        onHide: function onHide(e) {\n          return _this2.setState({\n            showModal: false\n          });\n        },\n        show: this.state.showModal,\n        header: 'Success',\n        message: this.state.showModalMessage,\n        iconName: faThumbsUp,\n        color: \"#00b300\"\n      }), __jsx(Row, {\n        noGutters: true\n      }, __jsx(Accordion, {\n        style: {\n          width: '100%'\n        },\n        defaultActiveKey: \"0\"\n      }, __jsx(Card, {\n        style: styles.card\n      }, __jsx(Card.Header, null, __jsx(Form.Label, null, \"Add New Field \"), __jsx(Accordion.Toggle, {\n        as: Button,\n        size: \"sm\",\n        eventKey: \"0\",\n        style: {\n          \"float\": 'right',\n          background: 'none'\n        }\n      }, __jsx(FontAwesomeIcon, {\n        size: \"xs\",\n        icon: faSlidersH,\n        style: styles.accordin_fontawesome\n      }))), __jsx(Accordion.Collapse, {\n        eventKey: \"0\"\n      }, __jsx(Card.Body, {\n        style: styles.card_body\n      }, __jsx(Form.Group, null, __jsx(InputGroup, null, __jsx(Form.Control, {\n        type: \"text\",\n        size: \"sm\",\n        placeholder: \"Enter Field Value\",\n        name: \"sku\",\n        value: this.state.fieldValue,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            fieldValue: e.target.value\n          });\n        },\n        isInvalid: this.state.error\n      }), __jsx(Form.Control.Feedback, {\n        type: \"invalid\"\n      }, this.state.error))), __jsx(Form.Group, null, __jsx(Button, {\n        type: \"submit\",\n        size: \"sm\",\n        onClick: this.handleSubmit.bind(this),\n        disabled: this.state.isLoading,\n        block: true,\n        style: styles.submit_btn\n      }, this.state.isLoading ? 'Uploading' : 'Add Field', this.state.isLoading ? __jsx(Spinner, {\n        animation: \"grow\",\n        size: \"sm\"\n      }) : null))))))), __jsx(Row, {\n        style: styles.title_row,\n        noGutters: true\n      }, __jsx(FontAwesomeIcon, {\n        icon: faListAlt,\n        style: styles.title_fontawesome\n      }), __jsx(\"div\", {\n        className: \"mr-auto\",\n        style: styles.title\n      }, \" Product Fields \")), __jsx(Row, {\n        noGutters: true\n      }, __jsx(Accordion, {\n        style: {\n          width: '100%'\n        },\n        defaultActiveKey: \"0\"\n      }, __jsx(Card, {\n        style: styles.card\n      }, __jsx(Card.Header, null, __jsx(Form.Label, null, \"Add Field Requests\"), __jsx(Accordion.Toggle, {\n        as: Button,\n        size: \"sm\",\n        eventKey: \"0\",\n        style: {\n          \"float\": 'right',\n          background: 'none'\n        }\n      }, __jsx(FontAwesomeIcon, {\n        size: \"xs\",\n        icon: faSlidersH,\n        style: styles.accordin_fontawesome\n      }))), __jsx(Accordion.Collapse, {\n        eventKey: \"0\"\n      }, __jsx(Card.Body, {\n        style: styles.card_body\n      }, this.state.fieldRequestList.map(function (data, index) {\n        return __jsx(Form.Row, null, __jsx(Form.Group, {\n          as: Col,\n          lg: 7,\n          md: 7,\n          sm: 12,\n          xs: 12\n        }, __jsx(InputGroup, null, __jsx(Form.Control, {\n          type: \"text\",\n          size: \"sm\",\n          placeholder: \"Enter Field Value\",\n          name: \"sku\",\n          value: data.value,\n          onChange: function onChange(e) {\n            return _this2.handleFieldRequestChange(e, index);\n          },\n          isInvalid: data.error,\n          disabled: data.label\n        }), __jsx(Form.Control.Feedback, {\n          type: \"invalid\"\n        }, data.error))), __jsx(Form.Group, {\n          as: Col,\n          lg: 1,\n          md: 1,\n          sm: \"auto\",\n          xs: \"auto\"\n        }, __jsx(Button, {\n          type: \"submit\",\n          variant: \"outline-success\",\n          size: \"sm\",\n          block: true,\n          style: styles.submit_btn,\n          onClick: function onClick() {\n            return data.label ? _this2.handleEditFieldRequestClick(index) : _this2.handleUpdateFieldRequestClick(index);\n          }\n        }, __jsx(\"div\", null, data.label ? 'Edit' : 'Update'))), __jsx(Form.Group, {\n          as: Col,\n          lg: 1,\n          md: 1,\n          sm: \"auto\",\n          xs: \"auto\"\n        }, __jsx(Button, {\n          type: \"submit\",\n          variant: \"outline-primary\",\n          size: \"sm\",\n          block: true,\n          style: styles.submit_btn,\n          onClick: function onClick() {\n            data.label ? _this2.handleAddFieldRequestClick(index) : _this2.handleCancelFieldRequestClick(index);\n          }\n        }, __jsx(\"div\", null, data.label ? 'Add' : 'Cancel'))), __jsx(\"div\", {\n          className: \"mr-auto\"\n        }), __jsx(Form.Group, {\n          as: Col,\n          lg: 2,\n          md: 2,\n          sm: \"auto\",\n          xs: \"auto\"\n        }, __jsx(Button, {\n          type: \"submit\",\n          variant: \"outline-danger\",\n          size: \"sm\",\n          block: true,\n          style: styles.submit_btn,\n          onClick: function onClick() {\n            return _this2.handleDeleteFieldRequestClick(index);\n          }\n        }, __jsx(\"div\", null, \"Discard\"))));\n      })))))), __jsx(Row, {\n        noGutters: true\n      }, __jsx(Accordion, {\n        style: {\n          width: '100%'\n        },\n        defaultActiveKey: \"0\"\n      }, __jsx(Card, {\n        style: styles.card\n      }, __jsx(Card.Header, null, __jsx(Form.Label, null, \"All Fields\"), __jsx(Accordion.Toggle, {\n        as: Button,\n        size: \"sm\",\n        eventKey: \"0\",\n        style: {\n          \"float\": 'right',\n          background: 'none'\n        }\n      }, __jsx(FontAwesomeIcon, {\n        size: \"xs\",\n        icon: faSlidersH,\n        style: styles.accordin_fontawesome\n      }))), __jsx(Accordion.Collapse, {\n        eventKey: \"0\"\n      }, __jsx(Card.Body, {\n        style: styles.card_body\n      }, this.state.fieldList.map(function (data, index) {\n        return __jsx(Form.Row, null, __jsx(Form.Group, {\n          as: Col,\n          lg: 8,\n          md: 8,\n          sm: 12,\n          xs: 12\n        }, __jsx(InputGroup, null, __jsx(Form.Control, {\n          type: \"text\",\n          size: \"sm\",\n          placeholder: \"Enter Field Value\",\n          name: \"sku\",\n          value: data.value,\n          onChange: function onChange(e) {\n            return _this2.handleFieldChange(e, index);\n          },\n          disabled: data.label,\n          isInvalid: data.error\n        }), __jsx(Form.Control.Feedback, {\n          type: \"invalid\"\n        }, _this2.state.error))), __jsx(Form.Group, {\n          as: Col,\n          lg: 1,\n          md: 1,\n          sm: \"auto\",\n          xs: \"auto\"\n        }, __jsx(Button, {\n          type: \"submit\",\n          variant: \"outline-success\",\n          size: \"sm\",\n          block: true,\n          style: styles.submit_btn,\n          onClick: data.label ? function () {\n            return _this2.handleEditFieldClick(index);\n          } : function () {\n            return _this2.handleUpdateFieldClick(index);\n          }\n        }, __jsx(\"div\", null, data.label ? 'Edit' : 'Update'))), __jsx(\"div\", {\n          className: \"mr-auto\"\n        }), __jsx(Form.Group, {\n          as: Col,\n          lg: 2,\n          md: 2,\n          sm: \"auto\",\n          xs: \"auto\"\n        }, __jsx(Button, {\n          type: \"submit\",\n          variant: data.label ? \"outline-danger\" : \"outline-primary\",\n          size: \"sm\",\n          block: true,\n          style: styles.submit_btn,\n          onClick: function onClick() {\n            data.laebl ? _this2.handleDeleteFieldClick(index) : _this2.handleCancelFieldClick(index);\n          }\n        }, __jsx(\"div\", null, data.label ? 'Delete' : 'Cancel'))));\n      })))))));\n    }\n  }]);\n\n  return ProducFields;\n}(Component);\n\nvar styles = {\n  title_row: {\n    borderBottom: '1px solid gray',\n    padding: '1.5% 4%'\n  },\n  title_fontawesome: {\n    color: 'gray',\n    marginRight: '3%',\n    width: '26px',\n    height: '26px',\n    maxHeight: '26px',\n    maxWidth: '26px'\n  },\n  title: {\n    color: 'gray'\n  },\n  card: {\n    // width: '100%',\n    margin: '2%'\n  },\n  card_body: {// padding: '5%'\n  },\n  error: {\n    width: '100%',\n    textAlign: 'center',\n    color: '#DC3545',\n    fontSize: '14px'\n  },\n  accordin_fontawesome: {\n    color: \"\".concat(GlobalStyleSheet.admin_primry_color),\n    marginRight: '10%',\n    width: '15px',\n    height: '15px',\n    maxHeight: '15px',\n    maxWidth: '15px'\n  }\n};\nexport default ProducFields;","map":null,"metadata":{},"sourceType":"module"}