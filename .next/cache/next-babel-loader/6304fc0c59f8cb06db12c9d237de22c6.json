{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\MudassirR\\\\Desktop\\\\Muhalik\\\\muhalikweb\\\\src\\\\pages\\\\components\\\\admin\\\\dashboard\\\\dashboard-contents\\\\product-contents\\\\product-categories.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Form, Row, Col, Card, InputGroup, Button, Spinner } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faListAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-regular-svg-icons';\nimport React, { Component } from 'react';\nimport MuhalikConfig from '../../../../../../sdk/muhalik.config';\nimport axios from 'axios';\n\nvar ProducCategories = /*#__PURE__*/function (_Component) {\n  _inherits(ProducCategories, _Component);\n\n  var _super = _createSuper(ProducCategories);\n\n  function ProducCategories(props) {\n    var _this;\n\n    _classCallCheck(this, ProducCategories);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"y\", void 0);\n\n    _this.state = {\n      isLoading: false,\n      showToast: false,\n      categoryValue: '',\n      error: '',\n      categoryList: []\n    };\n    return _this;\n  } // Getting Product Categories from DB\n\n\n  _createClass(ProducCategories, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var url, response;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              url = MuhalikConfig.PATH + '/api/products-categories/get-all';\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(axios.get(url));\n\n            case 4:\n              response = _context.sent;\n              this.setState({\n                categoryList: response.data.data\n              });\n              console.log('list:', response);\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[1, 9]], Promise);\n    }\n  }, {\n    key: \"addCategory\",\n    value: function addCategory() {\n      return _regeneratorRuntime.async(function addCategory$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // const url = MuhalikConfig.PATH + '/api/products/add';\n              // await axios.post(url, {\n              // this.state.categoryValue\n              // }, {\n              //     headers: { 'authorization': await getUncodededTokenFromStorage() }\n              // }).then(function (response) {\n              this.setState({\n                isLoading: true\n              });\n              this.setState({\n                showToast: true\n              });\n              return _context2.abrupt(\"return\", true);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      if (categoryValue == '') {\n        this.setState({\n          error: 'Enter Value First'\n        });\n      } else {\n        this.setState({\n          isLoading: true\n        });\n        this.setState({\n          error: ''\n        });\n        this.addCategory(this);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(React.Fragment, null, __jsx(Row, {\n        style: styles.title_row,\n        noGutters: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }\n      }, __jsx(FontAwesomeIcon, {\n        icon: faListAlt,\n        style: styles.title_fontawesome,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }\n      }), __jsx(\"div\", {\n        className: \"mr-auto\",\n        style: styles.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }\n      }, \" Product Categories \")), __jsx(Row, {\n        noGutters: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }\n      }, __jsx(Card, {\n        style: styles.card,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }\n      }, __jsx(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 29\n        }\n      }, \"Add Category Requests\")), __jsx(Card.Body, {\n        style: styles.card_body,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }\n      }, this.state.categoryList.map(function (data) {\n        return __jsx(Form.Row, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 33\n          }\n        }, __jsx(Form.Group, {\n          as: Col,\n          lg: 3,\n          md: 3,\n          sm: 6,\n          xs: 12,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 37\n          }\n        }, __jsx(InputGroup, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 41\n          }\n        }, __jsx(Form.Control, {\n          type: \"text\",\n          size: \"sm\",\n          placeholder: \"Enter Category Value\",\n          name: \"sku\",\n          value: data.label,\n          onChange: function onChange(e) {\n            _this2.setState({\n              categoryValue: e.target.value\n            });\n          },\n          isInvalid: _this2.state.error,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 45\n          }\n        }), __jsx(Form.Control.Feedback, {\n          type: \"invalid\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 45\n          }\n        }, _this2.state.error))), __jsx(Form.Group, {\n          as: Col,\n          lg: 1,\n          md: 1,\n          sm: 2,\n          xs: 4,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 37\n          }\n        }, __jsx(Button, {\n          type: \"submit\",\n          variant: \"outline-primary\",\n          size: \"sm\",\n          onClick: _this2.handleSubmit.bind(_this2),\n          disabled: _this2.state.isLoading,\n          block: true,\n          style: styles.submit_btn,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 41\n          }\n        }, __jsx(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 45\n          }\n        }, \"Edit\"))), __jsx(Form.Group, {\n          as: Col,\n          lg: 1,\n          md: 1,\n          sm: 2,\n          xs: 4,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 37\n          }\n        }, __jsx(Button, {\n          type: \"submit\",\n          variant: \"outline-danger\",\n          size: \"sm\",\n          onClick: _this2.handleSubmit.bind(_this2),\n          disabled: _this2.state.isLoading,\n          block: true,\n          style: styles.submit_btn,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 41\n          }\n        }, __jsx(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 45\n          }\n        }, \"Discard\"))), __jsx(Form.Group, {\n          as: Col,\n          lg: 1,\n          md: 1,\n          sm: 2,\n          xs: 4,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 37\n          }\n        }, __jsx(Button, {\n          type: \"submit\",\n          variant: \"outline-success\",\n          size: \"sm\",\n          onClick: _this2.handleSubmit.bind(_this2),\n          disabled: _this2.state.isLoading,\n          block: true,\n          style: styles.submit_btn,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 41\n          }\n        }, __jsx(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 45\n          }\n        }, \"Add\"))));\n      })))), __jsx(Row, {\n        noGutters: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 17\n        }\n      }, __jsx(Card, {\n        style: styles.card,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }\n      }, __jsx(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 29\n        }\n      }, \"Add Category\")), __jsx(Card.Body, {\n        style: styles.card_body,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }\n      }, __jsx(Form.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 29\n        }\n      }, __jsx(InputGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 33\n        }\n      }, __jsx(Form.Control, {\n        type: \"text\",\n        size: \"sm\",\n        placeholder: \"Enter Category Value\",\n        name: \"sku\",\n        value: this.state.categoryValue,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            categoryValue: e.target.value\n          });\n        },\n        isInvalid: this.state.error,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 37\n        }\n      }), __jsx(Form.Control.Feedback, {\n        type: \"invalid\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 37\n        }\n      }, this.state.error))), __jsx(Form.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 29\n        }\n      }, __jsx(Button, {\n        type: \"submit\",\n        size: \"sm\",\n        onClick: this.handleSubmit.bind(this),\n        disabled: this.state.isLoading,\n        block: true,\n        style: styles.submit_btn,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 33\n        }\n      }, this.state.isLoading ? 'Uploading' : 'Add Category', this.state.isLoading ? __jsx(Spinner, {\n        animation: \"grow\",\n        size: \"sm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 61\n        }\n      }) : null))))));\n    }\n  }]);\n\n  return ProducCategories;\n}(Component);\n\nvar styles = {\n  title_row: {\n    borderBottom: '1px solid gray',\n    padding: '1.5% 4%'\n  },\n  title_fontawesome: {\n    color: 'gray',\n    marginRight: '3%',\n    width: '26px',\n    height: '26px',\n    maxHeight: '26px',\n    maxWidth: '26px'\n  },\n  title: {\n    color: 'gray'\n  },\n  card: {\n    width: '100%',\n    margin: '2%'\n  },\n  card_body: {// padding: '5%'\n  },\n  error: {\n    width: '100%',\n    textAlign: 'center',\n    color: '#DC3545',\n    fontSize: '14px'\n  }\n};\nexport default ProducCategories;","map":{"version":3,"sources":["C:/Users/MudassirR/Desktop/Muhalik/muhalikweb/src/pages/components/admin/dashboard/dashboard-contents/product-contents/product-categories.js"],"names":["Form","Row","Col","Card","InputGroup","Button","Spinner","FontAwesomeIcon","faPlus","faListAlt","faThumbsUp","faThumbsDown","React","Component","MuhalikConfig","axios","ProducCategories","props","state","isLoading","showToast","categoryValue","error","categoryList","url","PATH","get","response","setState","data","console","log","addCategory","styles","title_row","title_fontawesome","title","card","card_body","map","label","e","target","value","handleSubmit","bind","submit_btn","borderBottom","padding","color","marginRight","width","height","maxHeight","maxWidth","margin","textAlign","fontSize"],"mappings":"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","sourcesContent":["import { Form, Row, Col, Card, InputGroup, Button, Spinner } from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlus, faListAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-regular-svg-icons'\r\nimport React, { Component } from 'react';\r\nimport MuhalikConfig from '../../../../../../sdk/muhalik.config'\r\nimport axios from 'axios';\r\n\r\nclass ProducCategories extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n            showToast: false,\r\n            categoryValue: '',\r\n            error: '',\r\n            categoryList: [],\r\n        }\r\n    }\r\n\r\n    // Getting Product Categories from DB\r\n    async componentDidMount() {\r\n        const url = MuhalikConfig.PATH + '/api/products-categories/get-all';\r\n        try {\r\n            const response = await axios.get(url);\r\n            this.setState({ categoryList: response.data.data });\r\n            console.log('list:', response)\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async addCategory() {\r\n        // const url = MuhalikConfig.PATH + '/api/products/add';\r\n        // await axios.post(url, {\r\n        // this.state.categoryValue\r\n        // }, {\r\n        //     headers: { 'authorization': await getUncodededTokenFromStorage() }\r\n        // }).then(function (response) {\r\n        this.setState({ isLoading: true })\r\n        this.setState({ showToast: true })\r\n        return true;\r\n        // }).catch(function (error) {\r\n        //     currentComponent.setState({ isLoading: false });\r\n        //     alert('Error: ', error.response.data.message);\r\n        //     return false;\r\n        // });\r\n    }\r\n\r\n    handleSubmit() {\r\n        if (categoryValue == '') {\r\n            this.setState({ error: 'Enter Value First' })\r\n        } else {\r\n            this.setState({ isLoading: true })\r\n            this.setState({ error: '' })\r\n            this.addCategory(this);\r\n        }\r\n    } y\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Row style={styles.title_row} noGutters>\r\n                    <FontAwesomeIcon icon={faListAlt} style={styles.title_fontawesome} />\r\n                    <div className=\"mr-auto\" style={styles.title}> Product Categories </div>\r\n                </Row>\r\n                <Row noGutters>\r\n                    <Card style={styles.card}>\r\n                        <Card.Header>\r\n                            <div>Add Category Requests</div>\r\n                        </Card.Header>\r\n                        <Card.Body style={styles.card_body}>\r\n                            {this.state.categoryList.map((data) =>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} lg={3} md={3} sm={6} xs={12}>\r\n                                        <InputGroup>\r\n                                            <Form.Control\r\n                                                type=\"text\"\r\n                                                size=\"sm\"\r\n                                                placeholder=\"Enter Category Value\"\r\n                                                name=\"sku\"\r\n                                                value={data.label}\r\n                                                onChange={(e) => { this.setState({ categoryValue: e.target.value }) }}\r\n                                                isInvalid={this.state.error}\r\n                                            />\r\n                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                {this.state.error}\r\n                                            </Form.Control.Feedback>\r\n                                        </InputGroup>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} lg={1} md={1} sm={2} xs={4}>\r\n                                        <Button type=\"submit\" variant=\"outline-primary\" size=\"sm\" onClick={this.handleSubmit.bind(this)} disabled={this.state.isLoading} block style={styles.submit_btn}>\r\n                                            <div>Edit</div>\r\n                                        </Button>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} lg={1} md={1} sm={2} xs={4}>\r\n                                        <Button type=\"submit\" variant=\"outline-danger\" size=\"sm\" onClick={this.handleSubmit.bind(this)} disabled={this.state.isLoading} block style={styles.submit_btn}>\r\n                                            <div>Discard</div>\r\n                                        </Button>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} lg={1} md={1} sm={2} xs={4}>\r\n                                        <Button type=\"submit\" variant=\"outline-success\" size=\"sm\" onClick={this.handleSubmit.bind(this)} disabled={this.state.isLoading} block style={styles.submit_btn}>\r\n                                            <div>Add</div>\r\n                                        </Button>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                            )}\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Row>\r\n                {/* Add Categories */}\r\n                <Row noGutters>\r\n                    <Card style={styles.card}>\r\n                        <Card.Header>\r\n                            <div>Add Category</div>\r\n                        </Card.Header>\r\n                        <Card.Body style={styles.card_body}>\r\n                            <Form.Group>\r\n                                <InputGroup>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        placeholder=\"Enter Category Value\"\r\n                                        name=\"sku\"\r\n                                        value={this.state.categoryValue}\r\n                                        onChange={(e) => this.setState({ categoryValue: e.target.value })}\r\n                                        isInvalid={this.state.error}\r\n                                    />\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                        {this.state.error}\r\n                                    </Form.Control.Feedback>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                {/* <p style={styles.label}>Fields with <span> * </span> are mandatory.</p>\r\n                                <p style={styles.label}>For adding new size, color, link: Enter text and hit Enter or Tab key</p> */}\r\n                                <Button type=\"submit\" size=\"sm\" onClick={this.handleSubmit.bind(this)} disabled={this.state.isLoading} block style={styles.submit_btn}>\r\n                                    {this.state.isLoading ? 'Uploading' : 'Add Category'}\r\n                                    {this.state.isLoading ? <Spinner animation=\"grow\" size=\"sm\" /> : null}\r\n                                </Button>\r\n                            </Form.Group>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Row>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    title_row: {\r\n        borderBottom: '1px solid gray',\r\n        padding: '1.5% 4%'\r\n    },\r\n    title_fontawesome: {\r\n        color: 'gray',\r\n        marginRight: '3%',\r\n        width: '26px',\r\n        height: '26px',\r\n        maxHeight: '26px',\r\n        maxWidth: '26px',\r\n    },\r\n    title: {\r\n        color: 'gray'\r\n    },\r\n\r\n    card: {\r\n        width: '100%',\r\n        margin: '2%'\r\n    },\r\n    card_body: {\r\n        // padding: '5%'\r\n    },\r\n    error: {\r\n        width: '100%',\r\n        textAlign: 'center',\r\n        color: '#DC3545',\r\n        fontSize: '14px',\r\n    },\r\n}\r\nexport default ProducCategories\r\n"]},"metadata":{},"sourceType":"module"}