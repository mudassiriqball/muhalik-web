{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Form, Row, Accordion, Col, Card, InputGroup, Button, Spinner, Dropdown, ButtonGroup } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faListAlt, faSlidersH } from '@fortawesome/free-solid-svg-icons';\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-regular-svg-icons';\nimport React, { Component } from 'react';\nimport MuhalikConfig from '../../../../../../sdk/muhalik.config';\nimport GlobalStyleSheet from '../../../../.././../styleSheet';\nimport axios from 'axios';\nimport AlertModal from '../../../../alert-modal';\nimport ConfirmModal from '../../../../confirm-modal';\nimport TitleRow from '../../../../title-row';\nimport CardAccordion from '../../../../card_accordion';\nimport { getUncodededTokenFromStorage } from '../../../../../../sdk/core/authentication-service';\nlet categoryArray = [];\n\nclass ProducCategories extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleCategoryChange\", (e, index) => {\n      let copyArray = [];\n      copyArray = Object.assign([], this.state.categoriesList);\n      copyArray[index].value = e.target.value;\n\n      if (e.target.value != '' && e.target.value.length <= 20 && e.target.value.length >= 3) {\n        copyArray[index].error = '';\n      } else {\n        copyArray[index].error = 'Value must be 3-20 characters';\n      }\n\n      this.setState({\n        categoriesList: copyArray\n      });\n    });\n\n    _defineProperty(this, \"handleSubCategoryChange\", (e, index) => {\n      let copyArray = [];\n      copyArray = Object.assign([], this.state.subCategoriesList);\n      copyArray[index].value = e.target.value;\n\n      if (e.target.value != '' && e.target.value.length <= 20 && e.target.value.length >= 3) {\n        copyArray[index].error = '';\n      } else {\n        copyArray[index].error = 'Value must be 3-20 characters';\n      }\n\n      this.setState({\n        subCategoriesList: copyArray\n      });\n    });\n\n    this.state = {\n      isLoading: false,\n      showToast: false,\n      showConfirmDeleteModal: false,\n      delete_category_id: '',\n      delete_category_name: '',\n      index: '',\n      categoryValue: '',\n      subCategoryValue: '',\n      categoryError: '',\n      subCategoryError: '',\n      categoriesList: [],\n      subCategoriesList: [],\n      categoryRequestList: [],\n      editRequestedCategory: '',\n      showModalMessage: '',\n      showModal: false,\n      searchType: 'Category',\n      filterStr: ''\n    };\n  } // Getting Product Categories from DB\n\n\n  async componentDidMount() {\n    const url = MuhalikConfig.PATH + '/api/categories/categories';\n    const currentComponent = this;\n    await axios.get(url, {\n      headers: {\n        'authorization': await getUncodededTokenFromStorage()\n      }\n    }).then(response => {\n      currentComponent.setState({\n        categoriesList: response.data.category.docs,\n        subCategoriesList: response.data.sub_category.docs\n      });\n      categoryArray = response.data.category.docs;\n    }).catch(error => {\n      console.log('Caterories Fetchig Error: ', error);\n    });\n  }\n\n  async addCategory(currentComponent) {\n    let data = [];\n    data = {\n      category: {\n        value: this.state.categoryValue,\n        label: this.state.categoryValue\n      },\n      sub_category: {\n        value: this.state.subCategoryValue,\n        label: this.state.subCategoryValue\n      }\n    };\n    const url = MuhalikConfig.PATH + '/api/categories/category';\n    await axios.post(url, {\n      data\n    }, {\n      headers: {\n        'authorization': await getUncodededTokenFromStorage()\n      }\n    }).then(function (response) {\n      currentComponent.setState({\n        isLoading: false\n      });\n      currentComponent.setState({\n        showModalMessage: 'Product Category Added Successfully'\n      });\n      currentComponent.setState({\n        showModal: true\n      });\n      return true;\n    }).catch(function (error) {\n      currentComponent.setState({\n        isLoading: false\n      });\n\n      try {\n        alert('Error: ', error.response.data.message);\n      } catch (err) {\n        console.log('Request Failed:', error);\n      }\n\n      return false;\n    });\n  }\n\n  async handleSubmit() {\n    if (this.state.categoryValue == '' || this.state.subCategoryValue == '') {\n      if (this.state.categoryValue == '') {\n        this.setState({\n          categoryError: 'Enter Value First'\n        });\n      }\n\n      if (this.state.subCategoryValue == '') {\n        this.setState({\n          subCategoryError: 'Enter Value First'\n        });\n      }\n    } else {\n      this.setState({\n        isLoading: true\n      });\n      this.addCategory(this);\n    }\n  } // // Category Request \n  // // => Field Value \n  // handleCategoryRequestChange = (e, index) => {\n  //     let copyArray = [];\n  //     copyArray = Object.assign([], this.state.categoryRequestList);\n  //     copyArray[index].value = e.target.value;\n  //     if (e.target.value != '' && e.target.value.length <= 20 && e.target.value.length >= 3) {\n  //         copyArray[index].error = ''\n  //     } else {\n  //         copyArray[index].error = 'Value must be 3-20 characters'\n  //     }\n  //     this.setState({ categoryRequestList: copyArray })\n  // }\n  // //  => Edit\n  // async handleEditCategoryRequestClick(index) {\n  //     let copyArray = [];\n  //     copyArray = Object.assign([], this.state.categoryRequestList);\n  //     var obj = {};\n  //     obj['value'] = copyArray[index].value;\n  //     obj['label'] = false;\n  //     obj['prevVal'] = copyArray[index].value;\n  //     obj['error'] = '';\n  //     copyArray[index] = obj\n  //     await this.setState({ categoryRequestList: copyArray })\n  // }\n  // //  => Cancle\n  // handleCancelCategoryRequestClick(index) {\n  //     let copyArray = [];\n  //     copyArray = Object.assign([], this.state.categoryRequestList);\n  //     copyArray[index].value = copyArray[index].prevVal;\n  //     copyArray[index].label = true;\n  //     copyArray[index].error = '';\n  //     this.setState({ categoryRequestList: copyArray })\n  // }\n  // // Update\n  // handleUpdateCategoryRequestClick(index) {\n  //     let copyArray = [];\n  //     copyArray = Object.assign([], this.state.categoryRequestList);\n  //     if (copyArray[index].value == copyArray[index].prevVal) {\n  //         copyArray[index].error = 'Enter Different Value';\n  //         this.setState({ categoryRequestList: copyArray });\n  //     } else {\n  //         if (copyArray[index].error == '') {\n  //             copyArray[index].label = true;\n  //             this.setState({ categoryRequestList: copyArray, showModalMessage: 'Product Category Updated Successfully', showModal: true });\n  //         }\n  //     }\n  // }\n  // //  => Add\n  // handleAddCategoryRequestClick(index) {\n  //     let copyArray = [];\n  //     copyArray = Object.assign([], this.state.categoryRequestList);\n  //     copyArray.splice(index, 1);\n  //     this.setState({ categoryRequestList: copyArray, showModalMessage: 'Product Category Added Successfully', showModal: true })\n  //     this.addCategory(this)\n  // }\n  // //  => Delete\n  // handleDeleteCategoryRequestClick(index) {\n  //     let copyArray = [];\n  //     copyArray = Object.assign([], this.state.categoryRequestList);\n  //     copyArray.splice(index, 1);\n  //     this.setState({ categoryRequestList: copyArray, showModalMessage: 'Product Category Deleted', showModal: true })\n  // }\n  // All categories\n\n\n  handleFilterStrChange(e) {\n    this.setState({\n      filterStr: e.target.value\n    });\n    let array = [];\n\n    if (e.target.value != '') {\n      if (this.state.searchType == 'Category') {\n        this.state.categoriesList.filter(function (data) {\n          const value = data.value.toLowerCase();\n\n          if (value.includes(e.target.value.toLowerCase())) {\n            array.push(data);\n          }\n        });\n      } else {\n        let currentComponent = this;\n        this.state.subCategoriesList.filter(function (element) {\n          const value = element.value.toLowerCase();\n\n          if (value.includes(e.target.value.toLowerCase())) {\n            currentComponent.state.categoriesList.filter(function (e) {\n              if (element.category_id == e._id) {\n                array.push(e);\n              }\n            });\n          }\n        });\n        let a = [];\n        array.map(x => {\n          if (!a.includes(x)) {\n            a.push(x);\n          }\n        });\n        array = a;\n      }\n\n      this.setState({\n        categoriesList: array\n      });\n    } else {\n      this.setState({\n        categoriesList: categoryArray\n      });\n    }\n  } //  => Chane\n\n\n  //  => Edit\n  async handleEditCategoryClick(index) {\n    let copyArray = [];\n    copyArray = Object.assign([], this.state.categoriesList);\n    var obj = {};\n    obj['_id'] = copyArray[index]._id;\n    obj['value'] = copyArray[index].value;\n    obj['label'] = false;\n    obj['prevVal'] = copyArray[index].value;\n    obj['error'] = '';\n    copyArray[index] = obj;\n    await this.setState({\n      categoriesList: copyArray\n    });\n  } //  => Cancle\n\n\n  handleCancelCategoryClick(index) {\n    let copyArray = [];\n    copyArray = Object.assign([], this.state.categoriesList);\n    copyArray[index].value = copyArray[index].prevVal;\n    copyArray[index].error = '';\n    copyArray[index].label = true;\n    this.setState({\n      categoriesList: copyArray\n    });\n  } //  => Update\n\n\n  async handleUpdateCategoryClick() {\n    let copyArray = [];\n    let index = this.state.index;\n    copyArray = Object.assign([], this.state.categoriesList);\n\n    if (copyArray[index].value == copyArray[index].prevVal) {\n      copyArray[index].error = 'Enter Different Value';\n      this.setState({\n        categoryRequestList: copyArray\n      });\n    } else {\n      const currentComponent = this;\n      let data = [];\n      data = {\n        category: {\n          value: copyArray[index].value,\n          label: copyArray[index].value\n        }\n      };\n      const url = MuhalikConfig.PATH + `/api/categories/category/${copyArray[index]._id}`;\n      await axios.put(url, {\n        data\n      }, {\n        headers: {\n          'authorization': await getUncodededTokenFromStorage()\n        }\n      }).then(function (response) {\n        copyArray[index].label = copyArray[index].value;\n        copyArray[index].prevVal = copyArray[index].value;\n        currentComponent.setState({\n          categoriesList: copyArray,\n          showModalMessage: 'Product Category Updated Successfully',\n          showModal: true\n        });\n        categoryArray = copyArray;\n      }).catch(function (error) {\n        try {\n          alert('Error: ', error.response.data.message);\n        } catch (err) {\n          alert('Category Update Failed');\n          console.log('Request Failed:', error);\n        }\n      });\n    }\n  } // \n  // Sub Category\n\n\n  //  => Edit\n  async handleEditSubCategoryClick(index) {\n    let copyArray = [];\n    copyArray = Object.assign([], this.state.subCategoriesList);\n    var obj = {};\n    obj['_id'] = copyArray[index]._id;\n    obj['category_id'] = copyArray[index].category_id;\n    obj['value'] = copyArray[index].value;\n    obj['label'] = false;\n    obj['prevVal'] = copyArray[index].value;\n    obj['error'] = '';\n    copyArray[index] = obj;\n    await this.setState({\n      subCategoriesList: copyArray\n    });\n  } //  => Cancle\n\n\n  handleCancelSubCategoryClick(index) {\n    let copyArray = [];\n    copyArray = Object.assign([], this.state.subCategoriesList);\n    copyArray[index].value = copyArray[index].prevVal;\n    copyArray[index].error = '';\n    copyArray[index].label = true;\n    this.setState({\n      subCategoriesList: copyArray\n    });\n  } //  => Update\n\n\n  async handleUpdateSubCategoryClick(index) {\n    let copyArray = [];\n    copyArray = Object.assign([], this.state.subCategoriesList);\n\n    if (copyArray[index].value == copyArray[index].prevVal) {\n      copyArray[index].error = 'Enter Different Value';\n      this.setState({\n        categoryRequestList: copyArray\n      });\n    } else {\n      const currentComponent = this;\n      let data = [];\n      data = {\n        value: copyArray[index].value,\n        label: copyArray[index].value,\n        category_id: copyArray[index].category_id\n      };\n      const url = MuhalikConfig.PATH + `/api/categories/sub-category/${copyArray[index]._id}`;\n      await axios.put(url, {\n        data\n      }, {\n        headers: {\n          'authorization': await getUncodededTokenFromStorage()\n        }\n      }).then(function (response) {\n        copyArray[index].label = copyArray[index].value;\n        copyArray[index].prevVal = copyArray[index].value;\n        currentComponent.setState({\n          subCategoriesList: copyArray,\n          showModalMessage: 'Product Sub Category Updated Successfully',\n          showModal: true\n        });\n        categoryArray = copyArray;\n      }).catch(function (error) {\n        try {\n          alert('Error: ', error.response.data.message);\n        } catch (err) {\n          console.log('Request Failed:', error);\n        }\n      });\n    }\n  } //  => Delete\n\n\n  async handleDeleteSubCategoryClick() {\n    this.setState({\n      showConfirmDeleteModal: false\n    });\n    let copyArray = [];\n    const index = this.state.index;\n    const currentComponent = this;\n    copyArray = Object.assign([], this.state.subCategoriesList);\n    const url = MuhalikConfig.PATH + `/api/categories/sub-category/${copyArray[index]._id}`;\n    await axios.delete(url, {\n      headers: {\n        'authorization': await getUncodededTokenFromStorage()\n      }\n    }).then(function (response) {\n      copyArray.splice(index, 1);\n      currentComponent.setState({\n        subCategoriesList: copyArray,\n        showModalMessage: 'Product Category Deleted',\n        showModal: true\n      });\n      categoryArray = copyArray;\n    }).catch(function (error) {\n      try {\n        alert('Error: ', error.response.data.message);\n      } catch (err) {\n        console.log('Request Failed:', error);\n      }\n    });\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(AlertModal, {\n      onHide: e => this.setState({\n        showModal: false\n      }),\n      show: this.state.showModal,\n      header: 'Success',\n      message: this.state.showModalMessage,\n      iconname: faThumbsUp,\n      color: \"#00b300\"\n    }), __jsx(ConfirmModal, {\n      onHide: () => this.setState({\n        showConfirmDeleteModal: false\n      }),\n      show: this.state.showConfirmDeleteModal,\n      title: 'Delete Sub Category',\n      _id: this.state.delete_category_id,\n      name: this.state.delete_category_name,\n      confirm: this.handleDeleteSubCategoryClick.bind(this)\n    }), __jsx(TitleRow, {\n      icon: faListAlt,\n      title: ' Admin Dashboard / Product Categories'\n    }), __jsx(CardAccordion, {\n      title: 'Add New Category'\n    }, __jsx(Form.Row, null, __jsx(Form.Group, {\n      as: Col,\n      lg: 6,\n      md: 6,\n      sm: 6,\n      xs: 12\n    }, __jsx(Form.Label, {\n      style: styles.label\n    }, \"Category\"), __jsx(InputGroup, null, __jsx(Form.Control, {\n      type: \"text\",\n      size: \"sm\",\n      placeholder: \"Enter Category Value\",\n      name: \"sku\",\n      value: this.state.categoryValue,\n      onChange: e => this.setState({\n        categoryValue: e.target.value,\n        categoryError: ''\n      }),\n      isInvalid: this.state.categoryError\n    }), __jsx(Form.Control.Feedback, {\n      type: \"invalid\"\n    }, this.state.categoryError))), __jsx(Form.Group, {\n      as: Col,\n      lg: 6,\n      md: 6,\n      sm: 6,\n      xs: 12\n    }, __jsx(Form.Label, {\n      style: styles.label\n    }, \"Sub Category\"), __jsx(InputGroup, null, __jsx(Form.Control, {\n      type: \"text\",\n      size: \"sm\",\n      placeholder: \"Enter Category Value\",\n      name: \"sku\",\n      value: this.state.subCategoryValue,\n      onChange: e => this.setState({\n        subCategoryValue: e.target.value,\n        subCategoryError: ''\n      }),\n      isInvalid: this.state.subCategoryError\n    }), __jsx(Form.Control.Feedback, {\n      type: \"invalid\"\n    }, this.state.subCategoryError))), __jsx(Form.Group, {\n      as: Col\n    }, __jsx(Button, {\n      type: \"submit\",\n      size: \"sm\",\n      onClick: this.handleSubmit.bind(this),\n      disabled: this.state.isLoading,\n      block: true,\n      style: styles.submit_btn\n    }, this.state.isLoading ? 'Uploading' : 'Add Category', this.state.isLoading ? __jsx(Spinner, {\n      animation: \"grow\",\n      size: \"sm\"\n    }) : null)))), __jsx(CardAccordion, {\n      title: 'All Categories'\n    }, __jsx(Form.Row, {\n      style: {\n        margin: '0% 5%'\n      }\n    }, __jsx(Form.Group, {\n      as: Col\n    }, __jsx(InputGroup, null, __jsx(InputGroup.Prepend, null, __jsx(Form.Control, {\n      as: \"select\",\n      variant: \"primary\",\n      size: \"sm\",\n      value: this.state.searchType,\n      onChange: e => this.setState({\n        searchType: e.target.value\n      })\n    }, __jsx(\"option\", {\n      className: \"jsx-2287855846\"\n    }, \"Category\"), __jsx(\"option\", {\n      className: \"jsx-2287855846\"\n    }, \"Sub Category\"))), __jsx(Form.Control, {\n      type: \"text\",\n      size: \"sm\",\n      placeholder: \"Search Here\",\n      name: \"search\",\n      value: this.state.filterStr,\n      onChange: e => this.handleFilterStrChange(e)\n    })))), __jsx(\"hr\", {\n      className: \"jsx-2287855846\"\n    }), this.state.categoriesList && this.state.categoriesList.map((element, index) => __jsx(\"div\", {\n      key: index,\n      className: \"jsx-2287855846\"\n    }, __jsx(Form.Row, null, __jsx(Form.Group, {\n      as: Col,\n      lg: 6,\n      md: 6,\n      sm: 8,\n      xs: 12\n    }, __jsx(Form.Control, {\n      type: \"text\",\n      size: \"sm\",\n      name: \"sku\",\n      value: element.value,\n      disabled: element.label,\n      onChange: e => this.handleCategoryChange(e, index),\n      isInvalid: element.error\n    }), __jsx(Form.Control.Feedback, {\n      type: \"invalid\"\n    }, element.error)), __jsx(\"div\", {\n      className: \"jsx-2287855846\" + \" \" + 'sm_xs_show mr-auto'\n    }), __jsx(Form.Group, {\n      as: Col,\n      lg: \"auto\",\n      md: \"auto\",\n      sm: \"auto\",\n      xs: \"auto\"\n    }, __jsx(Button, {\n      type: \"submit\",\n      variant: element.label ? \"outline-primary\" : \"outline-success\",\n      size: \"sm\",\n      block: true,\n      style: styles.submit_btn,\n      onClick: element.label ? () => this.handleEditCategoryClick(index) : () => this.handleUpdateCategoryClick(index),\n      disabled: element.label ? false : element.error\n    }, __jsx(\"div\", {\n      className: \"jsx-2287855846\"\n    }, element.label ? 'Edit' : 'Update'))), __jsx(\"div\", {\n      className: \"jsx-2287855846\" + \" \" + 'sm_xs_show mr-auto'\n    }), __jsx(Form.Group, {\n      as: Col,\n      lg: \"auto\",\n      md: \"auto\",\n      sm: \"auto\",\n      xs: \"auto\"\n    }, __jsx(Button, {\n      type: \"submit\",\n      variant: element.label ? \"outline-danger\" : \"outline-primary\",\n      size: \"sm\",\n      block: true,\n      style: styles.submit_btn,\n      onClick: element.label ? null : () => this.handleCancelCategoryClick(index),\n      disabled: element.label ? true : false\n    }, __jsx(\"div\", {\n      className: \"jsx-2287855846\"\n    }, element.label ? 'Delete' : 'Cancel')))), __jsx(\"hr\", {\n      className: \"jsx-2287855846\" + \" \" + 'pb-0 pt-0 mt-0'\n    }), __jsx(Form.Row, null, this.state.subCategoriesList.map((e, i) => element._id == e.category_id ? __jsx(Col, {\n      lg: 6,\n      md: 6,\n      sm: 12,\n      xs: 12,\n      key: e._id\n    }, __jsx(Form.Row, null, __jsx(Form.Group, {\n      as: Col,\n      lg: \"auto\",\n      md: \"auto\",\n      sm: 8,\n      xs: 12\n    }, __jsx(Form.Control, {\n      type: \"text\",\n      size: \"sm\",\n      name: \"sku\",\n      value: e.value,\n      disabled: e.label,\n      onChange: event => this.handleSubCategoryChange(event, i),\n      isInvalid: e.error\n    }), __jsx(Form.Control.Feedback, {\n      type: \"invalid\"\n    }, e.error)), __jsx(\"div\", {\n      className: \"jsx-2287855846\" + \" \" + 'mr-auto'\n    }), __jsx(Form.Group, {\n      as: Col,\n      lg: \"auto\",\n      md: \"auto\",\n      sm: \"auto\",\n      xs: \"auto\"\n    }, __jsx(Button, {\n      type: \"submit\",\n      variant: e.label ? \"outline-primary\" : \"outline-success\",\n      size: \"sm\",\n      block: true,\n      style: styles.submit_btn,\n      onClick: e.label ? () => this.handleEditSubCategoryClick(i) : () => this.handleUpdateSubCategoryClick(i),\n      disabled: e.label ? false : e.error\n    }, __jsx(\"div\", {\n      className: \"jsx-2287855846\"\n    }, e.label ? 'Edit' : 'Update'))), __jsx(\"div\", {\n      className: \"jsx-2287855846\" + \" \" + 'sm_xs_show mr-auto'\n    }), __jsx(Form.Group, {\n      as: Col,\n      lg: \"auto\",\n      md: \"auto\",\n      sm: \"auto\",\n      xs: \"auto\"\n    }, __jsx(Button, {\n      type: \"submit\",\n      variant: e.label ? \"outline-danger\" : \"outline-primary\",\n      size: \"sm\",\n      block: true,\n      style: styles.submit_btn,\n      onClick: e.label ? () => this.setState({\n        showConfirmDeleteModal: true,\n        delete_category_id: e._id,\n        delete_category_name: e.value,\n        index: index\n      }) : () => this.handleCancelSubCategoryClick(i)\n    }, __jsx(\"div\", {\n      className: \"jsx-2287855846\"\n    }, e.label ? 'Delete' : 'Cancel'))))) : null)), __jsx(\"hr\", {\n      className: \"jsx-2287855846\" + \" \" + 'mb-0'\n    }), __jsx(\"hr\", {\n      className: \"jsx-2287855846\" + \" \" + 'pb-0 pt-0 mt-0'\n    })))), __jsx(_JSXStyle, {\n      id: \"2287855846\"\n    }, [\"@media only screen and (min-width:768px){.sm_xs_show.jsx-2287855846{display:none;}}\"]));\n  }\n\n}\n\nconst styles = {\n  title_row: {\n    borderBottom: '1px solid gray',\n    padding: '1.5% 4%'\n  },\n  title_fontawesome: {\n    color: 'gray',\n    marginRight: '3%',\n    width: '26px',\n    height: '26px',\n    maxHeight: '26px',\n    maxWidth: '26px'\n  },\n  title: {\n    color: 'gray'\n  },\n  card: {\n    // width: '100%',\n    margin: '2%'\n  },\n  card_body: {// padding: '5%'\n  },\n  label: {\n    fontSize: `${GlobalStyleSheet.form_label_fontsize}`\n  },\n  error: {\n    width: '100%',\n    textAlign: 'center',\n    color: '#DC3545',\n    fontSize: '14px'\n  },\n  accordin_fontawesome: {\n    color: `${GlobalStyleSheet.admin_primry_color}`,\n    marginRight: '10%',\n    width: '15px',\n    height: '15px',\n    maxHeight: '15px',\n    maxWidth: '15px'\n  }\n};\nexport default ProducCategories;","map":null,"metadata":{},"sourceType":"module"}