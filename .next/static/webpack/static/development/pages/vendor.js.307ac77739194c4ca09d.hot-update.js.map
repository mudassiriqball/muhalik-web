{"version":3,"file":"static/webpack/static\\development\\pages\\vendor.js.307ac77739194c4ca09d.hot-update.js","sources":["webpack:///./src/pages/components/vendor/dashboard/dashboard-contents/product-contents/add-new-contents/product-data.js"],"sourcesContent":["import { Form, Col, Row, Card, InputGroup, Button, Toast, Tab, Nav, Tabs, Accordion, Spinner, Dropdown } from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPlus, faKey, faSlidersH, faStoreAlt, faTruck, faTools, faDollarSign, faListAlt, faArrowAltCircleDown,\r\n} from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport CreatableSelect from 'react-select/creatable'\r\nimport ReactSelectMaterialUi from \"react-select-material-ui\"\r\nimport GlobalStyleSheet from '../../../../../../../styleSheet'\r\nimport MuhalikConfig from '../../../../../../../sdk/muhalik.config'\r\n\r\nimport Select, { components } from 'react-select'\r\nimport { groupedOptions } from '../../../../../../../sdk/consts/fields-data'\r\nimport AddNewFieldNameModal from './add-new-field-name-model'\r\n\r\nconst groupStyles = {\r\n    border: `1px solid ${GlobalStyleSheet.admin_primry_color}`,\r\n    borderRadius: '5px',\r\n    background: 'white',\r\n    color: `${GlobalStyleSheet.admin_primry_color}`,\r\n}\r\nconst coomponents = {\r\n    DropdownIndicator: null,\r\n}\r\nconst Group = props => (\r\n    <div style={groupStyles}>\r\n        <components.Group {...props} />\r\n    </div>\r\n)\r\n\r\nconst ProductData = props => {\r\n\r\n    const [imgLinkValue, setImgLinkValue] = React.useState('')\r\n    const [imgLinkError, setImgLinkError] = React.useState('')\r\n\r\n    return (\r\n        <Accordion as={Row} style={{ margin: '2%' }} defaultActiveKey=\"0\">\r\n            <Card style={styles.card}>\r\n                <Card.Header style={styles.card_header}>\r\n                    Product Data\r\n                    <div className='mr-auto'></div>\r\n                    <Form.Control\r\n                        style={{ width: '50%' }}\r\n                        as=\"select\"\r\n                        name=\"product_type\"\r\n                        size=\"sm\"\r\n                        value={props.product_type_values}\r\n                        onChange={(e) => { props.onChange(e), props.productTypeHandler(e) }}\r\n                    // disabled={props.isUpdateProduct}\r\n                    >\r\n                        <option value='simple-product'> Simple Product </option>\r\n                        <option value='variable-prouct'> Variable Product </option>\r\n                    </Form.Control>\r\n                    <div className='mr-auto'></div>\r\n                    <Accordion.Toggle eventKey=\"0\" style={{ background: 'none' }}>\r\n                        <FontAwesomeIcon size=\"xs\" icon={faSlidersH} style={styles.slider_fontawesome} />\r\n                    </Accordion.Toggle>\r\n                </Card.Header>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                    <Card.Body style={{ padding: '0.5%', margin: '0px' }}>\r\n                        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"Inventory\">\r\n                            <Row style={{ margin: '0px', minHeight: '300px' }} noGutters>\r\n                                <Col lg=\"auto\" md=\"auto\" sm=\"auto\" xs=\"auto\" style={{ background: `${GlobalStyleSheet.admin_primry_color}` }}>\r\n                                    <Nav variant=\"pills\" className=\"flex-column\" style={{ margin: '0px' }}>\r\n                                        <Nav.Item>\r\n                                            <div className=\"nav_link\">\r\n                                                <Nav.Link eventKey=\"Inventory\" style={styles.nav_link}>\r\n                                                    <FontAwesomeIcon size=\"xs\" icon={faStoreAlt} style={styles.product_fontawesome} />\r\n                                                    <div className=\"linkName\"> Inventory </div>\r\n                                                </Nav.Link>\r\n                                            </div>\r\n                                        </Nav.Item>\r\n\r\n                                        {props.isVariableProduct ?\r\n                                            <>\r\n                                                <Nav.Item>\r\n                                                    <div className=\"nav_link\">\r\n                                                        <Nav.Link eventKey=\"Attributes\" style={styles.nav_link}>\r\n                                                            <FontAwesomeIcon size=\"xs\" icon={faListAlt} style={styles.product_fontawesome} />\r\n                                                            <div className=\"linkName\"> Attributes </div>\r\n                                                        </Nav.Link>\r\n                                                    </div>\r\n                                                </Nav.Item>\r\n                                                <Nav.Item>\r\n                                                    <div className=\"nav_link\">\r\n                                                        <Nav.Link eventKey=\"Variations\" style={styles.nav_link}>\r\n                                                            <FontAwesomeIcon size=\"xs\" icon={faListAlt} style={styles.product_fontawesome} />\r\n                                                            <div className=\"linkName\"> Variations </div>\r\n                                                        </Nav.Link>\r\n                                                    </div>\r\n                                                </Nav.Item>\r\n                                            </>\r\n                                            :\r\n                                            <Nav.Item>\r\n                                                <div className=\"nav_link\">\r\n                                                    <Nav.Link eventKey=\"General\" style={styles.nav_link}>\r\n                                                        <FontAwesomeIcon size=\"xs\" icon={faSlidersH} style={styles.product_fontawesome} />\r\n                                                        <div className=\"linkName\"> General </div>\r\n                                                    </Nav.Link>\r\n                                                </div>\r\n                                            </Nav.Item>\r\n                                        }\r\n\r\n                                        <Nav.Item>\r\n                                            <div className=\"nav_link\">\r\n                                                <Nav.Link eventKey=\"Shipping\" style={styles.nav_link}>\r\n                                                    <FontAwesomeIcon size=\"xs\" icon={faTruck} style={styles.product_fontawesome} />\r\n                                                    <div className=\"linkName\"> Shipping </div>\r\n                                                </Nav.Link>\r\n                                            </div>\r\n                                        </Nav.Item>\r\n\r\n                                        <Nav.Item>\r\n                                            <div className=\"nav_link\">\r\n                                                <Nav.Link eventKey=\"Advanced\" style={styles.nav_link}>\r\n                                                    <FontAwesomeIcon size=\"xs\" icon={faTools} style={styles.product_fontawesome} />\r\n                                                    <div className=\"linkName\"> Advanced </div>\r\n                                                </Nav.Link>\r\n                                            </div>\r\n                                        </Nav.Item>\r\n                                    </Nav>\r\n                                </Col>\r\n                                <Col style={{ padding: '2%' }}>\r\n                                    <Tab.Content>\r\n                                        <Tab.Pane eventKey=\"General\">\r\n                                            {props.isVariableProduct ? null :\r\n                                                <>\r\n                                                    <Form.Row>\r\n                                                        <Form.Group as={Col} lg={4} md={4} sm={12} xs={12}>\r\n                                                            <Form.Label style={styles.label}>Product Price <span> * </span></Form.Label>\r\n                                                            <InputGroup>\r\n                                                                <Form.Control\r\n                                                                    type=\"number\"\r\n                                                                    size=\"sm\"\r\n                                                                    placeholder=\"Enter Product Price\"\r\n                                                                    name=\"product_price\"\r\n                                                                    value={props.product_price_values}\r\n                                                                    onChange={props.onChange}\r\n                                                                    isInvalid={props.product_price_touched && props.product_price_errors}\r\n                                                                />\r\n                                                                <Form.Control.Feedback type=\"invalid\">\r\n                                                                    {props.product_price_errors}\r\n                                                                </Form.Control.Feedback>\r\n                                                            </InputGroup>\r\n                                                        </Form.Group>\r\n                                                        <Form.Group as={Col} lg={4} md={4} sm={12} xs={12}>\r\n                                                            <Form.Label style={styles.label}>Product in Stock</Form.Label>\r\n                                                            <Form.Control type=\"number\"\r\n                                                                size=\"sm\"\r\n                                                                name=\"product_in_stock\"\r\n                                                                placeholder=\"Enter Product In Stock\"\r\n                                                                value={props.product_in_stock_values}\r\n                                                                onChange={props.onChange}\r\n                                                                isInvalid={props.product_in_stock_errors}\r\n                                                            />\r\n                                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                                {props.product_in_stock_errors}\r\n                                                            </Form.Control.Feedback>\r\n                                                        </Form.Group>\r\n                                                        <Form.Group as={Col} lg={4} md={4} sm={12} xs={12}>\r\n                                                            <Form.Label style={styles.label}>Brand Name</Form.Label>\r\n                                                            <InputGroup>\r\n                                                                <Form.Control\r\n                                                                    type=\"text\"\r\n                                                                    size=\"sm\"\r\n                                                                    placeholder=\"Enter Brand Name\"\r\n                                                                    name=\"product_brand_name\"\r\n                                                                    value={props.product_brand_name_values}\r\n                                                                    onChange={props.onChange}\r\n                                                                    isInvalid={props.product_brand_name_errors}\r\n                                                                />\r\n                                                                <Form.Control.Feedback type=\"invalid\">\r\n                                                                    {props.product_brand_name_errors}\r\n                                                                </Form.Control.Feedback>\r\n                                                            </InputGroup>\r\n                                                        </Form.Group>\r\n                                                    </Form.Row>\r\n                                                    <Form.Row>\r\n                                                        <Form.Group as={Col} lg={12} md={12} sm={12} xs={12} style={{ marginBottom: '5px' }}>\r\n                                                            <Form.Label style={styles.label}>Product Images <span> * </span></Form.Label>\r\n                                                            <input type=\"file\" style={{ margin: '0% 2%', fontSize: '13px' }}\r\n                                                                multiple onChange={props.fileSelectedHandler}\r\n                                                                name=\"image\" accept=\"image/*\"\r\n                                                            />\r\n                                                            <Form.Label style={styles.label}>\r\n                                                                <span>{imgLinkError}</span>\r\n                                                            </Form.Label>\r\n                                                            {/* </InputGroup> */}\r\n                                                        </Form.Group>\r\n                                                    </Form.Row>\r\n                                                    <Form.Row>\r\n                                                        {(props.imagePreviewArray || []).map((url, index) => (\r\n                                                            <div className=\"show-image\">\r\n                                                                <img style={{ height: '100px', width: '100px', margin: '1%' }} src={url} alt=\"...\" />\r\n                                                                <input className=\"deleteImage\" type=\"button\" onClick={() => props.deleteImage(index)} value=\"Delete\" />\r\n                                                            </div>\r\n                                                        ))}\r\n                                                    </Form.Row>\r\n                                                    <Form.Row>\r\n                                                        <Form.Group as={Col} lg={4} md={4} sm={12} xs={12}>\r\n                                                            <Form.Label style={styles.label}>Product Warranty (months) </Form.Label>\r\n                                                            <InputGroup>\r\n                                                                <Form.Control\r\n                                                                    type=\"number\"\r\n                                                                    size=\"sm\"\r\n                                                                    placeholder=\"Enter Product Warranty\"\r\n                                                                    name=\"product_warranty\"\r\n                                                                    value={props.product_warranty_values}\r\n                                                                    onChange={props.onChange}\r\n                                                                    isInvalid={props.product_warranty_errors}\r\n                                                                />\r\n                                                                <Form.Control.Feedback type=\"invalid\">\r\n                                                                    {props.product_warranty_errors}\r\n                                                                </Form.Control.Feedback>\r\n                                                            </InputGroup>\r\n                                                        </Form.Group>\r\n                                                        <Form.Group as={Col} lg={4} md={4} sm={12} xs={12}>\r\n                                                            <Form.Label style={styles.label}> Warranty Type </Form.Label>\r\n                                                            <InputGroup>\r\n                                                                <InputGroup.Prepend>\r\n                                                                    <Form.Control\r\n                                                                        as=\"select\"\r\n                                                                        name=\"warranty_type\"\r\n                                                                        size=\"sm\"\r\n                                                                        value={props.warranty_type_values}\r\n                                                                        onChange={props.onChange}\r\n                                                                        isInvalid={props.warranty_type_errors}\r\n                                                                    >\r\n                                                                        <option>Waranty Type</option>\r\n                                                                        <option> No Warranty </option>\r\n                                                                        <option> Brand Warranty </option>\r\n                                                                        <option> Local Warranty </option>\r\n                                                                        <option> Local Seller Warranty </option>\r\n                                                                        <option> Non-Local Warranty </option>\r\n                                                                        <option> Internationsl Warranty </option>\r\n                                                                        <option> Internationsl Seller Warranty </option>\r\n                                                                        <option> International Manufacturer Warranty </option>\r\n\r\n                                                                    </Form.Control>\r\n                                                                </InputGroup.Prepend>\r\n                                                                <Form.Control.Feedback type=\"invalid\">\r\n                                                                    {props.product_warranty_errors}\r\n                                                                </Form.Control.Feedback>\r\n                                                            </InputGroup>\r\n                                                        </Form.Group>\r\n                                                        <Form.Group as={Col} lg={4} md={4} sm={12} xs={12}>\r\n                                                            <Form.Label style={styles.label}>Product Discount</Form.Label>\r\n                                                            <InputGroup>\r\n                                                                <Form.Control\r\n                                                                    type=\"number\"\r\n                                                                    size=\"sm\"\r\n                                                                    placeholder=\"Enter Discount on on Product(%)\"\r\n                                                                    name=\"product_discount\"\r\n                                                                    value={props.product_discount_values}\r\n                                                                    onChange={props.onChange}\r\n                                                                    isInvalid={props.product_discount_errors}\r\n                                                                />\r\n                                                                <InputGroup.Prepend>\r\n                                                                    <Button variant='primary' size=\"sm\">%</Button>\r\n                                                                </InputGroup.Prepend>\r\n                                                                <Form.Control.Feedback type=\"invalid\">\r\n                                                                    {props.product_discount_errors}\r\n                                                                </Form.Control.Feedback>\r\n                                                            </InputGroup>\r\n                                                        </Form.Group>\r\n                                                    </Form.Row>\r\n                                                </>\r\n                                            }\r\n                                        </Tab.Pane>\r\n\r\n\r\n                                        <Tab.Pane eventKey=\"Inventory\">\r\n                                            <Form.Row>\r\n                                                <Form.Group as={Col} lg={6} md={6} sm={12} xs={12}>\r\n                                                    <Form.Label style={styles.label}>Product SKU</Form.Label>\r\n                                                    <InputGroup>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            size=\"sm\"\r\n                                                            placeholder=\"Enter SKU (Stock Keeping Unit)\"\r\n                                                            name=\"sku\"\r\n                                                            value={props.sku_values}\r\n                                                            onChange={props.onChange}\r\n                                                            isInvalid={props.sku_errors}\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {props.sku_errors}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </InputGroup>\r\n                                                </Form.Group>\r\n                                            </Form.Row>\r\n                                        </Tab.Pane>\r\n\r\n\r\n\r\n\r\n                                        <Tab.Pane eventKey=\"Shipping\">\r\n                                            <Form.Group as={Row} noGutters>\r\n                                                <Form.Label style={styles.label}>Weight (kg)</Form.Label>\r\n                                                <Form.Control type=\"number\"\r\n                                                    name=\"product_weight\"\r\n                                                    size=\"sm\"\r\n                                                    value={props.product_weight_values}\r\n                                                    onChange={props.onChange}\r\n                                                    isInvalid={props.product_weight_errors}\r\n                                                />\r\n                                                <Form.Control.Feedback type=\"invalid\">\r\n                                                    {props.product_weight_errors}\r\n                                                </Form.Control.Feedback>\r\n                                            </Form.Group>\r\n                                            <Form.Group as={Row} noGutters>\r\n                                                <Form.Label style={styles.label}>Dimensions (cm)</Form.Label>\r\n                                                <InputGroup>\r\n                                                    <InputGroup.Prepend>\r\n                                                        <Form.Control\r\n                                                            type=\"number\"\r\n                                                            name=\"dimension_length\"\r\n                                                            size=\"sm\"\r\n                                                            value={props.dimension_length_values}\r\n                                                            onChange={props.onChange}\r\n                                                            placeholder=\"Length\"\r\n                                                            isInvalid={props.dimension_length_errors}\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {props.dimension_length_errors}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </InputGroup.Prepend>\r\n                                                    <Form.Control\r\n                                                        type=\"number\"\r\n                                                        name=\"dimension_width\"\r\n                                                        size=\"sm\"\r\n                                                        value={props.dimension_width_values}\r\n                                                        placeholder=\"Width\"\r\n                                                        onChange={props.onChange}\r\n                                                        isInvalid={props.dimension_width_errors}\r\n                                                    />\r\n                                                    <InputGroup.Prepend>\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {props.dimension_width_errors}\r\n                                                        </Form.Control.Feedback>\r\n                                                        <Form.Control\r\n                                                            type=\"number\"\r\n                                                            name=\"dimension_height\"\r\n                                                            size=\"sm\"\r\n                                                            value={props.dimension_height_values}\r\n                                                            placeholder=\"Height\"\r\n                                                            onChange={props.onChange}\r\n                                                            isInvalid={props.dimension_height_errors}\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {props.dimension_height_errors}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </InputGroup.Prepend>\r\n                                                </InputGroup>\r\n                                            </Form.Group>\r\n                                            <Form.Row>\r\n                                                <Form.Group as={Col} lg={6} md={6} sm={12} xs={12}>\r\n                                                    <Form.Label style={styles.label}>Product Shipping Charges</Form.Label>\r\n                                                    <InputGroup>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            size=\"sm\"\r\n                                                            placeholder=\"Enter Product Shipping Charges\"\r\n                                                            name=\"shipping_charges\"\r\n                                                            value={props.shipping_charges_values}\r\n                                                            onChange={props.onChange}\r\n                                                            isInvalid={props.shipping_charges_errors}\r\n                                                        />\r\n                                                        <InputGroup.Prepend>\r\n                                                            <Button variant='primary' size=\"sm\">Riyal</Button>\r\n                                                        </InputGroup.Prepend>\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {props.shipping_charges_errors}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </InputGroup>\r\n                                                </Form.Group>\r\n                                                <Form.Group as={Col} lg={6} md={6} sm={12} xs={12}>\r\n                                                    <Form.Label style={styles.label}>Product Handling Fee</Form.Label>\r\n                                                    <InputGroup>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            size=\"sm\"\r\n                                                            placeholder=\"Enter Product Handling Fee\"\r\n                                                            name=\"handling_fee\"\r\n                                                            value={props.handling_fee_values}\r\n                                                            onChange={props.onChange}\r\n                                                            isInvalid={props.handling_fee_errors}\r\n                                                        />\r\n                                                        <InputGroup.Prepend>\r\n                                                            <Button variant='primary' size=\"sm\">Riyal</Button>\r\n                                                        </InputGroup.Prepend>\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {props.handling_fee_errors}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </InputGroup>\r\n                                                </Form.Group>\r\n                                            </Form.Row>\r\n                                        </Tab.Pane>\r\n\r\n                                        <Tab.Pane eventKey=\"Attributes\">\r\n                                            <ProductAttributes\r\n                                                setVariationsArray={props.setVariationsArray}\r\n                                            />\r\n                                        </Tab.Pane>\r\n\r\n                                        <Tab.Pane eventKey=\"Variations\">\r\n                                            <ProductVariations\r\n                                                variationsArray={props.variationsArray}\r\n                                                setVariationsArray={props.setVariationsArray}\r\n                                                setVariationsSaved={props.setVariationsSaved}\r\n                                                isVariationsArrayEmpty={props.variationsArray == ''}\r\n                                            />\r\n                                        </Tab.Pane>\r\n\r\n                                        <Tab.Pane eventKey=\"Advanced\">\r\n                                            <Form.Row >\r\n                                                <Form.Label style={styles.label}>Purchase Note</Form.Label>\r\n                                                <InputGroup>\r\n                                                    <Form.Control\r\n                                                        type=\"text\"\r\n                                                        size=\"sm\"\r\n                                                        placeholder=\"Enter Purchase Notes\"\r\n                                                        name=\"purchase_note\"\r\n                                                        value={props.purchase_note_values}\r\n                                                        onChange={props.onChange}\r\n                                                        isInvalid={props.purchase_note_errors}\r\n                                                    />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {props.purchase_note_errors}\r\n                                                    </Form.Control.Feedback>\r\n                                                </InputGroup>\r\n                                            </Form.Row>\r\n                                        </Tab.Pane>\r\n                                        {/* <Tab.Pane eventKey=\"Commission\">\r\n                                    Commission\r\n                                    </Tab.Pane> */}\r\n                                    </Tab.Content>\r\n                                </Col>\r\n                            </Row>\r\n                        </Tab.Container>\r\n                    </Card.Body>\r\n                </Accordion.Collapse>\r\n            </Card>\r\n            <style jsx>\r\n                {`\r\n                    span {\r\n                        color: red\r\n                    }\r\n                    @media (max-width: 991px) {\r\n                        .linkName {\r\n                            display: none\r\n                        }\r\n                    }\r\n                    div.show-image {\r\n                        position: relative;\r\n                        float:left;\r\n                        margin:5px;\r\n                    }\r\n                    div.show-image:hover img{\r\n                        opacity:0.5;\r\n                    }\r\n                    div.show-image:hover input {\r\n                        display: block;\r\n                    }\r\n                    div.show-image input {\r\n                        position:absolute;\r\n                        display:none;\r\n                    }\r\n                    div.show-image input.deleteImage {\r\n                        top:0;\r\n                        left:0;\r\n                        color: red;\r\n                        font-size: 13px\r\n                    }\r\n                `}\r\n            </style>\r\n        </Accordion >\r\n    )\r\n}\r\n\r\n\r\nfunction ProductAttributes(props) {\r\n    const [attributeName, setAttributeName] = React.useState('')\r\n    const [attributeValue, setAttributeValue] = React.useState('')\r\n\r\n    const [error, setError] = React.useState('')\r\n    const [modalShow, setModalShow] = React.useState(false)\r\n    const [successMessage, setSuccessMessage] = React.useState('')\r\n    const [attributesArray, setAttributesArray] = React.useState([])\r\n\r\n    function handleAddProductAttributeClick() {\r\n        setSuccessMessage('')\r\n        if (attributeName != '' && attributeValue != '') {\r\n            setError('')\r\n            const copyArray = Object.assign([], attributesArray)\r\n            copyArray.push({\r\n                attributeName: attributeName.value,\r\n                attributeValue: attributeValue,\r\n            })\r\n            console.log('aaaaaaa:', copyArray)\r\n            setAttributeName('')\r\n            setAttributeValue()\r\n            setAttributesArray(copyArray)\r\n        } else {\r\n            setError('Enter Field Name and Value')\r\n        }\r\n    }\r\n\r\n    function handleDeleteProductAttributeClick(index) {\r\n        const copyArray = Object.assign([], attributesArray)\r\n        copyArray.splice(index, 1)\r\n        setAttributesArray(copyArray)\r\n    }\r\n\r\n    function handleCreateVariationsClick() {\r\n        if (attributesArray != '') {\r\n            var allArrays = []\r\n            attributesArray.forEach(element => {\r\n                var item = []\r\n                element.attributeValue.map(e => {\r\n                    item.push(e.value)\r\n                })\r\n                allArrays.push(item)\r\n            })\r\n\r\n            const array = allPossibleCases(allArrays)\r\n            console.log('array:', array)\r\n\r\n            var data = []\r\n            array.forEach((element, index) => {\r\n                const split = element.split('-')\r\n                let item = []\r\n                split.forEach((e, i) => {\r\n                    item.push({ name: attributesArray[i].attributeName, value: e })\r\n                })\r\n                data.push({\r\n                    item: item, price: '', stock: '', image_link: [], imagePreviewArray: '',\r\n                    price_error: '', stock_error: '', image_link_error: '', custom_fields: []\r\n                })\r\n            })\r\n            setSuccessMessage('Variations Created Successfully')\r\n            setAttributesArray([])\r\n            props.setVariationsArray(data)\r\n        } else {\r\n            setError('Add some attributes first')\r\n        }\r\n    }\r\n\r\n    function allPossibleCases(arr) {\r\n        if (arr.length == 1) {\r\n            return arr[0]\r\n        } else {\r\n            var result = []\r\n            var allCasesOfRest = allPossibleCases(arr.slice(1))  // recur with the rest of array\r\n            for (var i = 0; i < allCasesOfRest.length; i++) {\r\n                for (var j = 0; j < arr[0].length; j++) {\r\n                    result.push(arr[0][j] + \"-\" + allCasesOfRest[i])\r\n                }\r\n            }\r\n            return result\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form.Row >\r\n                <Form.Group as={Col} lg={5} md={5} sm={12} xs={12} style={{ marginBottom: '0%', paddingBottom: '0%' }}>\r\n                    <Form.Label style={styles.label}>Field Name</Form.Label>\r\n                    <Select\r\n                        styles={GlobalStyleSheet.react_select_styles}\r\n                        options={groupedOptions}\r\n                        components={{ Group }}\r\n                        value={attributeName}\r\n                        onChange={(e) => setAttributeName(e)}\r\n                    />\r\n                    <Nav.Link style={{ padding: '0%', margin: '0%', fontSize: '14px' }} onClick={() => setModalShow(true)}>\r\n                        Add New\r\n                    </Nav.Link>\r\n                    <AddNewFieldNameModal\r\n                        show={modalShow}\r\n                        onHide={() => setModalShow(false)}\r\n                    />\r\n                </Form.Group>\r\n                <Form.Group as={Col} lg={7} md={7} sm={12} xs={12} style={{ marginBottom: '0%', paddingBottom: '0%' }}>\r\n                    <Form.Label style={styles.label}>Field Value </Form.Label>\r\n                    <CreatableSelect\r\n                        isMulti\r\n                        styles={GlobalStyleSheet.react_select_styles}\r\n                        onChange={(value) => setAttributeValue(value)}\r\n                        placeholder=\"Press enter to add more\"\r\n                    />\r\n                </Form.Group>\r\n            </Form.Row>\r\n            <Row noGutters>\r\n                <Form.Label style={styles.label}>\r\n                    <span style={{ color: 'red' }}>{error}</span>\r\n                </Form.Label>\r\n\r\n                <div className='mr-auto'></div>\r\n                <Button variant=\"outline-primary\" size='sm' onClick={handleAddProductAttributeClick} style={{ marginRight: '2%' }}>Add</Button>\r\n                <Button variant=\"outline-success\" size=\"sm\" onClick={handleCreateVariationsClick}>Create Variations</Button>\r\n            </Row>\r\n            <hr />\r\n            <Form.Label style={styles.label}>\r\n                {successMessage}\r\n            </Form.Label>\r\n            {attributesArray && attributesArray.map((element, index) =>\r\n                <Form.Row style={{ padding: '0%' }} key={index}>\r\n                    <Form.Group as={Col} lg={5} md={5} sm={12} xs={12}>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            size=\"sm\"\r\n                            value={element.attributeName}\r\n                            onChange={() => element.attributeName}\r\n                            disabled\r\n                        >\r\n                            <option>{element.attributeName}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} lg={7} md={7} sm={12} xs={12}>\r\n                        <InputGroup>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                size=\"sm\"\r\n                                placeholder=\"Enter Value\"\r\n                                name=\"sku\"\r\n                                value={element.attributeValue.map(e => (e.value)\r\n                                )}\r\n                                disabled\r\n                            />\r\n                            <Button variant=\"outline-danger\" size=\"sm\" style={{ marginLeft: '1%' }}\r\n                                onClick={() => handleDeleteProductAttributeClick(index)}> delete</Button>\r\n                        </InputGroup>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nconst createOption = (label) => ({\r\n    value: label,\r\n    label,\r\n})\r\n\r\n\r\nfunction ProductVariations(props) {\r\n    const [samePrice, setSamePrice] = React.useState('')\r\n    const [samePriceError, setSamePriceError] = React.useState('')\r\n\r\n    const [sameStock, setSameStock] = React.useState('')\r\n    const [sameStockError, setSameStockError] = React.useState('')\r\n\r\n    const [successMessage, setSuccessMessage] = React.useState('')\r\n\r\n    // Same Price For All Variations\r\n    function handleSamePriceApplyBtnClick() {\r\n        if (samePrice != '') {\r\n            setSamePriceError('')\r\n            const copyArray = Object.assign([], props.variationsArray)\r\n            copyArray.forEach(element => {\r\n                element.price = samePrice\r\n            })\r\n            props.setVariationsArray(copyArray)\r\n        } else {\r\n            setSamePriceError('Enter Value')\r\n        }\r\n    }\r\n    // Same Stock For All Variations\r\n    function handleSameStockApplyBtnClick() {\r\n        if (sameStock != '') {\r\n            setSameStockError('')\r\n            const copyArray = Object.assign([], props.variationsArray)\r\n            copyArray.forEach(element => {\r\n                element.stock = sameStock\r\n            })\r\n            props.setVariationsArray(copyArray)\r\n        } else {\r\n            setSameStockError('Enter Value')\r\n        }\r\n    }\r\n\r\n    function handlenPriceChange(e, index) {\r\n        const copyArray = Object.assign([], props.variationsArray)\r\n        let object = copyArray[index]\r\n        if (e.target.value >= 0) {\r\n            object.price = e.target.value\r\n            object.price_error = ''\r\n            copyArray[index] = object\r\n            props.setVariationsArray(copyArray)\r\n        }\r\n    }\r\n    function handleInStockChang(e, index) {\r\n        const copyArray = Object.assign([], props.variationsArray)\r\n        let object = copyArray[index]\r\n        if (e.target.value >= 0) {\r\n            object.stock = e.target.value\r\n            object.stock_error = ''\r\n            copyArray[index] = object\r\n            props.setVariationsArray(copyArray)\r\n        }\r\n    }\r\n\r\n    function handleDeleteVariationClick(index) {\r\n        const copyArray = Object.assign([], props.variationsArray)\r\n        copyArray.splice(index, 1)\r\n        props.setVariationsArray(copyArray)\r\n    }\r\n    function handleDeleteCustomFieldClick(index, i) {\r\n        const copyArray = Object.assign([], props.variationsArray)\r\n        copyArray[index].custom_fields.splice(i, 1)\r\n        props.setVariationsArray(copyArray)\r\n    }\r\n\r\n    function handleSaveVariationsClick() {\r\n        const copyArray = Object.assign([], props.variationsArray)\r\n        let flag = true\r\n        copyArray.forEach(element => {\r\n            if (element.price == '' || element.stock == '' || element.image_link.length == 0) {\r\n                flag = false\r\n                if (element.price == '') {\r\n                    element.price_error = 'Enter price'\r\n                }\r\n                if (element.stock == '') {\r\n                    element.stock_error = 'Enter stock'\r\n                }\r\n                console.log('elemnt.image_link:', element.image_link)\r\n                if (element.image_link.length == 0) {\r\n                    element.image_link_error = 'Enter image Link'\r\n                }\r\n            } else {\r\n                element.price_error = ''\r\n                element.stock_error = ''\r\n                element.image_link_error = ''\r\n            }\r\n        })\r\n        if (flag == true) {\r\n            props.setVariationsSaved(true)\r\n            setSuccessMessage('Variations saved Successfully')\r\n        }\r\n        props.setVariationsArray(copyArray)\r\n    }\r\n\r\n    function handleVariationsErrorCheck(element) {\r\n        if (element.price_error != '' || element.image_link_error != '') {\r\n            return '1px solid red'\r\n        }\r\n        else {\r\n            return 'none'\r\n        }\r\n    }\r\n\r\n    function handleItemValueChange(event, index, i) {\r\n        const copyArray = Object.assign([], props.variationsArray)\r\n        let obj = copyArray[index].item\r\n        obj[i].value = event.target.value\r\n        props.setVariationsArray(copyArray)\r\n    }\r\n\r\n    async function fileSelectedHandler(e, index) {\r\n        const copyArray = Object.assign([], props.variationsArray)\r\n        let object = copyArray[index]\r\n\r\n        if (e.target.files != '') {\r\n            object.image_link = [...object.image_link, ...e.target.files]\r\n            let array = []\r\n            object.image_link.forEach(element => {\r\n                array.push(URL.createObjectURL(element))\r\n            })\r\n            object.imagePreviewArray = array\r\n            object.image_link_error = ''\r\n            copyArray[index] = object\r\n            props.setVariationsArray(copyArray)\r\n        }\r\n    }\r\n    function deleteImage(index, i) {\r\n        const copyArray = Object.assign([], props.variationsArray)\r\n        let obj = copyArray[index]\r\n\r\n        obj.image_link.splice(i, 1)\r\n        obj.imagePreviewArray.splice(i, 1)\r\n        copyArray[index] = obj\r\n        props.setVariationsArray(copyArray)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {props.isVariationsArrayEmpty ?\r\n                <div style={{ width: '100%', textAlign: 'center', marginTop: '10%' }}>\r\n                    <Form.Label>Please First add Attributes from Attributes Tab</Form.Label>\r\n                </div>\r\n                :\r\n                <>\r\n                    <Form.Row>\r\n                        {/* Same Price */}\r\n                        <Form.Group as={Col} >\r\n                            <Form.Label style={styles.label}> Same Price</Form.Label>\r\n                            <InputGroup>\r\n                                <Form.Control\r\n                                    type=\"number\"\r\n                                    size=\"sm\"\r\n                                    placeholder=\"Enter Price\"\r\n                                    name=\"samePrice\"\r\n                                    value={samePrice}\r\n                                    onChange={(e) => {\r\n                                        if (e.target.value >= 0) {\r\n                                            setSamePrice(e.target.value)\r\n                                            setSamePriceError('')\r\n                                        }\r\n                                    }}\r\n                                    isInvalid={samePriceError}\r\n                                />\r\n                                <InputGroup.Prepend>\r\n                                    <Button variant='primary' style={styles.label} onClick={handleSamePriceApplyBtnClick} size=\"sm\">Apply</Button>\r\n                                </InputGroup.Prepend>\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    {props.samePriceError}\r\n                                </Form.Control.Feedback>\r\n                            </InputGroup>\r\n                        </Form.Group>\r\n                        {/* Same Stock */}\r\n                        <Form.Group as={Col} >\r\n                            <Form.Label style={styles.label}> Same Stock</Form.Label>\r\n                            <InputGroup>\r\n                                <Form.Control\r\n                                    type=\"number\"\r\n                                    size=\"sm\"\r\n                                    placeholder=\"Enter Stock\"\r\n                                    name=\"sameStock\"\r\n                                    value={sameStock}\r\n                                    onChange={(e) => {\r\n                                        if (e.target.value >= 0) {\r\n                                            setSameStock(e.target.value)\r\n                                            setSameStockError('')\r\n                                        }\r\n                                    }}\r\n                                    isInvalid={sameStockError}\r\n                                />\r\n                                <InputGroup.Prepend>\r\n                                    <Button variant='primary' style={styles.label} onClick={handleSameStockApplyBtnClick} size=\"sm\">Apply</Button>\r\n                                </InputGroup.Prepend>\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    {props.sameStockError}\r\n                                </Form.Control.Feedback>\r\n                            </InputGroup>\r\n                        </Form.Group>\r\n                        {/* Same Image Link */}\r\n                        {/* <Form.Group as={Col} >\r\n                            <Form.Label style={styles.label}> Same Image</Form.Label>\r\n                            <InputGroup>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    size=\"sm\"\r\n                                    placeholder=\"Enter Image Link\"\r\n                                    name=\"sameImgLinkInput\"\r\n                                    value={sameImgLink}\r\n                                    onChange={(e) => {\r\n                                        if (e.target.value != '') {\r\n                                            setSameImgLink(e.target.value)\r\n                                            setSameImgLinkError('')\r\n                                        }\r\n                                    }}\r\n                                    isInvalid={sameImgLinkError}\r\n                                />\r\n                                <InputGroup.Prepend>\r\n                                    <Button variant='primary' style={styles.label} onClick={handleSameImgLinkApplyBtnClick} size=\"sm\">Apply</Button>\r\n                                </InputGroup.Prepend>\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    {props.sameImgLinkError}\r\n                                </Form.Control.Feedback>\r\n                            </InputGroup>\r\n                        </Form.Group> */}\r\n                    </Form.Row>\r\n                    <hr style={{ marginTop: '0%' }} />\r\n                    {props.variationsArray && props.variationsArray.map((element, index) =>\r\n                        <>\r\n                            <Accordion>\r\n                                <Row noGutters style={{ border: handleVariationsErrorCheck(element) }}>\r\n                                    {element.item && element.item.map((e, i) =>\r\n                                        <Form.Group as={Col} lg={3} md={3} sm={6} xs={6} key={i} >\r\n                                            <Form.Control\r\n                                                type=\"text\"\r\n                                                size=\"sm\"\r\n                                                placeholder=\"Enter Value\"\r\n                                                name=\"sku\"\r\n                                                value={e.value}\r\n                                                onChange={(event) => handleItemValueChange(event, index, i)}\r\n                                            />\r\n                                        </Form.Group>\r\n                                    )}\r\n\r\n                                    <div className=\"mr-auto\"></div>\r\n                                    <Accordion.Toggle as={Form.Group} eventKey=\"0\">\r\n                                        <Button variant=\"outline-primary\" size=\"sm\" style={{ marginRight: '10px' }}>\r\n                                            <FontAwesomeIcon size=\"xs\" icon={faSlidersH} style={styles.slider_fontawesome} />\r\n                                        </Button>\r\n                                    </Accordion.Toggle>\r\n                                    <Form.Group style={{ float: 'right' }}>\r\n                                        <Button variant=\"outline-danger\" size=\"sm\" style={{ marginLeft: '1%' }}\r\n                                            onClick={() => handleDeleteVariationClick(index)}> delete</Button>\r\n                                    </Form.Group>\r\n                                </Row>\r\n                                <Accordion.Collapse eventKey=\"0\">\r\n                                    <>\r\n                                        <Form.Row>\r\n                                            <Form.Group as={Col} lg={4} md={4} sm={6} xs={6}>\r\n                                                <Form.Label style={styles.label}>Product Price <span> * </span></Form.Label>\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    size=\"sm\"\r\n                                                    placeholder=\"Enter Product Price\"\r\n                                                    name=\"product_price\"\r\n                                                    value={element.price}\r\n                                                    onChange={(e) => handlenPriceChange(e, index)}\r\n                                                    isInvalid={element.price_error}\r\n                                                />\r\n                                                <Form.Control.Feedback type=\"invalid\">\r\n                                                    {element.price_error}\r\n                                                </Form.Control.Feedback>\r\n                                            </Form.Group>\r\n                                            <Form.Group as={Col} lg={4} md={4} sm={6} xs={6}>\r\n                                                <Form.Label style={styles.label}>Product in Stock <span> * </span></Form.Label>\r\n                                                <Form.Control type=\"number\"\r\n                                                    size=\"sm\"\r\n                                                    name=\"product_in_stock\"\r\n                                                    placeholder=\"Enter Product In Stock\"\r\n                                                    value={element.stock}\r\n                                                    onChange={(e) => handleInStockChang(e, index)}\r\n                                                    isInvalid={element.stock_error}\r\n                                                />\r\n                                                <Form.Control.Feedback type=\"invalid\">\r\n                                                    {element.stock_error}\r\n                                                </Form.Control.Feedback>\r\n                                            </Form.Group>\r\n                                            <Form.Group as={Col} lg={4} md={4} sm={12} xs={12}>\r\n                                                <Form.Label style={styles.label}>Product Images <span> * </span></Form.Label>\r\n                                                <input type=\"file\" style={{ margin: '0% 2%', fontSize: '13px' }}\r\n                                                    multiple onChange={(e) => fileSelectedHandler(e, index)}\r\n                                                    name=\"image\" accept=\"image/*\"\r\n                                                />\r\n                                                <Form.Label style={styles.label}>\r\n                                                    <span>{element.image_link_error}</span>\r\n                                                </Form.Label>\r\n                                            </Form.Group>\r\n                                        </Form.Row>\r\n                                        <Form.Row>\r\n                                            {(element.imagePreviewArray || []).map((url, i) => (\r\n                                                <div className=\"show-image\">\r\n                                                    <img style={{ height: '100px', width: '100px', margin: '1%' }} src={url} alt=\"...\" />\r\n                                                    <input className=\"deleteImage\" type=\"button\" onClick={() => deleteImage(index, i)} value=\"Delete\" />\r\n                                                </div>\r\n                                            ))}\r\n                                        </Form.Row>\r\n                                        <Form.Row>\r\n                                            {element.custom_fields && element.custom_fields.map((e, i) =>\r\n                                                <Form.Group as={Col} lg={3} md={3} sm={6} xs={6} key={i} >\r\n                                                    <Form.Label style={styles.label}>{e.name}</Form.Label>\r\n                                                    <InputGroup>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            size=\"sm\"\r\n                                                            placeholder=\"Enter Value\"\r\n                                                            name=\"sku\"\r\n                                                            value={e.value}\r\n                                                            onChange={() => e.attributeValue}\r\n                                                        />\r\n                                                        <InputGroup.Prepend>\r\n                                                            <Button variant=\"outline-danger\" size=\"sm\" style={{ marginLeft: '1%' }}\r\n                                                                onClick={() => handleDeleteCustomFieldClick(index, i)}> delete</Button>\r\n                                                        </InputGroup.Prepend>\r\n                                                    </InputGroup>\r\n                                                </Form.Group>\r\n                                            )}\r\n                                        </Form.Row>\r\n                                    </>\r\n                                </Accordion.Collapse>\r\n                            </Accordion>\r\n                            <hr style={{ marginTop: '0%' }} />\r\n                        </>\r\n                    )}\r\n                    <Button variant=\"outline-success\" size=\"sm\" block onClick={handleSaveVariationsClick}> Save Variations</Button>\r\n                </>\r\n            }\r\n            <style jsx>\r\n                {`\r\n                    span{\r\n                        color: red\r\n                    }\r\n                    div.show-image {\r\n                        position: relative;\r\n                        float:left;\r\n                        margin:5px;\r\n                    }\r\n                    div.show-image:hover img{\r\n                        opacity:0.5;\r\n                    }\r\n                    div.show-image:hover input {\r\n                        display: block;\r\n                    }\r\n                    div.show-image input {\r\n                        position:absolute;\r\n                        display:none;\r\n                    }\r\n                    div.show-image input.deleteImage {\r\n                        top:0;\r\n                        left:0;\r\n                        color: red;\r\n                        font-size: 13px\r\n                    }\r\n                `}\r\n            </style>\r\n        </>\r\n    )\r\n}\r\n\r\nconst styles = {\r\n    nav_link: {\r\n        color: 'white',\r\n        fontSize: '12px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: '45px',\r\n    },\r\n    row: {\r\n        margin: '2%',\r\n        padding: '0%'\r\n    },\r\n    card: {\r\n        width: '100%',\r\n        border: '1px solid lightgray'\r\n    },\r\n    card_header: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        fontSize: `${GlobalStyleSheet.card_header_fontsize}`,\r\n        background: `${GlobalStyleSheet.card_header_background}`,\r\n    },\r\n    label: {\r\n        fontSize: `${GlobalStyleSheet.form_label_fontsize}`,\r\n    },\r\n    fontawesome: {\r\n        color: `${GlobalStyleSheet.primary_text_color}`,\r\n        width: '15px',\r\n        height: '15px',\r\n        maxHeight: '15px',\r\n        maxWidth: '15px',\r\n    },\r\n    product_fontawesome: {\r\n        color: `${GlobalStyleSheet.primary_text_color}`,\r\n        marginRight: '10%',\r\n        width: '15px',\r\n        height: '15px',\r\n        maxHeight: '15px',\r\n        maxWidth: '15px',\r\n    },\r\n    slider_fontawesome: {\r\n        color: `${GlobalStyleSheet.admin_primry_color}`,\r\n        width: '15px',\r\n        height: '15px',\r\n        maxHeight: '15px',\r\n        maxWidth: '15px',\r\n    },\r\n}\r\n\r\nexport default ProductData"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAA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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAabA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAvGA;AA0GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAlMA;AAAA;AAAA;AAmOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AALA;AAxCA;AAiDA;;;;A","sourceRoot":""}