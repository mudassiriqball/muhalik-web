{"version":3,"file":"static/webpack/static\\development\\pages\\vendor.js.85072d0b50965fc149cb.hot-update.js","sources":["webpack:///./src/pages/components/vendor/dashboard/dashboard-contents/product-contents/add-new.js"],"sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport { Accordion, Form, Col, Row, Card, InputGroup, Button, Toast, Alert, Nav, Tabs, Spinner } from 'react-bootstrap';\r\nimport { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faPlus, faKey, faSlidersH, faStoreAlt, faTruck, faTools, faDollarSign, faExclamationTriangle, faListAlt\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-regular-svg-icons';\r\n\r\nimport Select from 'react-select';\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport ReactSelectMaterialUi from \"react-select-material-ui\";\r\nimport ShowToast from '../../../../toast';\r\nimport GlobalStyleSheet from '../../../../../../styleSheet';\r\nimport MuhalikConfig from '../../../../../../sdk/muhalik.config';\r\nimport { getUncodededTokenFromStorage } from '../../../../../../sdk/core/authentication-service';\r\nimport CustomFields from './add-new-contents/custom-fields';\r\nimport ProductData from './add-new-contents/product-data';\r\nimport product_size_options from '../../../../../../sdk/consts/product-size-options'\r\nimport product_color_options from '../../../../../../sdk/consts/product-color-options'\r\n\r\nconst product_attributes_list = [\r\n    { value: 'Size', label: 'Size' },\r\n    { value: 'Color', label: 'Color' },\r\n    { value: 'Price', label: 'Price' },\r\n]\r\n\r\n// Option List for select Product Category (when offline)\r\nconst product_categories = [\r\n    { value: 'Shoe', label: 'Shoe' },\r\n    { value: 'Cloth', label: 'Cloth' },\r\n    { value: 'Shirt', label: 'Shirt' },\r\n    { value: 'Pant', label: 'Pant' }\r\n]\r\n\r\n// For React-Select\r\nconst components = {\r\n    DropdownIndicator: null,\r\n};\r\n// Model For React-Select\r\nconst createOption = (label) => ({\r\n    value: label,\r\n    label,\r\n});\r\n\r\n// Yup Schema for validation fields\r\nconst schema = yup.object({\r\n    product_name: yup.string().required(\"Enter Product Name\")\r\n        .min(2, \"Must have at least 2 characters\")\r\n        .max(40, \"Can't be longer than 40 characters\"),\r\n    product_description: yup.string()\r\n        .min(5, \"Must have at least 5 characters\")\r\n        .max(200, \"Can't be longer than 200 characters\"),\r\n\r\n    // Product Data\r\n    product_type: yup.string(),\r\n\r\n    // => Inventory\r\n    sku: yup.string()\r\n        .min(0, 'Enter Between 0-100')\r\n        .max(100, 'Enter Between 0-100'),\r\n\r\n    // => General(Simple-Product)\r\n    product_price: yup.number()\r\n        .integer(\"Enter Only Numbers\")\r\n        .positive('Enter Between 1-1000000')\r\n        .max(1000000, 'Enter Between 1-1000000'),\r\n    product_in_stock: yup.number()\r\n        .integer(\"Enter Only Numbers\")\r\n        .min(1, \"Must grater than 1 digit\")\r\n        .max(1000000, \"Can't be longer than 1000000\"),\r\n    product_brand_name: yup.string()\r\n        .min(2, \"Must have at least 2 characters\")\r\n        .max(40, \"Can't be longer than 40 characters\"),\r\n    product_image_link: yup.string(),\r\n    product_warranty: yup.number().integer(\"Enter Only Numbers\")\r\n        .min(0, 'Enter Between 0-200')\r\n        .max(200, 'Enter Between 0-200'),\r\n    warranty_type: yup.string(),\r\n    product_discount: yup.number().integer(\"Enter Only Numbers\")\r\n        .min(0, 'Enter Between 0-100')\r\n        .max(100, 'Enter Between 0-100'),\r\n\r\n    // => Attributes (Variable Product)\r\n    purchase_note: yup.string(),\r\n\r\n    // => Variations (Variable Product)\r\n    product_variations: yup.string(),\r\n\r\n    // => Shipping\r\n    product_weight: yup.number()\r\n        .integer(\"Enter Only Numbers\")\r\n        .min(0, \"Must grater than 0 digit\")\r\n        .max(100, \"Can't be longer than 100\"),\r\n    dimension_length: yup.number()\r\n        .integer(\"Enter Only Numbers\")\r\n        .min(0, \"Must grater than 0 digit\")\r\n        .max(100, \"Can't be longer than 100\"),\r\n    dimension_width: yup.number()\r\n        .integer(\"Enter Only Numbers\")\r\n        .min(0, \"Must grater than 0 digit\")\r\n        .max(100, \"Can't be longer than 100\"),\r\n    dimension_height: yup.number()\r\n        .integer(\"Enter Only Numbers\")\r\n        .min(0, \"Must grater than 0 digit\")\r\n        .max(100, \"Can't be longer than 100\"),\r\n    shipping_charges: yup.number().integer(\"Enter Only Numbers\")\r\n        .min(0, 'Enter Between 0-100')\r\n        .max(100, 'Enter Between 0-100'),\r\n    handling_fee: yup.number()\r\n        .integer(\"Enter Only Numbers\")\r\n        .min(0, \"Must grater than 0 digit\")\r\n        .max(100, \"Can't be longer than 100\"),\r\n\r\n    // => Advanve\r\n    purchase_note: yup.string(),\r\n\r\n    // Custom Fields\r\n    custom_fields: yup.string(),\r\n\r\n    product_category: yup.string(),\r\n\r\n    dangerous_goods: yup.string(),\r\n\r\n    product_tags: yup.string(),\r\n\r\n\r\n});\r\n\r\n\r\nclass AddNew extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n            showToast: false,\r\n            showVariationsErrorAlert: false,\r\n            showSimpleProductPriceImgLinkErrorrAlert: false,\r\n            isVariableProduct: false,\r\n\r\n            product_categories_options: product_categories,\r\n            productCategories: '',\r\n            categoryError: 'no_error',\r\n            categoryErrorDiv: 'BorderDiv',\r\n\r\n            productTags: [],\r\n\r\n            warrantyType: 'Year',\r\n            inputValue: '',\r\n            simple_product_image_link: [],\r\n            simple_product_image_link: [],\r\n\r\n\r\n            image_linkError: 'no_error',\r\n            image_linkErrorDiv: 'BorderDiv',\r\n\r\n            // Product Attributes\r\n            productAttributesArray: [],\r\n            productAttributeName: '',\r\n            productAttributeValue: '',\r\n            productAttributeError: '',\r\n            productAttributeNameSelected: '',\r\n\r\n            variationsArray: [],\r\n            isVariationsSaved: false,\r\n            samePriceInput: '',\r\n\r\n            // Custom Fields\r\n            customFieldsArray: [],\r\n            customFieldName: '',\r\n            customFieldValue: '',\r\n            customFieldError: '',\r\n            customFieldNameSelected: '',\r\n\r\n            // Dangerous Goods\r\n            dangerousGoodsArray: [],\r\n        };\r\n        this.handleProductTypeChange = this.handleProductTypeChange.bind(this);\r\n        this.addCustomFieldBtnClicked = this.addCustomFieldBtnClicked.bind(this);\r\n        // this.uploadProduct = this.uploadProduct.bind(this);\r\n    }\r\n\r\n    // Getting Product Categories from DB\r\n    async componentDidMount() {\r\n        const url = MuhalikConfig.PATH + '/api/products-categories/get-all';\r\n        try {\r\n            const response = await axios.get(url);\r\n            this.setState({ product_categories_options: response.data.data });\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n    //  Submit data to api\r\n    async uploadProduct(data, currentComponent) {\r\n        console.log('data: ', data)\r\n        // const url = MuhalikConfig.PATH + '/api/products/add';\r\n        // await axios.post(url, {\r\n        //     data\r\n        // }, {\r\n        //     headers: { 'authorization': await getUncodededTokenFromStorage() }\r\n        // }).then(function (response) {\r\n        currentComponent.setState({ isLoading: false });\r\n        currentComponent.setState({ showToast: true });\r\n        return true;\r\n        // }).catch(function (error) {\r\n        //     currentComponent.setState({ isLoading: false });\r\n        //     alert('Error: ', error.response.data.message);\r\n        //     return false;\r\n        // });\r\n    }\r\n\r\n    handleProductTagChange = (arr) => {\r\n        this.setState({ productTags: arr });\r\n    };\r\n\r\n\r\n    // Product Category\r\n    handleProductCategoryChange = (arr) => {\r\n        this.setState({ productCategories: arr, categoryError: 'no_error', categoryErrorDiv: 'BorderDiv' });\r\n    }\r\n\r\n    // Simple Product Image Link\r\n    handleSimpleProductImageLinkChange = (arr, actionMeta) => {\r\n        this.setState({ simple_product_image_link: arr, image_linkError: 'no_error', image_linkErrorDiv: 'BorderDiv' });\r\n    };\r\n    handleSimpleProductImageLinkInputChange = (aa) => {\r\n        this.setState({ inputValue: aa });\r\n    };\r\n    handleSimpleProductImage_linkKeyDown = (event) => {\r\n        const inputValue = this.state.inputValue;\r\n        const simple_product_image_link = this.state.simple_product_image_link;\r\n        if (!inputValue) return;\r\n        switch (event.key) {\r\n            case 'Enter':\r\n            case 'Tab':\r\n                this.setState({\r\n                    inputValue: '',\r\n                    simple_product_image_link: [...simple_product_image_link, createOption(inputValue)],\r\n                });\r\n                event.preventDefault();\r\n        }\r\n    };\r\n\r\n\r\n\r\n    handleProductTypeChange(e) {\r\n        if (e.target.value == 'variable-prouct') {\r\n            this.setState({ isVariableProduct: true });\r\n        }\r\n        else {\r\n            this.setState({ isVariableProduct: false });\r\n        }\r\n    }\r\n\r\n    // Product Attributes\r\n    handleProductAttributeNameChange(e) {\r\n        this.setState({ productAttributeName: e.value })\r\n        this.setState({ productAttributeNameSelected: e })\r\n    }\r\n    handleProductAttributeValueChange = (e) => {\r\n        this.setState({ productAttributeValue: e.target.value })\r\n    }\r\n    handleAddProductAttributeClicked = () => {\r\n        if (this.state.productAttributeName != '' && this.state.productAttributeValue != '') {\r\n            this.setState({ productAttributeError: '' })\r\n            const copyArray = Object.assign([], this.state.productAttributesArray);\r\n            copyArray.push({\r\n                productAttributeName: this.state.productAttributeName,\r\n                productAttributeValue: this.state.productAttributeValue,\r\n            })\r\n            this.setState({ productAttributeName: '' })\r\n            this.setState({ productAttributeValue: '' })\r\n            this.setState({ productAttributeNameSelected: '' })\r\n            this.setState({ productAttributesArray: copyArray })\r\n        } else {\r\n            this.setState({ productAttributeError: 'Enter Field Name and Value' });\r\n        }\r\n    }\r\n    handleSaveProductAttributesClicked = () => {\r\n        var allArrays = [];\r\n        this.state.productAttributesArray.forEach(element => {\r\n            var trim = element.productAttributeValue.split(' ').join('');\r\n            var splitArray = trim.split('|');\r\n            allArrays.push(splitArray)\r\n        });\r\n\r\n        const array = this.allPossibleCases(allArrays)\r\n        var data = [];\r\n        array.forEach(element => {\r\n            const split = element.split('-');\r\n            let item = [];\r\n\r\n            split.forEach((e, i) => {\r\n                item.push({ name: this.state.productAttributesArray[i].productAttributeName, value: e })\r\n            });\r\n            data.push({ items: item, price: '', stock: '1', image_link: '', price_error: '', image_link_error: '' })\r\n        });\r\n        // console.log(\"split Array: \", data)\r\n        this.setState({ variationsArray: data })\r\n    }\r\n    allPossibleCases(arr) {\r\n        if (arr.length == 1) {\r\n            return arr[0];\r\n        } else {\r\n            var result = [];\r\n            var allCasesOfRest = this.allPossibleCases(arr.slice(1));  // recur with the rest of array\r\n            for (var i = 0; i < allCasesOfRest.length; i++) {\r\n                for (var j = 0; j < arr[0].length; j++) {\r\n                    result.push(arr[0][j] + \"-\" + allCasesOfRest[i]);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    handleUpdateProductAttributeClicked = (index, name, value) => {\r\n        const copyArray = Object.assign([], this.state.productAttributesArray);\r\n        copyArray[index] = { productAttributeName: name, productAttributeValue: value };\r\n        this.setState({ productAttributesArray: copyArray });\r\n    }\r\n    handleDeleteProductAttributeClicked = (index) => {\r\n        const copyArray = Object.assign([], this.state.productAttributesArray);\r\n        copyArray.splice(index, 1);\r\n        this.setState({ productAttributesArray: copyArray });\r\n    }\r\n    handleDeleteProductVariationClicked = (index) => {\r\n        const copyArray = Object.assign([], this.state.variationsArray);\r\n        copyArray.splice(index, 1);\r\n        this.setState({ variationsArray: copyArray });\r\n    }\r\n    // \r\n    handleSamePriceForAllVariationsChanged = (e) => {\r\n        this.setState({ samePriceInput: e.target.value })\r\n    }\r\n    handleVariationSamePriceCheckboxChanged = (e) => {\r\n        if (e.target.checked) {\r\n            const copyArray = Object.assign([], this.state.variationsArray);\r\n\r\n            copyArray.forEach(element => {\r\n                element.price = this.state.samePrice\r\n            });\r\n        }\r\n    }\r\n    // \r\n    handleVariationPriceChanged = (e, index) => {\r\n        const copyArray = Object.assign([], this.state.variationsArray);\r\n        let object = copyArray[index];\r\n        if (e.target.value >= 0) {\r\n            object.price = e.target.value;\r\n            copyArray[index] = object;\r\n            this.setState({ variationsArray: copyArray });\r\n        }\r\n    }\r\n    handleVariationProductInStockChanged = (e, index) => {\r\n        const copyArray = Object.assign([], this.state.variationsArray);\r\n        let object = copyArray[index];\r\n        if (e.target.value >= 0) {\r\n            object.stock = e.target.value;\r\n            copyArray[index] = object;\r\n            this.setState({ variationsArray: copyArray });\r\n        }\r\n    }\r\n    handleVariationImageLinkChanged = (e, index) => {\r\n        const copyArray = Object.assign([], this.state.variationsArray);\r\n        let object = copyArray[index];\r\n        object.image_link = e.target.value;\r\n        copyArray[index] = object;\r\n        this.setState({ variationsArray: copyArray });\r\n    }\r\n    saveVariationsClicked = () => {\r\n        const copyArray = Object.assign([], this.state.variationsArray);\r\n        let flag = true;\r\n        copyArray.forEach(element => {\r\n            if (element.price == '' || element.image_link == '') {\r\n                flag = false;\r\n                if (element.price == '') {\r\n                    element.price_error = 'Enter price'\r\n                }\r\n                if (element.image_link == '') {\r\n                    element.image_link_error = 'Enter Image Link'\r\n                }\r\n            } else {\r\n                element.price_error = ''\r\n                element.image_link_error = ''\r\n            }\r\n        });\r\n        if (flag == true) {\r\n            this.setState({ isVariationsSaved: true })\r\n        }\r\n        this.setState({ variationsArray: copyArray });\r\n    }\r\n    variationsErrorCheck = (data) => {\r\n        if (data.price_error != '' || data.image_link_error != '') {\r\n            return '1px solid red'\r\n        }\r\n        else {\r\n            return 'none'\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // Custom Fields\r\n    customFieldNameChangeHandler(e) {\r\n        this.setState({ customFieldName: e.value })\r\n        this.setState({ customFieldNameSelected: e })\r\n    }\r\n    customFieldValueChangeHandler = (e) => {\r\n        this.setState({ customFieldValue: e.target.value })\r\n    }\r\n    addCustomFieldBtnClicked = () => {\r\n        if (this.state.customFieldName != '' && this.state.customFieldValue != '') {\r\n            this.setState({ customFieldError: '' })\r\n            const copyArray = Object.assign([], this.state.customFieldsArray);\r\n            copyArray.push({\r\n                customFieldName: this.state.customFieldName,\r\n                customFieldValue: this.state.customFieldValue,\r\n            })\r\n            this.setState({ customFieldName: '' })\r\n            this.setState({ customFieldValue: '' })\r\n            this.setState({ customFieldNameSelected: '' })\r\n            this.setState({ customFieldsArray: copyArray })\r\n        } else {\r\n            this.setState({ customFieldError: 'Enter Field Name and Value' });\r\n        }\r\n    }\r\n    updateCustomFieldsEvent = (index, name, value) => {\r\n        const copyArray = Object.assign([], this.state.customFieldsArray);\r\n        copyArray[index] = { customFieldName: name, customFieldValue: value };\r\n        this.setState({ customFieldsArray: copyArray });\r\n    }\r\n    deleteCustomFieldsEvent = (index) => {\r\n        const copyArray = Object.assign([], this.state.customFieldsArray);\r\n        copyArray.splice(index, 1);\r\n        this.setState({ customFieldsArray: copyArray });\r\n    }\r\n\r\n\r\n    // Dangerous Goods\r\n    handleDangerousGoodsChange = (e, name) => {\r\n        const copyArray = Object.assign([], this.state.dangerousGoodsArray);\r\n        if (e.target.checked) {\r\n            copyArray.push(name);\r\n        } else {\r\n            copyArray.forEach((element, index) => {\r\n                if (element == name) {\r\n                    copyArray.splice(index, 1)\r\n                }\r\n            });\r\n        }\r\n        this.setState({ dangerousGoodsArray: copyArray });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Formik\r\n                validationSchema={schema}\r\n                initialValues={{\r\n                    // product_name: '',\r\n                    // product_description: '',\r\n                    // // Product Data\r\n                    product_type: 'simple-product',\r\n                    // // => Inventory\r\n                    // sku: '',\r\n                    // // => General(Simple-Product)\r\n                    // product_price: '', product_in_stock: '', product_brand_name: '', product_image_link: '',\r\n                    // product_warranty: '', warranty_type: '', product_discount: '',\r\n                    // // => Attributes (Variable Product)\r\n                    // purchase_note: '',\r\n                    // // => Variations (Variable Product)\r\n                    // product_variations: '',\r\n                    // // => Shipping\r\n                    // product_weight: '', dimension_length: '', dimension_width: '',\r\n                    // dimension_height: '', shipping_charges: '', handling_fee: '',\r\n                    // // => Advanve\r\n                    // purchase_note: '',\r\n                    // // Custom Fields\r\n                    // custom_fields: '',\r\n\r\n                    // product_category: '',\r\n                    // dangerous_goods: '',\r\n                    // product_tags: '',\r\n                }}\r\n                onSubmit={(values, { setSubmitting, resetForm }) => {\r\n                    if (this.state.productCategories == '' || (this.state.simple_product_image_link == '' && values.product_type == 'simple-product')) {\r\n                        // if (this.state.customFieldNameArray == '') {\r\n                        //     this.setState({ categoryError: \"error\", categoryErrorDiv: 'RedBorderDiv' });\r\n                        // }\r\n                        if (this.state.productCategories == '') {\r\n                            this.setState({ categoryError: \"error\", categoryErrorDiv: 'RedBorderDiv' });\r\n                        }\r\n                        if (this.state.simple_product_image_link == '' && values.product_type == 'simple-product') {\r\n                            this.setState({ showSimpleProductPriceImgLinkErrorrAlert: true, image_linkError: \"error\", image_linkErrorDiv: 'RedBorderDiv' });\r\n                        }\r\n                        setSubmitting(false);\r\n                    } else if (this.state.isVariationsSaved == false && values.product_type == 'variable-prouct') {\r\n                        this.setState({ showVariationsErrorAlert: true });\r\n                    } else {\r\n                        resetForm();\r\n                        setSubmitting(true);\r\n                        this.setState({ isLoading: true });\r\n                        setTimeout(() => {\r\n                            let array = [];\r\n                            this.state.productCategories.forEach(element => {\r\n                                array.push(element.value)\r\n                            })\r\n                            values.product_category = array;\r\n                            array = [];\r\n                            this.state.productTags.forEach(element => {\r\n                                array.push(element.value)\r\n                            })\r\n                            values.product_tags = array;\r\n\r\n                            values.dangerous_goods = this.state.dangerousGoodsArray;\r\n\r\n                            if (values.product_type == 'simple-product') {\r\n                                array = [];\r\n                                this.state.simple_product_image_link.forEach(element => {\r\n                                    array.push(element.value)\r\n                                })\r\n                                values.product_image_link = array;\r\n                            } else {\r\n\r\n                                array = [];\r\n                                this.state.variationsArray.forEach(element => {\r\n                                    let item = []\r\n                                    element.items.forEach(e => {\r\n                                        let name = []\r\n                                        name.push(e.name, e.value);\r\n                                        item.push(name)\r\n                                    });\r\n                                    item.push({ price: element.price })\r\n                                    item.push({ stock: element.stock })\r\n                                    item.push({ image_link: element.image_link })\r\n                                    console.log('item:', item)\r\n                                    array.push(item)\r\n                                })\r\n                                values.product_variations = array;\r\n\r\n\r\n                                values.custom_fields = this.state.customFieldsArray;\r\n                            }\r\n\r\n                            console.log('values: ', values)\r\n                            resetForm();\r\n\r\n                            if (this.uploadProduct(values, this)) {\r\n                                this.setState({\r\n                                    productCategories: '',\r\n                                    categoryError: 'no_error',\r\n                                    categoryErrorDiv: 'BorderDiv',\r\n                                    productTags: [],\r\n                                    warrantyType: 'Year',\r\n                                    inputValue: '',\r\n                                    simple_product_image_link: [],\r\n                                    image_linkError: 'no_error',\r\n                                    image_linkErrorDiv: 'BorderDiv',\r\n                                    isVariableProduct: false,\r\n                                    productAttributesArray: [],\r\n                                    productAttributeName: '',\r\n                                    productAttributeValue: '',\r\n                                    productAttributeError: '',\r\n                                    variationsArray: [],\r\n                                    isVariationsSaved: false,\r\n                                    customFieldsArray: [],\r\n                                    customFieldName: '',\r\n                                    customFieldValue: '',\r\n                                    customFieldError: '',\r\n                                });\r\n\r\n                            }\r\n                            setSubmitting(false);\r\n                        }, 500);\r\n                    }\r\n                }}\r\n            >\r\n                {\r\n                    ({\r\n                        handleSubmit, handleChange, values, touched, isValid, errors, handleBlur, isSubmitting\r\n                    }) => (\r\n                            <div>\r\n                                <Row style={styles.title_row} noGutters>\r\n                                    <FontAwesomeIcon icon={faPlus} style={styles.title_fontawesome} />\r\n                                    <div className=\"mr-auto\" style={styles.title}> Add New Product</div>\r\n                                </Row>\r\n                                <Form noValidate onSubmit={handleSubmit}>\r\n\r\n                                    {this.state.showToast ? <ShowToast onCloseHandler={(e) => this.setState({ showToast: false })} show={this.state.showToast}\r\n                                        header={'Success'} message={'Product Uploaded Successfully'} iconName={faThumbsUp} color={\"green\"} />\r\n                                        : null\r\n                                    }\r\n                                    {this.state.showVariationsErrorAlert ?\r\n                                        <ShowToast onCloseHandler={(e) => this.setState({ showVariationsErrorAlert: false })} show={this.state.showVariationsErrorAlert}\r\n                                            header={'Error'} message={'Please Add/Save Variations First'} iconName={faExclamationTriangle} color={\"red\"} />\r\n                                        : null\r\n                                    }\r\n                                    {this.state.showSimpleProductPriceImgLinkErrorrAlert ?\r\n                                        <ShowToast onCloseHandler={(e) => this.setState({ showSimpleProductPriceImgLinkErrorrAlert: false })} show={this.state.showSimpleProductPriceImgLinkErrorrAlert}\r\n                                            header={'Error'} message={'Enter Price/Image Link in General Tab First'} iconName={faExclamationTriangle} color={\"red\"} />\r\n                                        : null\r\n                                    }\r\n\r\n\r\n                                    <Row noGutters style={{ paddingTop: '2%' }}>\r\n                                        <Col lg={9} md={9} sm={12} xs={12}>\r\n                                            {/* Product Name */}\r\n                                            <Form.Group as={Row} style={styles.row}>\r\n                                                <Form.Label style={styles.label}>Product Name<span>*</span></Form.Label>\r\n                                                <InputGroup>\r\n                                                    <Form.Control\r\n                                                        type=\"text\"\r\n                                                        placeholder=\"Enter Product Name\"\r\n                                                        name=\"product_name\"\r\n                                                        value={values.product_name || ''}\r\n                                                        onChange={handleChange}\r\n                                                        isInvalid={touched.product_name && errors.product_name}\r\n                                                    />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors.product_name}\r\n                                                    </Form.Control.Feedback>\r\n                                                </InputGroup>\r\n                                            </Form.Group>\r\n                                            {/* End of Product Name */}\r\n\r\n                                            {/* Product Discription */}\r\n                                            <Accordion style={{ width: '100%' }} defaultActiveKey=\"0\">\r\n                                                <Form.Group as={Row} style={styles.row}>\r\n                                                    <Card style={styles.card}>\r\n                                                        <Card.Header style={styles.card_header}>\r\n                                                            <Form.Label >Product Discruption</Form.Label>\r\n                                                            <Accordion.Toggle as={Button} size=\"sm\" eventKey=\"0\" style={{ float: 'right', background: 'none' }}>\r\n                                                                <FontAwesomeIcon size=\"xs\" icon={faSlidersH} style={styles.variations_fontawesome} />\r\n                                                            </Accordion.Toggle>\r\n                                                        </Card.Header>\r\n                                                        <Accordion.Collapse eventKey=\"0\">\r\n                                                            <Card.Body>\r\n                                                                <Form.Group>\r\n                                                                    <Form.Control\r\n                                                                        as=\"textarea\"\r\n                                                                        placeholder=\"Enter Product Description\"\r\n                                                                        name=\"product_description\"\r\n                                                                        value={values.product_description || ''}\r\n                                                                        rows=\"7\"\r\n                                                                        onChange={handleChange}\r\n                                                                        isInvalid={touched.product_description && errors.product_description}\r\n                                                                    />\r\n                                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                                        {errors.product_description}\r\n                                                                    </Form.Control.Feedback>\r\n                                                                </Form.Group>\r\n                                                            </Card.Body>\r\n                                                        </Accordion.Collapse>\r\n                                                    </Card>\r\n                                                </Form.Group>\r\n                                            </Accordion>\r\n                                            {/* Product Data Row */}\r\n                                            <Row style={styles.row}>\r\n                                                <ProductData\r\n                                                    productTypeHandler={this.handleProductTypeChange}\r\n                                                    isVariableProduct={this.state.isVariableProduct}\r\n\r\n                                                    product_type_values={values.product_type || ''}\r\n\r\n                                                    product_price_values={values.product_price || ''}\r\n                                                    product_price_touched={touched.product_price}\r\n                                                    product_price_errors={errors.product_price}\r\n\r\n                                                    product_in_stock_values={values.product_in_stock || ''}\r\n                                                    product_in_stock_touched={touched.product_in_stock}\r\n                                                    product_in_stock_errors={errors.product_in_stock}\r\n\r\n                                                    product_brand_name_values={values.product_brand_name || ''}\r\n                                                    product_brand_name_touched={touched.product_brand_name}\r\n                                                    product_brand_name_errors={errors.product_brand_name}\r\n\r\n                                                    imageLink={this.state.simple_product_image_link}\r\n                                                    simpleProductImageLinkHandler={this.handleSimpleProductImageLinkChange.bind(this)}\r\n                                                    inputValue={this.state.inputValue}\r\n                                                    simpleProductImageLinkInputChangeHandler={this.handleSimpleProductImageLinkInputChange.bind(this)}\r\n                                                    simpleProductImageLinkhandleKeyDownHandler={this.handleSimpleProductImage_linkKeyDown.bind(this)}\r\n                                                    simpleProductError={this.state.showSimpleProductPriceImgLinkErrorrAlert}\r\n\r\n                                                    product_warranty_values={values.product_warranty || ''}\r\n                                                    product_warranty_touched={touched.product_warranty}\r\n                                                    product_warranty_errors={errors.product_warranty}\r\n\r\n                                                    warranty_type_values={values.warranty_type || ''}\r\n                                                    warranty_type_touched={touched.warranty_type}\r\n                                                    warranty_type_errors={errors.warranty_type}\r\n\r\n                                                    product_discount_values={values.product_discount || ''}\r\n                                                    product_discount_touched={touched.product_discount}\r\n                                                    product_discount_errors={errors.product_discount}\r\n\r\n                                                    sku_values={values.sku || ''}\r\n                                                    sku_touched={touched.sku}\r\n                                                    sku_errors={errors.sku}\r\n\r\n                                                    product_weight_values={values.product_weight || ''}\r\n                                                    product_weight_touched={touched.product_weight}\r\n                                                    product_weight_errors={errors.product_weight}\r\n\r\n                                                    dimension_length_values={values.dimension_length || ''}\r\n                                                    dimension_length_touched={touched.dimension_length}\r\n                                                    dimension_length_errors={errors.dimension_length}\r\n\r\n                                                    dimension_width_values={values.dimension_width || ''}\r\n                                                    dimension_width_touched={touched.dimension_width}\r\n                                                    dimension_width_errors={errors.dimension_width}\r\n\r\n                                                    dimension_height_values={values.dimension_height || ''}\r\n                                                    dimension_height_touched={touched.dimension_height}\r\n                                                    dimension_height_errors={errors.dimension_height}\r\n\r\n                                                    shipping_charges_values={values.shipping_charges || ''}\r\n                                                    shipping_charges_touched={touched.shipping_charges}\r\n                                                    shipping_charges_errors={errors.shipping_charges}\r\n\r\n                                                    handling_fee_values={values.handling_fee || ''}\r\n                                                    handling_fee_touched={touched.handling_fee}\r\n                                                    handling_fee_errors={errors.handling_fee}\r\n\r\n                                                    purchase_note_values={values.purchase_note || ''}\r\n                                                    purchase_note_touched={touched.purchase_note}\r\n                                                    purchase_note_errors={errors.purchase_note}\r\n\r\n                                                    onChange={handleChange}\r\n                                                    touched={touched}\r\n                                                    errors={errors}\r\n\r\n                                                    productColorChangeHandler={this.handleProductColorChange}\r\n                                                    // size={this.state.size}\r\n                                                    productSizeChangeHandler={this.handleProductSizeChange}\r\n\r\n                                                    attributesArray={this.state.productAttributesArray}\r\n                                                    name={this.state.productAttributeName}\r\n                                                    value={this.state.productAttributeValue}\r\n                                                    productAttributeNameSelected={this.state.productAttributeNameSelected}\r\n                                                    attributeNameHandler={this.handleProductAttributeNameChange.bind(this)}\r\n                                                    attributeValueHandler={this.handleProductAttributeValueChange.bind(this)}\r\n                                                    addAttributeHandler={this.handleAddProductAttributeClicked.bind(this)}\r\n                                                    update={this.handleUpdateProductAttributeClicked.bind(this)}\r\n                                                    deleteAttributeHandler={this.handleDeleteProductAttributeClicked.bind(this)}\r\n                                                    deleteVariationHandler={this.handleDeleteProductVariationClicked.bind(this)}\r\n                                                    saveVariationsHandler={this.saveVariationsClicked.bind(this)}\r\n                                                    variationsErrorHandler={this.variationsErrorCheck.bind(this)}\r\n                                                    error={this.state.productAttributeError}\r\n\r\n                                                    saveAttributesHandler={this.handleSaveProductAttributesClicked}\r\n                                                    variationsArray={this.state.variationsArray}\r\n                                                    variationPriceHandler={this.handleVariationPriceChanged.bind(this)}\r\n                                                    variationStockHandler={this.handleVariationProductInStockChanged.bind(this)}\r\n                                                    variationImageLinkHandler={this.handleVariationImageLinkChanged.bind(this)}\r\n                                                    priceCheckboxHandler={this.handleVariationSamePriceCheckboxChanged.bind(this)}\r\n                                                    samePrice={this.state.samePriceInput}\r\n                                                    samePriceForAllVariationsHandler={this.handleSamePriceForAllVariationsChanged.bind(this)}\r\n                                                />\r\n                                            </Row>\r\n                                            {/* End of Product Data Row */}\r\n                                            {/* Custom Fields Row */}\r\n                                            <Form.Group as={Row} style={styles.row} >\r\n                                                <CustomFields\r\n                                                    customFieldsArray={this.state.customFieldsArray}\r\n                                                    isVariableProduct={this.state.isVariableProduct}\r\n                                                    name={this.state.customFieldName}\r\n                                                    value={this.state.customFieldValue}\r\n                                                    customFieldNameSelected={this.state.customFieldNameSelected}\r\n                                                    fieldNameHandler={this.customFieldNameChangeHandler.bind(this)}\r\n                                                    fieldValueHandler={this.customFieldValueChangeHandler.bind(this)}\r\n                                                    addFieldHandler={this.addCustomFieldBtnClicked.bind(this)}\r\n                                                    update={this.updateCustomFieldsEvent.bind(this)}\r\n                                                    delete={this.deleteCustomFieldsEvent.bind(this)}\r\n                                                    error={this.state.customFieldError}\r\n                                                />\r\n                                            </Form.Group>\r\n                                            {/* End of Custom Fields Row */}\r\n                                        </Col>\r\n\r\n                                        <Col lg={3} md={3} sm={12} xs={12}>\r\n                                            {/* Product Category */}\r\n                                            <Accordion style={{ width: '100%' }} defaultActiveKey=\"0\">\r\n                                                <Form.Group as={Row} style={styles.row}>\r\n                                                    <Card style={styles.card}>\r\n                                                        <Card.Header style={styles.card_header}>\r\n                                                            <Form.Label >Product Categories</Form.Label>\r\n                                                            <Accordion.Toggle as={Button} size=\"sm\" eventKey=\"0\" style={{ float: 'right', background: 'none' }}>\r\n                                                                <FontAwesomeIcon size=\"xs\" icon={faSlidersH} style={styles.variations_fontawesome} />\r\n                                                            </Accordion.Toggle>\r\n                                                        </Card.Header>\r\n                                                        <Accordion.Collapse eventKey=\"0\">\r\n                                                            <Card.Body style={{ height: '250px' }}>\r\n                                                                <div className={this.state.categoryErrorDiv}>\r\n                                                                    <CreatableSelect\r\n                                                                        isMulti\r\n                                                                        onChange={this.handleProductCategoryChange}\r\n                                                                        options={this.state.product_categories_options}\r\n                                                                        value={this.state.productCategories}\r\n                                                                        placeholder=\"Select/Enter Category\"\r\n                                                                    />\r\n                                                                </div>\r\n                                                                <label className={this.state.categoryError}>\r\n                                                                    Selet Category\r\n                                                        </label>\r\n                                                            </Card.Body>\r\n                                                        </Accordion.Collapse>\r\n                                                    </Card>\r\n                                                </Form.Group>\r\n                                            </Accordion>\r\n                                            {/* End of Product ategory */}\r\n\r\n                                            {/* Dangerous Goods */}\r\n                                            <Accordion style={{ width: '100%' }} defaultActiveKey=\"0\">\r\n                                                <Form.Group as={Row} style={styles.row}>\r\n                                                    <Card style={styles.card}>\r\n                                                        <Card.Header style={styles.card_header}>\r\n                                                            <Form.Label >Dangerous Goods</Form.Label>\r\n                                                            <Accordion.Toggle as={Button} size=\"sm\" eventKey=\"0\" style={{ float: 'right', background: 'none' }}>\r\n                                                                <FontAwesomeIcon size=\"xs\" icon={faSlidersH} style={styles.variations_fontawesome} />\r\n                                                            </Accordion.Toggle>\r\n                                                        </Card.Header>\r\n                                                        <Accordion.Collapse eventKey=\"0\">\r\n                                                            <Card.Body>\r\n                                                                <Form.Check\r\n                                                                    name=\"not_specified\"\r\n                                                                    label=\"Not Specified\"\r\n                                                                    style={styles.label}\r\n                                                                    onChange={(e) => this.handleDangerousGoodsChange(e, 'Not Specified')}\r\n                                                                />\r\n                                                                <br></br>\r\n                                                                <Form.Check\r\n                                                                    name=\"ceramic\"\r\n                                                                    label=\"Ceramic\"\r\n                                                                    style={styles.label}\r\n                                                                    onChange={(e) => this.handleDangerousGoodsChange(e, 'Ceramic')}\r\n                                                                />\r\n                                                                <br></br>\r\n                                                                <Form.Check\r\n                                                                    name=\"glass\"\r\n                                                                    label=\"Glass\"\r\n                                                                    style={styles.label}\r\n                                                                    onChange={(e) => this.handleDangerousGoodsChange(e, 'Glass')}\r\n                                                                />\r\n                                                                <br></br>\r\n                                                                <Form.Check\r\n                                                                    name=\"metal\"\r\n                                                                    label=\"Metal\"\r\n                                                                    style={styles.label}\r\n                                                                    onChange={(e) => this.handleDangerousGoodsChange(e, 'Metal')}\r\n                                                                />\r\n                                                                <br></br>\r\n                                                                <Form.Check\r\n                                                                    name=\"plastic\"\r\n                                                                    label=\"Plastic\"\r\n                                                                    style={styles.label}\r\n                                                                    onChange={(e) => this.handleDangerousGoodsChange(e, 'Plastic')}\r\n                                                                />\r\n                                                            </Card.Body>\r\n                                                        </Accordion.Collapse>\r\n                                                    </Card>\r\n                                                </Form.Group>\r\n                                            </Accordion>\r\n                                            {/* End ofDangerous Goods */}\r\n\r\n                                            {/* Product Tags */}\r\n                                            <Accordion style={{ width: '100%' }} defaultActiveKey=\"0\">\r\n                                                <Form.Group as={Row} style={styles.row}>\r\n                                                    <Card style={styles.card}>\r\n                                                        <Card.Header style={styles.card_header}>\r\n                                                            <Form.Label >Product Tags</Form.Label>\r\n                                                            <Accordion.Toggle as={Button} size=\"sm\" eventKey=\"0\" style={{ float: 'right', background: 'none' }}>\r\n                                                                <FontAwesomeIcon size=\"xs\" icon={faSlidersH} style={styles.variations_fontawesome} />\r\n                                                            </Accordion.Toggle>\r\n                                                        </Card.Header>\r\n                                                        <Accordion.Collapse eventKey=\"0\">\r\n                                                            <Card.Body style={{ height: '250px' }}>\r\n                                                                <CreatableSelect\r\n                                                                    isMulti\r\n                                                                    onChange={this.handleProductTagChange}\r\n                                                                    options={product_color_options}\r\n                                                                    value={this.state.productTags}\r\n                                                                    placeholder=\"Select/Enter Tags\"\r\n                                                                />\r\n                                                            </Card.Body>\r\n                                                        </Accordion.Collapse>\r\n                                                    </Card>\r\n                                                </Form.Group>\r\n                                            </Accordion>\r\n                                            {/* End of Product Tags */}\r\n\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n\r\n                                    {/* Form Submit Btn Row */}\r\n                                    <Form.Row style={styles.row}>\r\n                                        <Form.Group as={Col}>\r\n                                            <p style={styles.label}>Fields with <span> * </span> are mandatory.</p>\r\n                                            <p style={styles.label}>For adding new size, color, link: Enter text and hit Enter or Tab key</p>\r\n                                            <Button type=\"submit\" onSubmit={handleSubmit} disabled={this.state.isLoading} block style={styles.submit_btn}>\r\n                                                {this.state.isLoading ? 'Uploading' : 'Upload'}\r\n                                                {this.state.isLoading ? <Spinner animation=\"grow\" size=\"sm\" /> : <div></div>}\r\n                                            </Button>\r\n                                        </Form.Group>\r\n                                    </Form.Row>\r\n                                    {/* End of Form Submit Btn Row */}\r\n                                </Form>\r\n\r\n                                <style jsx>\r\n                                    {`\r\n                                        .no_error {\r\n                                            display: none;\r\n                                        }\r\n                                        .error{\r\n                                            margin-top: 4px;  \r\n                                            color: #DC3545;\r\n                                            font-size: 14px;\r\n                                            display: block;\r\n                                        }\r\n                                        .RedBorderDiv{\r\n                                            border: 0.5px solid #DC3545;\r\n                                            padding: 0.5px 0px 0.2px 0.5px;\r\n                                            width: 100%;\r\n                                        }\r\n                                        .BorderDiv{\r\n                                            border: none;\r\n                                            width: 100%;\r\n                                        }\r\n                                        span {\r\n                                            color: red;\r\n                                        }\r\n                                        .nav_link {\r\n                                            background: ${GlobalStyleSheet.admin_primry_color};\r\n                                            border-top: 0.5px solid #434556;\r\n                                            border-bottom: 0.5px solid #434556;\r\n                                            margin: 1.5px 0px;\r\n                                            border-radius: 4px\r\n                                        }\r\n                                        p {\r\n                                            text-align: center; \r\n                                            margin: 0px;\r\n                                        }\r\n                                    `}\r\n                                </style>\r\n                            </div>\r\n                        )\r\n                }\r\n            </Formik>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    title_row: {\r\n        borderBottom: '1px solid gray',\r\n        padding: '1.5% 4%'\r\n    },\r\n    title_fontawesome: {\r\n        color: 'gray',\r\n        marginRight: '3%',\r\n        width: '26px',\r\n        height: '26px',\r\n        maxHeight: '26px',\r\n        maxWidth: '26px',\r\n    },\r\n    title: {\r\n        color: 'gray'\r\n    },\r\n\r\n    nav_link: {\r\n        color: 'white',\r\n        fontSize: '13px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: '45px',\r\n    },\r\n\r\n\r\n    row: {\r\n        margin: '2%',\r\n        padding: '0%'\r\n    },\r\n    card: {\r\n        width: '100%',\r\n    },\r\n    card_header: {\r\n        alignItems: 'center',\r\n        // color: '#6A7074',\r\n        fontSize: '14px',\r\n        background: 'lightgray'\r\n    },\r\n    buttons: {\r\n        background: `${GlobalStyleSheet.primry_color}`,\r\n        border: 'none',\r\n        fontSize: '10px',\r\n    },\r\n    submit_btn: {\r\n        // background: `${GlobalStyleSheet.admin_primry_color}`,\r\n        marginTop: '1%',\r\n    },\r\n    label: {\r\n        fontSize: `${GlobalStyleSheet.form_label_fontsize}`,\r\n    },\r\n    term_condition_label: {\r\n        width: '100%',\r\n        fontSize: `${GlobalStyleSheet.form_label_fontsize}`,\r\n        paddingTop: '-10px',\r\n        marginTop: '-10px',\r\n    },\r\n    fontawesome: {\r\n        color: `${GlobalStyleSheet.primary_text_color}`,\r\n        width: '15px',\r\n        height: '15px',\r\n        maxHeight: '15px',\r\n        maxWidth: '15px',\r\n    },\r\n    product_fontawesome: {\r\n        color: `${GlobalStyleSheet.primary_text_color}`,\r\n        marginRight: '10%',\r\n        width: '17px',\r\n        height: '17px',\r\n        maxHeight: '17px',\r\n        maxWidth: '17px',\r\n    },\r\n    variations_fontawesome: {\r\n        color: `${GlobalStyleSheet.admin_primry_color}`,\r\n        marginRight: '10%',\r\n        width: '15px',\r\n        height: '15px',\r\n        maxHeight: '15px',\r\n        maxWidth: '15px',\r\n    },\r\n}\r\nexport default AddNew;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AADA;AACA;AAGA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AACA;AAIA;AACA;AAGA;AAIA;AACA;AAEA;AACA;AAIA;AACA;AAIA;AAIA;AAGA;AACA;AAGA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAIA;AAIA;AAIA;AAGA;AA/DA;AACA;AAmFA;;;;;AACA;AAAA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiFA;AAAA;AAAA;AACA;AACA;AAnFA;AAuFA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAzFA;AA4FA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AA9FA;AA+FA;AAAA;AAAA;AACA;AACA;AAjGA;AAkGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AAPA;AASA;AACA;AA/GA;AAiIA;AAAA;AAAA;AACA;AACA;AAnIA;AAoIA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAnJA;AAoJA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAzKA;AAyLA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA7LA;AA8LA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAlMA;AAmMA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAvMA;AAyMA;AAAA;AAAA;AACA;AACA;AA3MA;AA4MA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AApNA;AAsNA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AA9NA;AA+NA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAvOA;AAwOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA9OA;AA+OA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AApQA;AAqQA;AACA;AACA;AAEA;AACA;AACA;AACA;AA5QA;AAqRA;AAAA;AAAA;AACA;AACA;AAvRA;AAwRA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAvSA;AAwSA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA5SA;AA6SA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAjTA;AAqTA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA/TA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAhBA;AA4CA;AACA;AACA;AAhDA;AAiDA;AACA;AACA;;;;;;;;;AAEA;;;AAEA;AACA;;AADA;AACA;AAAA;AAAA;;;;;;;AAEA;AACA;;;;;;;AAEA;AACA;;;AAAA;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;AAyCA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;AAyFA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;;AA+CA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAzBA;AA0BA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAuBA;AACA;AAAA;AACA;AACA;AACA;AAvHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAzEA;AA2EA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAicA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhUA;AAAA;AAAA;AAAA;AAHA;AAmXA;;;;AAlzBA;AACA;AAozBA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAxEA;AAiFA;;;;A","sourceRoot":""}